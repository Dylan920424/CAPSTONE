
/Users/dylanwu/Desktop/IoTEngineering/CAPSTONE/target/CAPSTONE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008228  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001c33c  2**0
                  CONTENTS
  3 .data         000000d0  2003db6c  000dc240  0000db6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000bb4  2003dc3c  2003dc3c  0001dc3c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000dc310  000dc310  0001c310  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000dc338  000dc338  0001c338  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00224ab5  00000000  00000000  0001c33c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0002b6e2  00000000  00000000  00240df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00037b44  00000000  00000000  0026c4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003c58  00000000  00000000  002a4017  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00007178  00000000  00000000  002a7c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00060e10  00000000  00000000  002aede7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00076ed7  00000000  00000000  0030fbf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00127738  00000000  00000000  00386ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00011514  00000000  00000000  004ae208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	04 b0 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f006 fb25 	bl	da67c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f006 fb2a 	bl	da692 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003db6c 	.word	0x2003db6c
   d4048:	000dc240 	.word	0x000dc240
   d404c:	2003dc3c 	.word	0x2003dc3c
   d4050:	2003dc3c 	.word	0x2003dc3c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f005 fb83 	bl	d9764 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000dc23c 	.word	0x000dc23c
   d4080:	000dc188 	.word	0x000dc188

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b8e2 	b.w	d524c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc5b 	bl	d4944 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f005 bb35 	b.w	d9700 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f003 be7f 	b.w	d7d98 <malloc>

000d409a <_ZdlPv>:
   d409a:	f003 be85 	b.w	d7da8 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f003 be83 	b.w	d7da8 <free>
	...

000d40a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fd98 	bl	d7be0 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d7871 	.word	0x000d7871

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d40c8:	4770      	bx	lr
	...

000d40cc <_Z7OnTimerv>:
    }
  }
}

void OnTimer() {
  timerDone = true;
   d40cc:	4b03      	ldr	r3, [pc, #12]	; (d40dc <_Z7OnTimerv+0x10>)
   d40ce:	2201      	movs	r2, #1
   d40d0:	601a      	str	r2, [r3, #0]
  timerOn = false;
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <_Z7OnTimerv+0x14>)
   d40d4:	2200      	movs	r2, #0
   d40d6:	601a      	str	r2, [r3, #0]
   d40d8:	4770      	bx	lr
   d40da:	bf00      	nop
   d40dc:	2003dc90 	.word	0x2003dc90
   d40e0:	2003ddbc 	.word	0x2003ddbc

000d40e4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40e4:	6803      	ldr	r3, [r0, #0]
   d40e6:	4718      	bx	r3

000d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40e8:	2a01      	cmp	r2, #1
   d40ea:	d002      	beq.n	d40f2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40ec:	2a02      	cmp	r2, #2
   d40ee:	d002      	beq.n	d40f6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40f0:	e004      	b.n	d40fc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40f2:	6001      	str	r1, [r0, #0]
	      break;
   d40f4:	e002      	b.n	d40fc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40f6:	680b      	ldr	r3, [r1, #0]
   d40f8:	b100      	cbz	r0, d40fc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40fa:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40fc:	2000      	movs	r0, #0
   d40fe:	4770      	bx	lr

000d4100 <_ZN15Adafruit_BNO055D1Ev>:

/*!
 *  @brief  Class that stores state and functions for interacting with
 *          BNO055 Sensor
 */
class Adafruit_BNO055 : public Adafruit_Sensor {
   d4100:	4770      	bx	lr

000d4102 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4102:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d4104:	2301      	movs	r3, #1
   d4106:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d4108:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d410a:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d410c:	b113      	cbz	r3, d4114 <_ZN6Thread3runEPv+0x12>
            (*(th->func))(th->func_param);
   d410e:	68c0      	ldr	r0, [r0, #12]
   d4110:	4798      	blx	r3
   d4112:	e007      	b.n	d4124 <_ZN6Thread3runEPv+0x22>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4114:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d4116:	b128      	cbz	r0, d4124 <_ZN6Thread3runEPv+0x22>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4118:	6883      	ldr	r3, [r0, #8]
   d411a:	b90b      	cbnz	r3, d4120 <_ZN6Thread3runEPv+0x1e>
	__throw_bad_function_call();
   d411c:	f005 fc3b 	bl	d9996 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4120:	68c3      	ldr	r3, [r0, #12]
   d4122:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d4124:	2301      	movs	r3, #1
   d4126:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d4128:	2000      	movs	r0, #0
    }
   d412a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d412e:	f003 bb8f 	b.w	d7850 <os_thread_exit>
	...

000d4134 <_Z9ipHandlerPKcS0_>:
    Serial.printlnf("lat=%s,lon=%s", global_lat.c_str(), global_lon.c_str());
  }
  jsonParser.clear(); //clears the parser buffer so the temp can be parsed correctly
}

void ipHandler(const char *event, const char *data) {
   d4134:	b510      	push	{r4, lr}
  global_ip = data; //sets ip
   d4136:	4c06      	ldr	r4, [pc, #24]	; (d4150 <_Z9ipHandlerPKcS0_+0x1c>)
   d4138:	4620      	mov	r0, r4
   d413a:	f004 fd65 	bl	d8c08 <_ZN6StringaSEPKc>
  Serial.printlnf("global_ip=%s", global_ip.c_str()); //prints ip
   d413e:	f005 fa5d 	bl	d95fc <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4142:	6823      	ldr	r3, [r4, #0]
   d4144:	4a03      	ldr	r2, [pc, #12]	; (d4154 <_Z9ipHandlerPKcS0_+0x20>)
   d4146:	2101      	movs	r1, #1
}
   d4148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d414c:	f004 bc2c 	b.w	d89a8 <_ZN5Print11printf_implEbPKcz>
   d4150:	2003e324 	.word	0x2003e324
   d4154:	000db07b 	.word	0x000db07b

000d4158 <_ZN18Adafruit_NeoMatrixD1Ev>:
#define NEO_TILE_AXIS          0x40 // Bitmask for tile H/V orientation
#define NEO_TILE_PROGRESSIVE   0x00 // Same tile order across each line
#define NEO_TILE_ZIGZAG        0x80 // Tile order reverses between lines
#define NEO_TILE_SEQUENCE      0x80 // Bitmask for tile line order

class Adafruit_NeoMatrix : public Adafruit_GFX, public Adafruit_NeoPixel {
   d4158:	b510      	push	{r4, lr}
   d415a:	4b04      	ldr	r3, [pc, #16]	; (d416c <_ZN18Adafruit_NeoMatrixD1Ev+0x14>)
   d415c:	4604      	mov	r4, r0
   d415e:	f840 3b1c 	str.w	r3, [r0], #28
   d4162:	f003 f891 	bl	d7288 <_ZN17Adafruit_NeoPixelD1Ev>
   d4166:	4620      	mov	r0, r4
   d4168:	bd10      	pop	{r4, pc}
   d416a:	bf00      	nop
   d416c:	000dbbb8 	.word	0x000dbbb8

000d4170 <_ZN16JsonParserStaticILj512ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d4170:	b510      	push	{r4, lr}
   d4172:	4b03      	ldr	r3, [pc, #12]	; (d4180 <_ZN16JsonParserStaticILj512ELj50EED1Ev+0x10>)
   d4174:	6003      	str	r3, [r0, #0]
   d4176:	4604      	mov	r4, r0
   d4178:	f002 fb18 	bl	d67ac <_ZN10JsonParserD1Ev>
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}
   d4180:	000db020 	.word	0x000db020

000d4184 <_ZN16JsonParserStaticILj512ELj50EED0Ev>:
   d4184:	b510      	push	{r4, lr}
   d4186:	4604      	mov	r4, r0
   d4188:	f7ff fff2 	bl	d4170 <_ZN16JsonParserStaticILj512ELj50EED1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	f240 514c 	movw	r1, #1356	; 0x54c
   d4192:	f005 fbe6 	bl	d9962 <_ZdlPvj>
   d4196:	4620      	mov	r0, r4
   d4198:	bd10      	pop	{r4, pc}

000d419a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d419a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d419c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d419e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d41a0:	b113      	cbz	r3, d41a8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41a2:	2203      	movs	r2, #3
   d41a4:	4601      	mov	r1, r0
   d41a6:	4798      	blx	r3
    }
   d41a8:	4620      	mov	r0, r4
   d41aa:	bd10      	pop	{r4, pc}

000d41ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.16>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d41ac:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d41ae:	4604      	mov	r4, r0
   d41b0:	b170      	cbz	r0, d41d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.16+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d41b2:	6805      	ldr	r5, [r0, #0]
   d41b4:	b135      	cbz	r5, d41c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.16+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d41b6:	4628      	mov	r0, r5
   d41b8:	f7ff ffef 	bl	d419a <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d41bc:	2110      	movs	r1, #16
   d41be:	4628      	mov	r0, r5
   d41c0:	f005 fbcf 	bl	d9962 <_ZdlPvj>
   d41c4:	4620      	mov	r0, r4
   d41c6:	2114      	movs	r1, #20
      }
   d41c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d41cc:	f005 bbc9 	b.w	d9962 <_ZdlPvj>
   d41d0:	bd38      	pop	{r3, r4, r5, pc}

000d41d2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d41d2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d41d4:	6803      	ldr	r3, [r0, #0]
   d41d6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d41d8:	b1bb      	cbz	r3, d420a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d41da:	6858      	ldr	r0, [r3, #4]
   d41dc:	f003 fb08 	bl	d77f0 <os_thread_is_current>
   d41e0:	b978      	cbnz	r0, d4202 <_ZN6ThreadD1Ev+0x30>
   d41e2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d41e4:	7c5a      	ldrb	r2, [r3, #17]
   d41e6:	b912      	cbnz	r2, d41ee <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d41e8:	6858      	ldr	r0, [r3, #4]
   d41ea:	f003 fb11 	bl	d7810 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d41ee:	6823      	ldr	r3, [r4, #0]
   d41f0:	6858      	ldr	r0, [r3, #4]
   d41f2:	f003 fb15 	bl	d7820 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d41f6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d41f8:	2300      	movs	r3, #0
   d41fa:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d41fc:	b128      	cbz	r0, d420a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d41fe:	f7ff ffd5 	bl	d41ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.16>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4202:	6820      	ldr	r0, [r4, #0]
   d4204:	b108      	cbz	r0, d420a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4206:	f7ff ffd1 	bl	d41ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.16>
    }

    ~Thread()
    {
        dispose();
    }
   d420a:	4620      	mov	r0, r4
   d420c:	bd10      	pop	{r4, pc}
	...

000d4210 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
   d4210:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4214:	4606      	mov	r6, r0
   d4216:	460f      	mov	r7, r1
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d4218:	2014      	movs	r0, #20
   d421a:	492a      	ldr	r1, [pc, #168]	; (d42c4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
   d421c:	4615      	mov	r5, r2
   d421e:	4698      	mov	r8, r3
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d4220:	f005 fbaa 	bl	d9978 <_ZnwjRKSt9nothrow_t>
   d4224:	4604      	mov	r4, r0
   d4226:	b130      	cbz	r0, d4236 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4228:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d422a:	7403      	strb	r3, [r0, #16]
   d422c:	6003      	str	r3, [r0, #0]
   d422e:	6043      	str	r3, [r0, #4]
   d4230:	6083      	str	r3, [r0, #8]
   d4232:	60c3      	str	r3, [r0, #12]
   d4234:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4236:	6034      	str	r4, [r6, #0]

    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d4238:	2c00      	cmp	r4, #0
   d423a:	d039      	beq.n	d42b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
            goto error;
        }
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d423c:	4921      	ldr	r1, [pc, #132]	; (d42c4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
   d423e:	2010      	movs	r0, #16
   d4240:	f005 fb9a 	bl	d9978 <_ZnwjRKSt9nothrow_t>
   d4244:	4603      	mov	r3, r0
   d4246:	b1b0      	cbz	r0, d4276 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x66>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4248:	2200      	movs	r2, #0
   d424a:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d424c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4250:	aa02      	add	r2, sp, #8
   d4252:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4256:	e893 0003 	ldmia.w	r3, {r0, r1}
   d425a:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d425e:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4262:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4266:	6899      	ldr	r1, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4268:	68aa      	ldr	r2, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d426a:	60a9      	str	r1, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d426c:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d426e:	68ea      	ldr	r2, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4270:	68d9      	ldr	r1, [r3, #12]
   d4272:	60e9      	str	r1, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4274:	60da      	str	r2, [r3, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4276:	6825      	ldr	r5, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4278:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d427a:	b135      	cbz	r5, d428a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x7a>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d427c:	4628      	mov	r0, r5
   d427e:	f7ff ff8c 	bl	d419a <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4282:	2110      	movs	r1, #16
   d4284:	4628      	mov	r0, r5
   d4286:	f005 fb6c 	bl	d9962 <_ZdlPvj>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d428a:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d428c:	6803      	ldr	r3, [r0, #0]
   d428e:	b17b      	cbz	r3, d42b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4292:	4642      	mov	r2, r8
   d4294:	e88d 0009 	stmia.w	sp, {r0, r3}
   d4298:	4639      	mov	r1, r7
   d429a:	4b0b      	ldr	r3, [pc, #44]	; (d42c8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
   d429c:	3004      	adds	r0, #4
   d429e:	f003 fa9f 	bl	d77e0 <os_thread_create>
   d42a2:	b928      	cbnz	r0, d42b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
   d42a4:	6833      	ldr	r3, [r6, #0]
            goto error;
        }
        while (!d_->started) {
   d42a6:	7c1b      	ldrb	r3, [r3, #16]
   d42a8:	b943      	cbnz	r3, d42bc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
            os_thread_yield();
   d42aa:	f003 faa9 	bl	d7800 <os_thread_yield>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
            goto error;
        }
        while (!d_->started) {
   d42ae:	e7f9      	b.n	d42a4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x94>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42b0:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d42b2:	2300      	movs	r3, #0
   d42b4:	6033      	str	r3, [r6, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d42b6:	b108      	cbz	r0, d42bc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
	  get_deleter()(__p);
   d42b8:	f7ff ff78 	bl	d41ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.16>
            os_thread_yield();
        }
        return;
    error:
        d_.reset();
    }
   d42bc:	4630      	mov	r0, r6
   d42be:	b004      	add	sp, #16
   d42c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d42c4:	000dbf84 	.word	0x000dbf84
   d42c8:	000d4103 	.word	0x000d4103

000d42cc <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d42cc:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d42ce:	f003 fadf 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d42d2:	4b03      	ldr	r3, [pc, #12]	; (d42e0 <_ZN10CloudClass7processEv+0x14>)
   d42d4:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d42d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d42da:	f003 bcdd 	b.w	d7c98 <spark_process>
   d42de:	bf00      	nop
   d42e0:	2003e6e8 	.word	0x2003e6e8

000d42e4 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d42e4:	6803      	ldr	r3, [r0, #0]
   d42e6:	b12b      	cbz	r3, d42f4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d42e8:	6842      	ldr	r2, [r0, #4]
   d42ea:	4293      	cmp	r3, r2
   d42ec:	d202      	bcs.n	d42f4 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d42ee:	4618      	mov	r0, r3
   d42f0:	f006 b8b6 	b.w	da460 <atoi>
   d42f4:	2000      	movs	r0, #0
   d42f6:	4770      	bx	lr

000d42f8 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d42f8:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d42fa:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d42fc:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d42fe:	b145      	cbz	r5, d4312 <_ZN10BlynkParam8iteratorppEv+0x1a>
   d4300:	6843      	ldr	r3, [r0, #4]
   d4302:	429d      	cmp	r5, r3
   d4304:	d205      	bcs.n	d4312 <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d4306:	4628      	mov	r0, r5
   d4308:	f006 fa21 	bl	da74e <strlen>
   d430c:	3001      	adds	r0, #1
   d430e:	4405      	add	r5, r0
   d4310:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d4312:	4620      	mov	r0, r4
   d4314:	bd38      	pop	{r3, r4, r5, pc}

000d4316 <_ZNK10BlynkParamixEi>:
    }
};

inline
BlynkParam::iterator BlynkParam::operator[](int index) const
{
   d4316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
    iterator end() const   { return iterator(buff+len, buff+len); }
   d4318:	e891 0028 	ldmia.w	r1, {r3, r5}
   d431c:	441d      	add	r5, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d431e:	e88d 0028 	stmia.w	sp, {r3, r5}
    }
};

inline
BlynkParam::iterator BlynkParam::operator[](int index) const
{
   d4322:	4604      	mov	r4, r0
   d4324:	4616      	mov	r6, r2
   d4326:	466f      	mov	r7, sp
    const iterator e = end();
    for (iterator it = begin(); it < e; ++it) {
   d4328:	9b00      	ldr	r3, [sp, #0]
   d432a:	42ab      	cmp	r3, r5
   d432c:	d20a      	bcs.n	d4344 <_ZNK10BlynkParamixEi+0x2e>
        if (!index--) {
   d432e:	b926      	cbnz	r6, d433a <_ZNK10BlynkParamixEi+0x24>
            return it;
   d4330:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4334:	e884 0003 	stmia.w	r4, {r0, r1}
   d4338:	e007      	b.n	d434a <_ZNK10BlynkParamixEi+0x34>

inline
BlynkParam::iterator BlynkParam::operator[](int index) const
{
    const iterator e = end();
    for (iterator it = begin(); it < e; ++it) {
   d433a:	4638      	mov	r0, r7
   d433c:	f7ff ffdc 	bl	d42f8 <_ZN10BlynkParam8iteratorppEv>
   d4340:	3e01      	subs	r6, #1
   d4342:	e7f1      	b.n	d4328 <_ZNK10BlynkParamixEi+0x12>
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4344:	2300      	movs	r3, #0
   d4346:	6023      	str	r3, [r4, #0]
   d4348:	6063      	str	r3, [r4, #4]
        if (!index--) {
            return it;
        }
    }
    return iterator::invalid();
}
   d434a:	4620      	mov	r0, r4
   d434c:	b003      	add	sp, #12
   d434e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4350 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d4350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4352:	4604      	mov	r4, r0
    if (str == NULL) {
   d4354:	460f      	mov	r7, r1
   d4356:	6846      	ldr	r6, [r0, #4]
   d4358:	b921      	cbnz	r1, d4364 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d435a:	6803      	ldr	r3, [r0, #0]
   d435c:	1c72      	adds	r2, r6, #1
   d435e:	6042      	str	r2, [r0, #4]
   d4360:	5599      	strb	r1, [r3, r6]
        return;
   d4362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d4364:	4608      	mov	r0, r1
   d4366:	f006 f9f2 	bl	da74e <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d436a:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d436c:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d436e:	19aa      	adds	r2, r5, r6
   d4370:	429a      	cmp	r2, r3
   d4372:	d808      	bhi.n	d4386 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d4374:	6820      	ldr	r0, [r4, #0]
   d4376:	462a      	mov	r2, r5
   d4378:	4639      	mov	r1, r7
   d437a:	4430      	add	r0, r6
   d437c:	f006 f97e 	bl	da67c <memcpy>
    len += l;
   d4380:	6863      	ldr	r3, [r4, #4]
   d4382:	441d      	add	r5, r3
   d4384:	6065      	str	r5, [r4, #4]
   d4386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4388 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d4388:	b570      	push	{r4, r5, r6, lr}
   d438a:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d438c:	6840      	ldr	r0, [r0, #4]
   d438e:	68a6      	ldr	r6, [r4, #8]
   d4390:	6825      	ldr	r5, [r4, #0]
   d4392:	4a05      	ldr	r2, [pc, #20]	; (d43a8 <_ZN10BlynkParam3addEi+0x20>)
   d4394:	460b      	mov	r3, r1
   d4396:	1a31      	subs	r1, r6, r0
   d4398:	4428      	add	r0, r5
   d439a:	f003 fd2d 	bl	d7df8 <snprintf>
   d439e:	6863      	ldr	r3, [r4, #4]
   d43a0:	3001      	adds	r0, #1
   d43a2:	4418      	add	r0, r3
   d43a4:	6060      	str	r0, [r4, #4]
   d43a6:	bd70      	pop	{r4, r5, r6, pc}
   d43a8:	000db088 	.word	0x000db088

000d43ac <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d43ac:	b570      	push	{r4, r5, r6, lr}
   d43ae:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d43b0:	6840      	ldr	r0, [r0, #4]
   d43b2:	68a6      	ldr	r6, [r4, #8]
   d43b4:	6825      	ldr	r5, [r4, #0]
   d43b6:	4a05      	ldr	r2, [pc, #20]	; (d43cc <_ZN10BlynkParam3addEl+0x20>)
   d43b8:	460b      	mov	r3, r1
   d43ba:	1a31      	subs	r1, r6, r0
   d43bc:	4428      	add	r0, r5
   d43be:	f003 fd1b 	bl	d7df8 <snprintf>
   d43c2:	6863      	ldr	r3, [r4, #4]
   d43c4:	3001      	adds	r0, #1
   d43c6:	4418      	add	r0, r3
   d43c8:	6060      	str	r0, [r4, #4]
   d43ca:	bd70      	pop	{r4, r5, r6, pc}
   d43cc:	000db08b 	.word	0x000db08b

000d43d0 <_ZN10JsonBuffer9addStringEPKc>:
	/**
	 * @brief Add a c-string to the end of the buffer
	 *
	 * @param data Pointer to a c-string (null terminated).
	 */
	bool addString(const char *data) { return addData(data, strlen(data)); }
   d43d0:	b538      	push	{r3, r4, r5, lr}
   d43d2:	4605      	mov	r5, r0
   d43d4:	4608      	mov	r0, r1
   d43d6:	460c      	mov	r4, r1
   d43d8:	f006 f9b9 	bl	da74e <strlen>
   d43dc:	4621      	mov	r1, r4
   d43de:	4602      	mov	r2, r0
   d43e0:	4628      	mov	r0, r5
   d43e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d43e6:	f002 ba12 	b.w	d680e <_ZN10JsonBuffer7addDataEPKcj>
	...

000d43ec <_Z6hhmmssmi>:
void rainbow(uint8_t wait);
uint32_t Wheel(byte WheelPos);


String hhmmss(unsigned long int now, int timeZone)  //format value as "hh:mm:ss"
{
   d43ec:	b570      	push	{r4, r5, r6, lr}
   d43ee:	b08c      	sub	sp, #48	; 0x30
   d43f0:	460d      	mov	r5, r1
   d43f2:	4606      	mov	r6, r0
    String hour;
   d43f4:	4926      	ldr	r1, [pc, #152]	; (d4490 <_Z6hhmmssmi+0xa4>)
   d43f6:	4668      	mov	r0, sp
void rainbow(uint8_t wait);
uint32_t Wheel(byte WheelPos);


String hhmmss(unsigned long int now, int timeZone)  //format value as "hh:mm:ss"
{
   d43f8:	4614      	mov	r4, r2
    String hour;
   d43fa:	f004 fbb3 	bl	d8b64 <_ZN6StringC1EPK19__FlashStringHelper>
    if(Time.hour(now)-timeZone<0){
   d43fe:	4628      	mov	r0, r5
   d4400:	f004 ffc0 	bl	d9384 <_ZN9TimeClass4hourEl>
   d4404:	1b00      	subs	r0, r0, r4
   d4406:	2800      	cmp	r0, #0
        hour = String::format("%02i",Time.hour(now)-timeZone+24);
   d4408:	4628      	mov	r0, r5


String hhmmss(unsigned long int now, int timeZone)  //format value as "hh:mm:ss"
{
    String hour;
    if(Time.hour(now)-timeZone<0){
   d440a:	da04      	bge.n	d4416 <_Z6hhmmssmi+0x2a>
        hour = String::format("%02i",Time.hour(now)-timeZone+24);
   d440c:	f004 ffba 	bl	d9384 <_ZN9TimeClass4hourEl>
   d4410:	1b02      	subs	r2, r0, r4
   d4412:	3218      	adds	r2, #24
   d4414:	e00d      	b.n	d4432 <_Z6hhmmssmi+0x46>
    } else if(Time.hour(now)-timeZone>24) {
   d4416:	f004 ffb5 	bl	d9384 <_ZN9TimeClass4hourEl>
   d441a:	1b00      	subs	r0, r0, r4
   d441c:	2818      	cmp	r0, #24
        hour = String::format("%02i",Time.hour(now)-timeZone-24);
   d441e:	4628      	mov	r0, r5
String hhmmss(unsigned long int now, int timeZone)  //format value as "hh:mm:ss"
{
    String hour;
    if(Time.hour(now)-timeZone<0){
        hour = String::format("%02i",Time.hour(now)-timeZone+24);
    } else if(Time.hour(now)-timeZone>24) {
   d4420:	dd04      	ble.n	d442c <_Z6hhmmssmi+0x40>
        hour = String::format("%02i",Time.hour(now)-timeZone-24);
   d4422:	f004 ffaf 	bl	d9384 <_ZN9TimeClass4hourEl>
   d4426:	1b02      	subs	r2, r0, r4
   d4428:	3a18      	subs	r2, #24
   d442a:	e002      	b.n	d4432 <_Z6hhmmssmi+0x46>
    } else {
        hour = String::format("%02i",Time.hour(now)-timeZone);
   d442c:	f004 ffaa 	bl	d9384 <_ZN9TimeClass4hourEl>
   d4430:	1b02      	subs	r2, r0, r4
   d4432:	a808      	add	r0, sp, #32
   d4434:	4917      	ldr	r1, [pc, #92]	; (d4494 <_Z6hhmmssmi+0xa8>)
   d4436:	f004 fc4d 	bl	d8cd4 <_ZN6String6formatEPKcz>
   d443a:	a908      	add	r1, sp, #32
   d443c:	4668      	mov	r0, sp
   d443e:	f004 fbdb 	bl	d8bf8 <_ZN6StringaSEOS_>
   d4442:	a808      	add	r0, sp, #32
   d4444:	f004 fb47 	bl	d8ad6 <_ZN6StringD1Ev>
    }
    String minute = String::format("%02i",Time.minute(now));
   d4448:	4628      	mov	r0, r5
   d444a:	f004 ffa3 	bl	d9394 <_ZN9TimeClass6minuteEl>
   d444e:	4911      	ldr	r1, [pc, #68]	; (d4494 <_Z6hhmmssmi+0xa8>)
   d4450:	4602      	mov	r2, r0
   d4452:	a804      	add	r0, sp, #16
   d4454:	f004 fc3e 	bl	d8cd4 <_ZN6String6formatEPKcz>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4458:	4669      	mov	r1, sp
   d445a:	a808      	add	r0, sp, #32
   d445c:	f004 fbc1 	bl	d8be2 <_ZN6StringC1ERKS_>
    return hour + ":" + minute;
   d4460:	490d      	ldr	r1, [pc, #52]	; (d4498 <_Z6hhmmssmi+0xac>)
   d4462:	a808      	add	r0, sp, #32
   d4464:	f004 fc11 	bl	d8c8a <_ZplRK15StringSumHelperPKc>
   d4468:	a904      	add	r1, sp, #16
   d446a:	f004 fc02 	bl	d8c72 <_ZplRK15StringSumHelperRK6String>
   d446e:	4601      	mov	r1, r0
   d4470:	4630      	mov	r0, r6
   d4472:	f004 fbb6 	bl	d8be2 <_ZN6StringC1ERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4476:	a808      	add	r0, sp, #32
   d4478:	f004 fb2d 	bl	d8ad6 <_ZN6StringD1Ev>
    } else if(Time.hour(now)-timeZone>24) {
        hour = String::format("%02i",Time.hour(now)-timeZone-24);
    } else {
        hour = String::format("%02i",Time.hour(now)-timeZone);
    }
    String minute = String::format("%02i",Time.minute(now));
   d447c:	a804      	add	r0, sp, #16
   d447e:	f004 fb2a 	bl	d8ad6 <_ZN6StringD1Ev>
uint32_t Wheel(byte WheelPos);


String hhmmss(unsigned long int now, int timeZone)  //format value as "hh:mm:ss"
{
    String hour;
   d4482:	4668      	mov	r0, sp
   d4484:	f004 fb27 	bl	d8ad6 <_ZN6StringD1Ev>
    } else {
        hour = String::format("%02i",Time.hour(now)-timeZone);
    }
    String minute = String::format("%02i",Time.minute(now));
    return hour + ":" + minute;
}
   d4488:	4630      	mov	r0, r6
   d448a:	b00c      	add	sp, #48	; 0x30
   d448c:	bd70      	pop	{r4, r5, r6, pc}
   d448e:	bf00      	nop
   d4490:	000dbd08 	.word	0x000dbd08
   d4494:	000db08f 	.word	0x000db08f
   d4498:	000db094 	.word	0x000db094

000d449c <_Z5Wheelh>:
    delay(wait);
  }
}

uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   d449c:	2854      	cmp	r0, #84	; 0x54
   d449e:	d809      	bhi.n	d44b4 <_Z5Wheelh+0x18>
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
   d44a0:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
   d44a4:	3901      	subs	r1, #1
   d44a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   d44aa:	2200      	movs	r2, #0
   d44ac:	b2c9      	uxtb	r1, r1
   d44ae:	b2c0      	uxtb	r0, r0
   d44b0:	f003 b939 	b.w	d7726 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  } else if(WheelPos < 170) {
   d44b4:	28a9      	cmp	r0, #169	; 0xa9
   d44b6:	d80b      	bhi.n	d44d0 <_Z5Wheelh+0x34>
   WheelPos -= 85;
   d44b8:	3855      	subs	r0, #85	; 0x55
   d44ba:	b2c0      	uxtb	r0, r0
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
   d44bc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   d44c0:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   d44c4:	3801      	subs	r0, #1
   d44c6:	b2d2      	uxtb	r2, r2
   d44c8:	2100      	movs	r1, #0
   d44ca:	b2c0      	uxtb	r0, r0
   d44cc:	f003 b92b 	b.w	d7726 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  } else {
   WheelPos -= 170;
   d44d0:	3056      	adds	r0, #86	; 0x56
   d44d2:	b2c1      	uxtb	r1, r0
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
   d44d4:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
   d44d8:	3a01      	subs	r2, #1
   d44da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d44de:	b2d2      	uxtb	r2, r2
   d44e0:	b2c9      	uxtb	r1, r1
   d44e2:	2000      	movs	r0, #0
   d44e4:	f003 b91f 	b.w	d7726 <_ZN17Adafruit_NeoPixel5ColorEhhh>

000d44e8 <_Z7rainbowh>:
  pinMode(D2, OUTPUT);
  strip.begin();
  strip.show();
}

void rainbow(uint8_t wait) {
   d44e8:	b570      	push	{r4, r5, r6, lr}
   d44ea:	4606      	mov	r6, r0
  uint16_t i, j;

  for(j=0; j<256; j++) {
   d44ec:	2500      	movs	r5, #0
   d44ee:	2400      	movs	r4, #0
    for(i=0; i<strip.numPixels(); i++) {
   d44f0:	480e      	ldr	r0, [pc, #56]	; (d452c <_Z7rainbowh+0x44>)
   d44f2:	f003 f91d 	bl	d7730 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   d44f6:	4284      	cmp	r4, r0
   d44f8:	d20b      	bcs.n	d4512 <_Z7rainbowh+0x2a>
      strip.setPixelColor(i, Wheel((i+j) & 255));
   d44fa:	1960      	adds	r0, r4, r5
   d44fc:	b2c0      	uxtb	r0, r0
   d44fe:	f7ff ffcd 	bl	d449c <_Z5Wheelh>
   d4502:	4621      	mov	r1, r4
   d4504:	4602      	mov	r2, r0

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
   d4506:	3401      	adds	r4, #1
      strip.setPixelColor(i, Wheel((i+j) & 255));
   d4508:	4808      	ldr	r0, [pc, #32]	; (d452c <_Z7rainbowh+0x44>)
   d450a:	f003 f8c1 	bl	d7690 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
    for(i=0; i<strip.numPixels(); i++) {
   d450e:	b2a4      	uxth	r4, r4
   d4510:	e7ee      	b.n	d44f0 <_Z7rainbowh+0x8>
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
   d4512:	4806      	ldr	r0, [pc, #24]	; (d452c <_Z7rainbowh+0x44>)
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
   d4514:	3501      	adds	r5, #1
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
   d4516:	f002 ff19 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
   d451a:	b2ad      	uxth	r5, r5
    for(i=0; i<strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
   d451c:	4630      	mov	r0, r6
   d451e:	f003 fc93 	bl	d7e48 <delay>
}

void rainbow(uint8_t wait) {
  uint16_t i, j;

  for(j=0; j<256; j++) {
   d4522:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   d4526:	d1e2      	bne.n	d44ee <_Z7rainbowh+0x6>
      strip.setPixelColor(i, Wheel((i+j) & 255));
    }
    strip.show();
    delay(wait);
  }
}
   d4528:	bd70      	pop	{r4, r5, r6, pc}
   d452a:	bf00      	nop
   d452c:	2003dd34 	.word	0x2003dd34

000d4530 <BlynkWidgetWrite0>:
void ipHandler(const char *event, const char *data) {
  global_ip = data; //sets ip
  Serial.printlnf("global_ip=%s", global_ip.c_str()); //prints ip
}

BLYNK_WRITE(V0){
   d4530:	b510      	push	{r4, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d4532:	6808      	ldr	r0, [r1, #0]
  timerTime = param.asInt() * 1000;
   d4534:	4c07      	ldr	r4, [pc, #28]	; (d4554 <BlynkWidgetWrite0+0x24>)
   d4536:	f005 ff93 	bl	da460 <atoi>
   d453a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d453e:	4358      	muls	r0, r3
   d4540:	6020      	str	r0, [r4, #0]
  Serial.println(timerTime);
   d4542:	f005 f85b 	bl	d95fc <_Z16_fetch_usbserialv>
   d4546:	6821      	ldr	r1, [r4, #0]
   d4548:	220a      	movs	r2, #10
}
   d454a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.printlnf("global_ip=%s", global_ip.c_str()); //prints ip
}

BLYNK_WRITE(V0){
  timerTime = param.asInt() * 1000;
  Serial.println(timerTime);
   d454e:	f004 ba21 	b.w	d8994 <_ZN5Print7printlnEii>
   d4552:	bf00      	nop
   d4554:	2003db78 	.word	0x2003db78

000d4558 <BlynkWidgetWrite1>:
}

BLYNK_WRITE(V1){
   d4558:	b538      	push	{r3, r4, r5, lr}
   d455a:	460c      	mov	r4, r1
  Serial.println(param.asInt());
   d455c:	f005 f84e 	bl	d95fc <_Z16_fetch_usbserialv>
   d4560:	4605      	mov	r5, r0
   d4562:	6820      	ldr	r0, [r4, #0]
   d4564:	f005 ff7c 	bl	da460 <atoi>
   d4568:	220a      	movs	r2, #10
   d456a:	4601      	mov	r1, r0
   d456c:	4628      	mov	r0, r5
   d456e:	f004 fa11 	bl	d8994 <_ZN5Print7printlnEii>
   d4572:	6820      	ldr	r0, [r4, #0]
   d4574:	f005 ff74 	bl	da460 <atoi>
   d4578:	4b03      	ldr	r3, [pc, #12]	; (d4588 <BlynkWidgetWrite1+0x30>)
  if(param.asInt()==1){
   d457a:	2801      	cmp	r0, #1
    timerOn = 1;
  } else {
    timerOn = 0;
   d457c:	bf16      	itet	ne
   d457e:	2200      	movne	r2, #0
}

BLYNK_WRITE(V1){
  Serial.println(param.asInt());
  if(param.asInt()==1){
    timerOn = 1;
   d4580:	6018      	streq	r0, [r3, #0]
  } else {
    timerOn = 0;
   d4582:	601a      	strne	r2, [r3, #0]
   d4584:	bd38      	pop	{r3, r4, r5, pc}
   d4586:	bf00      	nop
   d4588:	2003ddbc 	.word	0x2003ddbc

000d458c <BlynkWidgetWrite2>:
  }
}

BLYNK_WRITE(V2){
   d458c:	b538      	push	{r3, r4, r5, lr}
   d458e:	460c      	mov	r4, r1
  Serial.println(param.asInt());
   d4590:	f005 f834 	bl	d95fc <_Z16_fetch_usbserialv>
   d4594:	4605      	mov	r5, r0
   d4596:	6820      	ldr	r0, [r4, #0]
   d4598:	f005 ff62 	bl	da460 <atoi>
   d459c:	220a      	movs	r2, #10
   d459e:	4601      	mov	r1, r0
   d45a0:	4628      	mov	r0, r5
   d45a2:	f004 f9f7 	bl	d8994 <_ZN5Print7printlnEii>
   d45a6:	6820      	ldr	r0, [r4, #0]
   d45a8:	f005 ff5a 	bl	da460 <atoi>
   d45ac:	4b03      	ldr	r3, [pc, #12]	; (d45bc <BlynkWidgetWrite2+0x30>)
  if(param.asInt()==1){
   d45ae:	2801      	cmp	r0, #1
    stopWatchOn = 1;
  } else {
    stopWatchOn = 0;
   d45b0:	bf16      	itet	ne
   d45b2:	2200      	movne	r2, #0
}

BLYNK_WRITE(V2){
  Serial.println(param.asInt());
  if(param.asInt()==1){
    stopWatchOn = 1;
   d45b4:	6018      	streq	r0, [r3, #0]
  } else {
    stopWatchOn = 0;
   d45b6:	601a      	strne	r2, [r3, #0]
   d45b8:	bd38      	pop	{r3, r4, r5, pc}
   d45ba:	bf00      	nop
   d45bc:	2003e320 	.word	0x2003e320

000d45c0 <BlynkWidgetWrite3>:
  }
}

BLYNK_WRITE(V3){
   d45c0:	b508      	push	{r3, lr}
   d45c2:	6808      	ldr	r0, [r1, #0]
   d45c4:	f005 ff4c 	bl	da460 <atoi>
  brightness = param.asInt();
   d45c8:	4b01      	ldr	r3, [pc, #4]	; (d45d0 <BlynkWidgetWrite3+0x10>)
   d45ca:	6018      	str	r0, [r3, #0]
   d45cc:	bd08      	pop	{r3, pc}
   d45ce:	bf00      	nop
   d45d0:	2003db74 	.word	0x2003db74

000d45d4 <BlynkWidgetWrite4>:
}

BLYNK_WRITE(V4){
   d45d4:	b513      	push	{r0, r1, r4, lr}
    r = param[0].asInt();
   d45d6:	2200      	movs	r2, #0
   d45d8:	4668      	mov	r0, sp

BLYNK_WRITE(V3){
  brightness = param.asInt();
}

BLYNK_WRITE(V4){
   d45da:	460c      	mov	r4, r1
    r = param[0].asInt();
   d45dc:	f7ff fe9b 	bl	d4316 <_ZNK10BlynkParamixEi>
   d45e0:	4668      	mov	r0, sp
   d45e2:	f7ff fe7f 	bl	d42e4 <_ZNK10BlynkParam8iterator5asIntEv>
   d45e6:	4b0c      	ldr	r3, [pc, #48]	; (d4618 <BlynkWidgetWrite4+0x44>)
    g = param[1].asInt();
   d45e8:	4621      	mov	r1, r4
BLYNK_WRITE(V3){
  brightness = param.asInt();
}

BLYNK_WRITE(V4){
    r = param[0].asInt();
   d45ea:	6018      	str	r0, [r3, #0]
    g = param[1].asInt();
   d45ec:	2201      	movs	r2, #1
   d45ee:	4668      	mov	r0, sp
   d45f0:	f7ff fe91 	bl	d4316 <_ZNK10BlynkParamixEi>
   d45f4:	4668      	mov	r0, sp
   d45f6:	f7ff fe75 	bl	d42e4 <_ZNK10BlynkParam8iterator5asIntEv>
   d45fa:	4b08      	ldr	r3, [pc, #32]	; (d461c <BlynkWidgetWrite4+0x48>)
    b = param[2].asInt();
   d45fc:	2202      	movs	r2, #2
  brightness = param.asInt();
}

BLYNK_WRITE(V4){
    r = param[0].asInt();
    g = param[1].asInt();
   d45fe:	6018      	str	r0, [r3, #0]
    b = param[2].asInt();
   d4600:	4621      	mov	r1, r4
   d4602:	4668      	mov	r0, sp
   d4604:	f7ff fe87 	bl	d4316 <_ZNK10BlynkParamixEi>
   d4608:	4668      	mov	r0, sp
   d460a:	f7ff fe6b 	bl	d42e4 <_ZNK10BlynkParam8iterator5asIntEv>
   d460e:	4b04      	ldr	r3, [pc, #16]	; (d4620 <BlynkWidgetWrite4+0x4c>)
   d4610:	6018      	str	r0, [r3, #0]
}
   d4612:	b002      	add	sp, #8
   d4614:	bd10      	pop	{r4, pc}
   d4616:	bf00      	nop
   d4618:	2003db70 	.word	0x2003db70
   d461c:	2003db6c 	.word	0x2003db6c
   d4620:	2003db7c 	.word	0x2003db7c

000d4624 <BlynkWidgetWrite6>:

BLYNK_WRITE(V6){
   d4624:	b508      	push	{r3, lr}
   d4626:	6808      	ldr	r0, [r1, #0]
   d4628:	f005 ff1a 	bl	da460 <atoi>
  switch(param.asInt()){
   d462c:	3801      	subs	r0, #1
   d462e:	280d      	cmp	r0, #13
   d4630:	d847      	bhi.n	d46c2 <BlynkWidgetWrite6+0x9e>
   d4632:	e8df f000 	tbb	[pc, r0]
   d4636:	0b07      	.short	0x0b07
   d4638:	1b17130f 	.word	0x1b17130f
   d463c:	2e29241f 	.word	0x2e29241f
   d4640:	423d3833 	.word	0x423d3833
    case 1:{
      currentTimeZone = 7;
   d4644:	4b1f      	ldr	r3, [pc, #124]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d4646:	2207      	movs	r2, #7
   d4648:	601a      	str	r2, [r3, #0]
      break;  
   d464a:	bd08      	pop	{r3, pc}
    }
    case 2:{
      currentTimeZone = 6;
   d464c:	4b1d      	ldr	r3, [pc, #116]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d464e:	2206      	movs	r2, #6
   d4650:	601a      	str	r2, [r3, #0]
      break;
   d4652:	bd08      	pop	{r3, pc}
    }
    case 3:{
      currentTimeZone = 5;
   d4654:	4b1b      	ldr	r3, [pc, #108]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d4656:	2205      	movs	r2, #5
   d4658:	601a      	str	r2, [r3, #0]
      break;
   d465a:	bd08      	pop	{r3, pc}
    }
    case 4:{
      currentTimeZone = 4;
   d465c:	4b19      	ldr	r3, [pc, #100]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d465e:	2204      	movs	r2, #4
   d4660:	601a      	str	r2, [r3, #0]
      break;
   d4662:	bd08      	pop	{r3, pc}
    }
    case 5:{
      currentTimeZone = 3;
   d4664:	4b17      	ldr	r3, [pc, #92]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d4666:	2203      	movs	r2, #3
   d4668:	601a      	str	r2, [r3, #0]
      break;
   d466a:	bd08      	pop	{r3, pc}
    }
    case 6:{
      currentTimeZone = 0;
   d466c:	4b15      	ldr	r3, [pc, #84]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d466e:	2200      	movs	r2, #0
   d4670:	601a      	str	r2, [r3, #0]
      break;
   d4672:	bd08      	pop	{r3, pc}
    }
    case 7:{
      currentTimeZone = -1;
   d4674:	4b13      	ldr	r3, [pc, #76]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d4676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d467a:	601a      	str	r2, [r3, #0]
      break;
   d467c:	bd08      	pop	{r3, pc}
    }
    case 8:{
      currentTimeZone = -2;
   d467e:	4b11      	ldr	r3, [pc, #68]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d4680:	f06f 0201 	mvn.w	r2, #1
   d4684:	601a      	str	r2, [r3, #0]
      break;
   d4686:	bd08      	pop	{r3, pc}
    }
    case 9:{
      currentTimeZone = -3;
   d4688:	4b0e      	ldr	r3, [pc, #56]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d468a:	f06f 0202 	mvn.w	r2, #2
   d468e:	601a      	str	r2, [r3, #0]
      break;
   d4690:	bd08      	pop	{r3, pc}
    }
    case 10:{
      currentTimeZone = -4;
   d4692:	4b0c      	ldr	r3, [pc, #48]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d4694:	f06f 0203 	mvn.w	r2, #3
   d4698:	601a      	str	r2, [r3, #0]
      break;
   d469a:	bd08      	pop	{r3, pc}
    }
    case 11:{
      currentTimeZone = -8;
   d469c:	4b09      	ldr	r3, [pc, #36]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d469e:	f06f 0207 	mvn.w	r2, #7
   d46a2:	601a      	str	r2, [r3, #0]
      break;
   d46a4:	bd08      	pop	{r3, pc}
    }
    case 12:{
      currentTimeZone = -9;
   d46a6:	4b07      	ldr	r3, [pc, #28]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d46a8:	f06f 0208 	mvn.w	r2, #8
   d46ac:	601a      	str	r2, [r3, #0]
      break;
   d46ae:	bd08      	pop	{r3, pc}
    }
    case 13:{
      currentTimeZone = -10;
   d46b0:	4b04      	ldr	r3, [pc, #16]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d46b2:	f06f 0209 	mvn.w	r2, #9
   d46b6:	601a      	str	r2, [r3, #0]
      break;
   d46b8:	bd08      	pop	{r3, pc}
    }
    case 14:{
      currentTimeZone = -12;
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <BlynkWidgetWrite6+0xa0>)
   d46bc:	f06f 020b 	mvn.w	r2, #11
   d46c0:	601a      	str	r2, [r3, #0]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	2003db80 	.word	0x2003db80

000d46c8 <_Z9stopwatchv>:
    matrix_1.show();
    delay(100);
    }
}

void stopwatch(){
   d46c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(stopWatchOn==1){
   d46cc:	4b92      	ldr	r3, [pc, #584]	; (d4918 <_Z9stopwatchv+0x250>)
   d46ce:	4d93      	ldr	r5, [pc, #588]	; (d491c <_Z9stopwatchv+0x254>)
   d46d0:	681e      	ldr	r6, [r3, #0]
   d46d2:	2e01      	cmp	r6, #1
   d46d4:	d15a      	bne.n	d478c <_Z9stopwatchv+0xc4>
  secondsdisplay+= 0.01;
   d46d6:	4c92      	ldr	r4, [pc, #584]	; (d4920 <_Z9stopwatchv+0x258>)
   d46d8:	6820      	ldr	r0, [r4, #0]
   d46da:	f005 fc0b 	bl	d9ef4 <__aeabi_f2d>
   d46de:	a38c      	add	r3, pc, #560	; (adr r3, d4910 <_Z9stopwatchv+0x248>)
   d46e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46e4:	f005 faa8 	bl	d9c38 <__adddf3>
   d46e8:	f005 fe6a 	bl	da3c0 <__aeabi_d2f>
  seconds += 1;
   d46ec:	682b      	ldr	r3, [r5, #0]
    }
}

void stopwatch(){
  if(stopWatchOn==1){
  secondsdisplay+= 0.01;
   d46ee:	6020      	str	r0, [r4, #0]
  seconds += 1;
   d46f0:	3301      	adds	r3, #1
  if(seconds==60){
   d46f2:	2b3c      	cmp	r3, #60	; 0x3c
}

void stopwatch(){
  if(stopWatchOn==1){
  secondsdisplay+= 0.01;
  seconds += 1;
   d46f4:	602b      	str	r3, [r5, #0]
  if(seconds==60){
   d46f6:	d132      	bne.n	d475e <_Z9stopwatchv+0x96>
    minutes+= 1;
   d46f8:	4f8a      	ldr	r7, [pc, #552]	; (d4924 <_Z9stopwatchv+0x25c>)
    secondsdisplay= 0;
    seconds = 0;
    matrix.fillScreen(0);
   d46fa:	488b      	ldr	r0, [pc, #556]	; (d4928 <_Z9stopwatchv+0x260>)
void stopwatch(){
  if(stopWatchOn==1){
  secondsdisplay+= 0.01;
  seconds += 1;
  if(seconds==60){
    minutes+= 1;
   d46fc:	683b      	ldr	r3, [r7, #0]
   d46fe:	3301      	adds	r3, #1
   d4700:	603b      	str	r3, [r7, #0]
    secondsdisplay= 0;
   d4702:	2300      	movs	r3, #0
   d4704:	6023      	str	r3, [r4, #0]
    seconds = 0;
   d4706:	2400      	movs	r4, #0
    matrix.fillScreen(0);
   d4708:	4621      	mov	r1, r4
  secondsdisplay+= 0.01;
  seconds += 1;
  if(seconds==60){
    minutes+= 1;
    secondsdisplay= 0;
    seconds = 0;
   d470a:	602c      	str	r4, [r5, #0]
    matrix.fillScreen(0);
   d470c:	f002 fca0 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
    matrix.setCursor(1, 0);
   d4710:	4622      	mov	r2, r4
   d4712:	4631      	mov	r1, r6
   d4714:	4884      	ldr	r0, [pc, #528]	; (d4928 <_Z9stopwatchv+0x260>)
   d4716:	f002 f818 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
    matrix.print(minutes);
   d471a:	220a      	movs	r2, #10
   d471c:	6839      	ldr	r1, [r7, #0]
   d471e:	4882      	ldr	r0, [pc, #520]	; (d4928 <_Z9stopwatchv+0x260>)
   d4720:	f004 f936 	bl	d8990 <_ZN5Print5printEii>
    matrix.show();
   d4724:	4881      	ldr	r0, [pc, #516]	; (d492c <_Z9stopwatchv+0x264>)
   d4726:	f002 fe11 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    delay(500);
   d472a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d472e:	f003 fb8b 	bl	d7e48 <delay>
    matrix.fillScreen(0);
   d4732:	4621      	mov	r1, r4
   d4734:	487c      	ldr	r0, [pc, #496]	; (d4928 <_Z9stopwatchv+0x260>)
   d4736:	f002 fc8b 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
    matrix.setCursor(0, 0);
   d473a:	4622      	mov	r2, r4
   d473c:	4621      	mov	r1, r4
   d473e:	487a      	ldr	r0, [pc, #488]	; (d4928 <_Z9stopwatchv+0x260>)
   d4740:	f002 f803 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
    matrix.print("M");
   d4744:	497a      	ldr	r1, [pc, #488]	; (d4930 <_Z9stopwatchv+0x268>)
   d4746:	4878      	ldr	r0, [pc, #480]	; (d4928 <_Z9stopwatchv+0x260>)
   d4748:	f004 f8b0 	bl	d88ac <_ZN5Print5printEPKc>
    matrix.show();
   d474c:	4877      	ldr	r0, [pc, #476]	; (d492c <_Z9stopwatchv+0x264>)
   d474e:	f002 fdfd 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    delay(500);
   d4752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      }
      matrix.show();
      delay(100);
    }
  }
}
   d4756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    delay(500);
    matrix.fillScreen(0);
    matrix.setCursor(0, 0);
    matrix.print("M");
    matrix.show();
    delay(500);
   d475a:	f003 bb75 	b.w	d7e48 <delay>
  } else {
    matrix.fillScreen(0);
   d475e:	2100      	movs	r1, #0
   d4760:	4871      	ldr	r0, [pc, #452]	; (d4928 <_Z9stopwatchv+0x260>)
   d4762:	f002 fc75 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
    matrix.setCursor(1, 0);
   d4766:	4631      	mov	r1, r6
   d4768:	2200      	movs	r2, #0
   d476a:	486f      	ldr	r0, [pc, #444]	; (d4928 <_Z9stopwatchv+0x260>)
   d476c:	f001 ffed 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
    matrix.print(seconds);
   d4770:	6829      	ldr	r1, [r5, #0]
   d4772:	486d      	ldr	r0, [pc, #436]	; (d4928 <_Z9stopwatchv+0x260>)
   d4774:	220a      	movs	r2, #10
   d4776:	f004 f90b 	bl	d8990 <_ZN5Print5printEii>
    matrix.show();
   d477a:	486c      	ldr	r0, [pc, #432]	; (d492c <_Z9stopwatchv+0x264>)
   d477c:	f002 fde6 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    delay(1000);
   d4780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      }
      matrix.show();
      delay(100);
    }
  }
}
   d4784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  } else {
    matrix.fillScreen(0);
    matrix.setCursor(1, 0);
    matrix.print(seconds);
    matrix.show();
    delay(1000);
   d4788:	f003 bb5e 	b.w	d7e48 <delay>
  }
  } else {
    if(seconds!=0 || minutes!=0){
   d478c:	682b      	ldr	r3, [r5, #0]
   d478e:	4f65      	ldr	r7, [pc, #404]	; (d4924 <_Z9stopwatchv+0x25c>)
   d4790:	4c68      	ldr	r4, [pc, #416]	; (d4934 <_Z9stopwatchv+0x26c>)
   d4792:	b91b      	cbnz	r3, d479c <_Z9stopwatchv+0xd4>
   d4794:	683e      	ldr	r6, [r7, #0]
   d4796:	2e00      	cmp	r6, #0
   d4798:	f000 8091 	beq.w	d48be <_Z9stopwatchv+0x1f6>
      matrix.fillScreen(0);
   d479c:	2100      	movs	r1, #0
   d479e:	4862      	ldr	r0, [pc, #392]	; (d4928 <_Z9stopwatchv+0x260>)
      matrix.show();
      delay(500);
      x1 = matrix.width();
      for(int i =0;i<45;i++){
        matrix.fillScreen(0);
        matrix.setCursor(x1, 0);
   d47a0:	f8df 8190 	ldr.w	r8, [pc, #400]	; d4934 <_Z9stopwatchv+0x26c>
    matrix.show();
    delay(1000);
  }
  } else {
    if(seconds!=0 || minutes!=0){
      matrix.fillScreen(0);
   d47a4:	f002 fc54 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
      matrix.setCursor(1, 0);
   d47a8:	2200      	movs	r2, #0
   d47aa:	2101      	movs	r1, #1
   d47ac:	485e      	ldr	r0, [pc, #376]	; (d4928 <_Z9stopwatchv+0x260>)
   d47ae:	f001 ffcc 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
      matrix.print(minutes);
   d47b2:	220a      	movs	r2, #10
   d47b4:	6839      	ldr	r1, [r7, #0]
   d47b6:	485c      	ldr	r0, [pc, #368]	; (d4928 <_Z9stopwatchv+0x260>)
   d47b8:	f004 f8ea 	bl	d8990 <_ZN5Print5printEii>
      matrix.show();
   d47bc:	485b      	ldr	r0, [pc, #364]	; (d492c <_Z9stopwatchv+0x264>)
   d47be:	f002 fdc5 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      delay(500);
   d47c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d47c6:	f003 fb3f 	bl	d7e48 <delay>
      x1 = matrix.width();
   d47ca:	4857      	ldr	r0, [pc, #348]	; (d4928 <_Z9stopwatchv+0x260>)
   d47cc:	f001 ffc5 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
   d47d0:	262d      	movs	r6, #45	; 0x2d
   d47d2:	6020      	str	r0, [r4, #0]
      for(int i =0;i<45;i++){
        matrix.fillScreen(0);
   d47d4:	2100      	movs	r1, #0
   d47d6:	4854      	ldr	r0, [pc, #336]	; (d4928 <_Z9stopwatchv+0x260>)
   d47d8:	f002 fc3a 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
        matrix.setCursor(x1, 0);
   d47dc:	2200      	movs	r2, #0
   d47de:	f9b4 1000 	ldrsh.w	r1, [r4]
   d47e2:	4851      	ldr	r0, [pc, #324]	; (d4928 <_Z9stopwatchv+0x260>)
   d47e4:	f001 ffb1 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
        matrix.print("minutes");
   d47e8:	4953      	ldr	r1, [pc, #332]	; (d4938 <_Z9stopwatchv+0x270>)
   d47ea:	484f      	ldr	r0, [pc, #316]	; (d4928 <_Z9stopwatchv+0x260>)
   d47ec:	f004 f85e 	bl	d88ac <_ZN5Print5printEPKc>
        if(--x1 < -36) {
   d47f0:	6823      	ldr	r3, [r4, #0]
   d47f2:	3b01      	subs	r3, #1
   d47f4:	6023      	str	r3, [r4, #0]
   d47f6:	3324      	adds	r3, #36	; 0x24
   d47f8:	da0d      	bge.n	d4816 <_Z9stopwatchv+0x14e>
        x1 = matrix.width();
   d47fa:	484b      	ldr	r0, [pc, #300]	; (d4928 <_Z9stopwatchv+0x260>)
   d47fc:	f001 ffad 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
        matrix.setTextColor(matrix.Color(80, 255, 0));
   d4800:	21ff      	movs	r1, #255	; 0xff
      for(int i =0;i<45;i++){
        matrix.fillScreen(0);
        matrix.setCursor(x1, 0);
        matrix.print("minutes");
        if(--x1 < -36) {
        x1 = matrix.width();
   d4802:	f8c8 0000 	str.w	r0, [r8]
        matrix.setTextColor(matrix.Color(80, 255, 0));
   d4806:	2200      	movs	r2, #0
   d4808:	2050      	movs	r0, #80	; 0x50
   d480a:	f002 fd2d 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d480e:	4601      	mov	r1, r0
   d4810:	4845      	ldr	r0, [pc, #276]	; (d4928 <_Z9stopwatchv+0x260>)
   d4812:	f001 ff9d 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
        }
        matrix.show();
   d4816:	4845      	ldr	r0, [pc, #276]	; (d492c <_Z9stopwatchv+0x264>)
   d4818:	f002 fd98 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
        delay(50);
   d481c:	2032      	movs	r0, #50	; 0x32
   d481e:	f003 fb13 	bl	d7e48 <delay>
      matrix.setCursor(1, 0);
      matrix.print(minutes);
      matrix.show();
      delay(500);
      x1 = matrix.width();
      for(int i =0;i<45;i++){
   d4822:	3e01      	subs	r6, #1
   d4824:	d1d6      	bne.n	d47d4 <_Z9stopwatchv+0x10c>
        matrix.setTextColor(matrix.Color(80, 255, 0));
        }
        matrix.show();
        delay(50);
      }
      matrix.fillScreen(0);
   d4826:	4631      	mov	r1, r6
   d4828:	483f      	ldr	r0, [pc, #252]	; (d4928 <_Z9stopwatchv+0x260>)
      matrix.show();
      delay(500);
      x1 = matrix.width();
      for(int i =0;i<45;i++){
        matrix.fillScreen(0);
        matrix.setCursor(x1, 0);
   d482a:	f8df 8108 	ldr.w	r8, [pc, #264]	; d4934 <_Z9stopwatchv+0x26c>
        matrix.setTextColor(matrix.Color(80, 255, 0));
        }
        matrix.show();
        delay(50);
      }
      matrix.fillScreen(0);
   d482e:	f002 fc0f 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
      matrix.setCursor(1, 0);
   d4832:	4632      	mov	r2, r6
   d4834:	2101      	movs	r1, #1
   d4836:	483c      	ldr	r0, [pc, #240]	; (d4928 <_Z9stopwatchv+0x260>)
   d4838:	f001 ff87 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
      matrix.print(seconds);
   d483c:	220a      	movs	r2, #10
   d483e:	6829      	ldr	r1, [r5, #0]
   d4840:	4839      	ldr	r0, [pc, #228]	; (d4928 <_Z9stopwatchv+0x260>)
   d4842:	f004 f8a5 	bl	d8990 <_ZN5Print5printEii>
      matrix.show();
   d4846:	4839      	ldr	r0, [pc, #228]	; (d492c <_Z9stopwatchv+0x264>)
   d4848:	f002 fd80 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      delay(500);
   d484c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4850:	f003 fafa 	bl	d7e48 <delay>
      x1 = matrix.width();
   d4854:	4834      	ldr	r0, [pc, #208]	; (d4928 <_Z9stopwatchv+0x260>)
   d4856:	f001 ff80 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
   d485a:	262d      	movs	r6, #45	; 0x2d
   d485c:	6020      	str	r0, [r4, #0]
      for(int i =0;i<45;i++){
        matrix.fillScreen(0);
   d485e:	2100      	movs	r1, #0
   d4860:	4831      	ldr	r0, [pc, #196]	; (d4928 <_Z9stopwatchv+0x260>)
   d4862:	f002 fbf5 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
        matrix.setCursor(x1, 0);
   d4866:	2200      	movs	r2, #0
   d4868:	f9b4 1000 	ldrsh.w	r1, [r4]
   d486c:	482e      	ldr	r0, [pc, #184]	; (d4928 <_Z9stopwatchv+0x260>)
   d486e:	f001 ff6c 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
        matrix.print("seconds");
   d4872:	4932      	ldr	r1, [pc, #200]	; (d493c <_Z9stopwatchv+0x274>)
   d4874:	482c      	ldr	r0, [pc, #176]	; (d4928 <_Z9stopwatchv+0x260>)
   d4876:	f004 f819 	bl	d88ac <_ZN5Print5printEPKc>
        if(--x1 < -36) {
   d487a:	6823      	ldr	r3, [r4, #0]
   d487c:	3b01      	subs	r3, #1
   d487e:	6023      	str	r3, [r4, #0]
   d4880:	3324      	adds	r3, #36	; 0x24
   d4882:	da0d      	bge.n	d48a0 <_Z9stopwatchv+0x1d8>
        x1 = matrix.width();
   d4884:	4828      	ldr	r0, [pc, #160]	; (d4928 <_Z9stopwatchv+0x260>)
   d4886:	f001 ff68 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
        matrix.setTextColor(matrix.Color(80, 255, 0));
   d488a:	21ff      	movs	r1, #255	; 0xff
      for(int i =0;i<45;i++){
        matrix.fillScreen(0);
        matrix.setCursor(x1, 0);
        matrix.print("seconds");
        if(--x1 < -36) {
        x1 = matrix.width();
   d488c:	f8c8 0000 	str.w	r0, [r8]
        matrix.setTextColor(matrix.Color(80, 255, 0));
   d4890:	2200      	movs	r2, #0
   d4892:	2050      	movs	r0, #80	; 0x50
   d4894:	f002 fce8 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d4898:	4601      	mov	r1, r0
   d489a:	4823      	ldr	r0, [pc, #140]	; (d4928 <_Z9stopwatchv+0x260>)
   d489c:	f001 ff58 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
        }
        matrix.show();
   d48a0:	4822      	ldr	r0, [pc, #136]	; (d492c <_Z9stopwatchv+0x264>)
   d48a2:	f002 fd53 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
        delay(50);
   d48a6:	2032      	movs	r0, #50	; 0x32
   d48a8:	f003 face 	bl	d7e48 <delay>
      matrix.setCursor(1, 0);
      matrix.print(seconds);
      matrix.show();
      delay(500);
      x1 = matrix.width();
      for(int i =0;i<45;i++){
   d48ac:	3e01      	subs	r6, #1
   d48ae:	d1d6      	bne.n	d485e <_Z9stopwatchv+0x196>
        matrix.show();
        delay(50);
      }
      seconds = 0;
      minutes = 0;
      secondsdisplay = 0;
   d48b0:	4b1b      	ldr	r3, [pc, #108]	; (d4920 <_Z9stopwatchv+0x258>)
        matrix.setTextColor(matrix.Color(80, 255, 0));
        }
        matrix.show();
        delay(50);
      }
      seconds = 0;
   d48b2:	602e      	str	r6, [r5, #0]
      minutes = 0;
      secondsdisplay = 0;
   d48b4:	2200      	movs	r2, #0
        }
        matrix.show();
        delay(50);
      }
      seconds = 0;
      minutes = 0;
   d48b6:	603e      	str	r6, [r7, #0]
      secondsdisplay = 0;
   d48b8:	601a      	str	r2, [r3, #0]
   d48ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else {
      matrix.fillScreen(0);
   d48be:	4631      	mov	r1, r6
   d48c0:	4819      	ldr	r0, [pc, #100]	; (d4928 <_Z9stopwatchv+0x260>)
   d48c2:	f002 fbc5 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
      matrix.setCursor(x1, 0);
   d48c6:	4632      	mov	r2, r6
   d48c8:	f9b4 1000 	ldrsh.w	r1, [r4]
   d48cc:	4816      	ldr	r0, [pc, #88]	; (d4928 <_Z9stopwatchv+0x260>)
   d48ce:	f001 ff3c 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
      matrix.print(F("STOPWATCH"));
   d48d2:	491b      	ldr	r1, [pc, #108]	; (d4940 <_Z9stopwatchv+0x278>)
   d48d4:	4814      	ldr	r0, [pc, #80]	; (d4928 <_Z9stopwatchv+0x260>)
   d48d6:	f003 fff0 	bl	d88ba <_ZN5Print5printEPK19__FlashStringHelper>
      if(--x1 < -36) {
   d48da:	6823      	ldr	r3, [r4, #0]
   d48dc:	3b01      	subs	r3, #1
   d48de:	6023      	str	r3, [r4, #0]
   d48e0:	3324      	adds	r3, #36	; 0x24
   d48e2:	da0c      	bge.n	d48fe <_Z9stopwatchv+0x236>
        x1 = matrix.width();
   d48e4:	4810      	ldr	r0, [pc, #64]	; (d4928 <_Z9stopwatchv+0x260>)
   d48e6:	f001 ff38 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
        matrix.setTextColor(matrix.Color(80, 255, 0));
   d48ea:	21ff      	movs	r1, #255	; 0xff
    } else {
      matrix.fillScreen(0);
      matrix.setCursor(x1, 0);
      matrix.print(F("STOPWATCH"));
      if(--x1 < -36) {
        x1 = matrix.width();
   d48ec:	6020      	str	r0, [r4, #0]
        matrix.setTextColor(matrix.Color(80, 255, 0));
   d48ee:	4632      	mov	r2, r6
   d48f0:	2050      	movs	r0, #80	; 0x50
   d48f2:	f002 fcb9 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d48f6:	4601      	mov	r1, r0
   d48f8:	480b      	ldr	r0, [pc, #44]	; (d4928 <_Z9stopwatchv+0x260>)
   d48fa:	f001 ff29 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
      }
      matrix.show();
   d48fe:	480b      	ldr	r0, [pc, #44]	; (d492c <_Z9stopwatchv+0x264>)
   d4900:	f002 fd24 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      delay(100);
   d4904:	2064      	movs	r0, #100	; 0x64
    }
  }
}
   d4906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      if(--x1 < -36) {
        x1 = matrix.width();
        matrix.setTextColor(matrix.Color(80, 255, 0));
      }
      matrix.show();
      delay(100);
   d490a:	f003 ba9d 	b.w	d7e48 <delay>
   d490e:	bf00      	nop
   d4910:	47ae147b 	.word	0x47ae147b
   d4914:	3f847ae1 	.word	0x3f847ae1
   d4918:	2003e320 	.word	0x2003e320
   d491c:	2003ddc0 	.word	0x2003ddc0
   d4920:	2003dc74 	.word	0x2003dc74
   d4924:	2003dc40 	.word	0x2003dc40
   d4928:	2003dc98 	.word	0x2003dc98
   d492c:	2003dcb4 	.word	0x2003dcb4
   d4930:	000db096 	.word	0x000db096
   d4934:	2003dcdc 	.word	0x2003dcdc
   d4938:	000db098 	.word	0x000db098
   d493c:	000db0a0 	.word	0x000db0a0
   d4940:	000db0a8 	.word	0x000db0a8

000d4944 <loop>:
  }
}
}

void loop(){
  delay(CONCURRENT_WAIT_FOREVER);
   d4944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4948:	f003 ba7e 	b.w	d7e48 <delay>

000d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d494c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d494e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4950:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4952:	b17c      	cbz	r4, d4974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4954:	6863      	ldr	r3, [r4, #4]
   d4956:	3b01      	subs	r3, #1
   d4958:	6063      	str	r3, [r4, #4]
   d495a:	b95b      	cbnz	r3, d4974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d495c:	6823      	ldr	r3, [r4, #0]
   d495e:	4620      	mov	r0, r4
   d4960:	689b      	ldr	r3, [r3, #8]
   d4962:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4964:	68a3      	ldr	r3, [r4, #8]
   d4966:	3b01      	subs	r3, #1
   d4968:	60a3      	str	r3, [r4, #8]
   d496a:	b91b      	cbnz	r3, d4974 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d496c:	6823      	ldr	r3, [r4, #0]
   d496e:	4620      	mov	r0, r4
   d4970:	68db      	ldr	r3, [r3, #12]
   d4972:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4974:	4628      	mov	r0, r5
   d4976:	bd38      	pop	{r3, r4, r5, pc}

000d4978 <_Z15weatherFunctionv>:
   WheelPos -= 170;
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}

void weatherFunction(){
   d4978:	b530      	push	{r4, r5, lr}
   d497a:	4d1e      	ldr	r5, [pc, #120]	; (d49f4 <_Z15weatherFunctionv+0x7c>)
   d497c:	b095      	sub	sp, #84	; 0x54
   d497e:	782b      	ldrb	r3, [r5, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4980:	491d      	ldr	r1, [pc, #116]	; (d49f8 <_Z15weatherFunctionv+0x80>)
   d4982:	f88d 3000 	strb.w	r3, [sp]
   d4986:	2200      	movs	r2, #0
   d4988:	233c      	movs	r3, #60	; 0x3c
   d498a:	a804      	add	r0, sp, #16
   d498c:	f003 fbb6 	bl	d80fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4990:	a805      	add	r0, sp, #20
   d4992:	f7ff ffdb 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  while(1){
  // Step 1: get IP
  Particle.publish("particle/device/ip"); //requests public ip from particle
  delay(4000);
   d4996:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d499a:	f003 fa55 	bl	d7e48 <delay>
   d499e:	4c17      	ldr	r4, [pc, #92]	; (d49fc <_Z15weatherFunctionv+0x84>)
   d49a0:	4b17      	ldr	r3, [pc, #92]	; (d4a00 <_Z15weatherFunctionv+0x88>)
   d49a2:	4918      	ldr	r1, [pc, #96]	; (d4a04 <_Z15weatherFunctionv+0x8c>)
   d49a4:	681a      	ldr	r2, [r3, #0]
   d49a6:	7823      	ldrb	r3, [r4, #0]
   d49a8:	f88d 3000 	strb.w	r3, [sp]
   d49ac:	a804      	add	r0, sp, #16
   d49ae:	233c      	movs	r3, #60	; 0x3c
   d49b0:	f003 fba4 	bl	d80fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d49b4:	a805      	add	r0, sp, #20
   d49b6:	f7ff ffc9 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  // Step 2: get geo location
  Particle.publish("geoip", global_ip.c_str(), PRIVATE); //requests data from particle and translates it into a char*
  delay(4000);
   d49ba:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d49be:	f003 fa43 	bl	d7e48 <delay>
   d49c2:	4b11      	ldr	r3, [pc, #68]	; (d4a08 <_Z15weatherFunctionv+0x90>)
  // Step 3: get temp
  char data[64]; //data buffer for integrating lat and lon for webhook
  sprintf(data, "%s,%s", global_lat.c_str(), global_lon.c_str());//move to geoip handler so is step by step
   d49c4:	4a11      	ldr	r2, [pc, #68]	; (d4a0c <_Z15weatherFunctionv+0x94>)
   d49c6:	681b      	ldr	r3, [r3, #0]
   d49c8:	6812      	ldr	r2, [r2, #0]
   d49ca:	4911      	ldr	r1, [pc, #68]	; (d4a10 <_Z15weatherFunctionv+0x98>)
   d49cc:	a804      	add	r0, sp, #16
   d49ce:	f003 f9fb 	bl	d7dc8 <sprintf>
   d49d2:	7823      	ldrb	r3, [r4, #0]
   d49d4:	f88d 3000 	strb.w	r3, [sp]
   d49d8:	aa04      	add	r2, sp, #16
   d49da:	233c      	movs	r3, #60	; 0x3c
   d49dc:	490d      	ldr	r1, [pc, #52]	; (d4a14 <_Z15weatherFunctionv+0x9c>)
   d49de:	a802      	add	r0, sp, #8
   d49e0:	f003 fb8c 	bl	d80fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d49e4:	a803      	add	r0, sp, #12
   d49e6:	f7ff ffb1 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("tempRead", data, PRIVATE);//                    that way it is event driven
  delay(10000);
   d49ea:	f242 7010 	movw	r0, #10000	; 0x2710
   d49ee:	f003 fa2b 	bl	d7e48 <delay>
   d49f2:	e7c4      	b.n	d497e <_Z15weatherFunctionv+0x6>
   d49f4:	2003dd5c 	.word	0x2003dd5c
   d49f8:	000db0b2 	.word	0x000db0b2
   d49fc:	2003dc54 	.word	0x2003dc54
   d4a00:	2003e324 	.word	0x2003e324
   d4a04:	000db19a 	.word	0x000db19a
   d4a08:	2003dc80 	.word	0x2003dc80
   d4a0c:	2003e310 	.word	0x2003e310
   d4a10:	000db0c5 	.word	0x000db0c5
   d4a14:	000db1ae 	.word	0x000db1ae

000d4a18 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4a18:	b510      	push	{r4, lr}
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4a1a:	4b04      	ldr	r3, [pc, #16]	; (d4a2c <_ZN22BlynkTransportParticleD1Ev+0x14>)
   d4a1c:	4604      	mov	r4, r0
   d4a1e:	f840 3b18 	str.w	r3, [r0], #24
   d4a22:	f7ff ff93 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a26:	4620      	mov	r0, r4
   d4a28:	bd10      	pop	{r4, pc}
   d4a2a:	bf00      	nop
   d4a2c:	000dbe6c 	.word	0x000dbe6c

000d4a30 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>:
	 *
	 * This should only be used for things like string, numbers, booleans, etc.. If you want to get a JSON array
	 * or object within an object, use getValueTokenByKey() instead.
	 */
	template<class T>
	bool getOuterValueByKey(const char *name, T &result) const {
   d4a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4a32:	460e      	mov	r6, r1
   d4a34:	4604      	mov	r4, r0
   d4a36:	4615      	mov	r5, r2
		const JsonParserGeneratorRK::jsmntok_t *value;

		if (getValueTokenByKey(getOuterObject(), name, value)) {
   d4a38:	f001 ff1a 	bl	d6870 <_ZNK10JsonParser14getOuterObjectEv>
   d4a3c:	ab01      	add	r3, sp, #4
   d4a3e:	4601      	mov	r1, r0
   d4a40:	4632      	mov	r2, r6
   d4a42:	4620      	mov	r0, r4
   d4a44:	f002 f81c 	bl	d6a80 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   d4a48:	b120      	cbz	r0, d4a54 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_+0x24>
			return getTokenValue(value, result);
   d4a4a:	462a      	mov	r2, r5
   d4a4c:	9901      	ldr	r1, [sp, #4]
   d4a4e:	4620      	mov	r0, r4
   d4a50:	f001 fff8 	bl	d6a44 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
		}
		else {
			return false;
		}
	}
   d4a54:	b002      	add	sp, #8
   d4a56:	bd70      	pop	{r4, r5, r6, pc}

000d4a58 <_Z11tempHandlerPKcS0_>:
  }
}

void tempHandler(const char *event, const char *data) { //callback for temp webhook
   d4a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // Handle the integration response
  jsonParser.addString(data); //adds json to buffer
   d4a5a:	4815      	ldr	r0, [pc, #84]	; (d4ab0 <_Z11tempHandlerPKcS0_+0x58>)
   d4a5c:	f7ff fcb8 	bl	d43d0 <_ZN10JsonBuffer9addStringEPKc>
  if (jsonParser.parse()) {
   d4a60:	4813      	ldr	r0, [pc, #76]	; (d4ab0 <_Z11tempHandlerPKcS0_+0x58>)
   d4a62:	f002 fa06 	bl	d6e72 <_ZN10JsonParser5parseEv>
   d4a66:	b1e0      	cbz	r0, d4aa2 <_Z11tempHandlerPKcS0_+0x4a>
    jsonParser.getOuterValueByKey("tempReceived", tempReceived); //parses
   d4a68:	4c12      	ldr	r4, [pc, #72]	; (d4ab4 <_Z11tempHandlerPKcS0_+0x5c>)
    jsonParser.getOuterValueByKey("currentStatus", currentStatus);
   d4a6a:	4d13      	ldr	r5, [pc, #76]	; (d4ab8 <_Z11tempHandlerPKcS0_+0x60>)

void tempHandler(const char *event, const char *data) { //callback for temp webhook
  // Handle the integration response
  jsonParser.addString(data); //adds json to buffer
  if (jsonParser.parse()) {
    jsonParser.getOuterValueByKey("tempReceived", tempReceived); //parses
   d4a6c:	4913      	ldr	r1, [pc, #76]	; (d4abc <_Z11tempHandlerPKcS0_+0x64>)
    jsonParser.getOuterValueByKey("currentStatus", currentStatus);
    jsonParser.getOuterValueByKey("percipProb", precipProb);
   d4a6e:	4e14      	ldr	r6, [pc, #80]	; (d4ac0 <_Z11tempHandlerPKcS0_+0x68>)

void tempHandler(const char *event, const char *data) { //callback for temp webhook
  // Handle the integration response
  jsonParser.addString(data); //adds json to buffer
  if (jsonParser.parse()) {
    jsonParser.getOuterValueByKey("tempReceived", tempReceived); //parses
   d4a70:	480f      	ldr	r0, [pc, #60]	; (d4ab0 <_Z11tempHandlerPKcS0_+0x58>)
   d4a72:	4622      	mov	r2, r4
   d4a74:	f7ff ffdc 	bl	d4a30 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>
    jsonParser.getOuterValueByKey("currentStatus", currentStatus);
   d4a78:	462a      	mov	r2, r5
   d4a7a:	4912      	ldr	r1, [pc, #72]	; (d4ac4 <_Z11tempHandlerPKcS0_+0x6c>)
   d4a7c:	480c      	ldr	r0, [pc, #48]	; (d4ab0 <_Z11tempHandlerPKcS0_+0x58>)
   d4a7e:	f7ff ffd7 	bl	d4a30 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>
    jsonParser.getOuterValueByKey("percipProb", precipProb);
   d4a82:	4632      	mov	r2, r6
   d4a84:	4910      	ldr	r1, [pc, #64]	; (d4ac8 <_Z11tempHandlerPKcS0_+0x70>)
   d4a86:	480a      	ldr	r0, [pc, #40]	; (d4ab0 <_Z11tempHandlerPKcS0_+0x58>)
   d4a88:	f7ff ffd2 	bl	d4a30 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>
    // Put code to do something with tempMin and tempMax here
    Serial.printlnf("tempReceived=%s, currentStatus=%s, precipitationProbability:%s", tempReceived.c_str(), currentStatus.c_str(), precipProb.c_str()); //translates String to char* 
   d4a8c:	f004 fdb6 	bl	d95fc <_Z16_fetch_usbserialv>
   d4a90:	6833      	ldr	r3, [r6, #0]
   d4a92:	9301      	str	r3, [sp, #4]
   d4a94:	682b      	ldr	r3, [r5, #0]
   d4a96:	9300      	str	r3, [sp, #0]
   d4a98:	4a0c      	ldr	r2, [pc, #48]	; (d4acc <_Z11tempHandlerPKcS0_+0x74>)
   d4a9a:	6823      	ldr	r3, [r4, #0]
   d4a9c:	2101      	movs	r1, #1
   d4a9e:	f003 ff83 	bl	d89a8 <_ZN5Print11printf_implEbPKcz>
  }
  jsonParser.clear();//clears buffer so that geographical data can be parsed correctly
   d4aa2:	4803      	ldr	r0, [pc, #12]	; (d4ab0 <_Z11tempHandlerPKcS0_+0x58>)
}
   d4aa4:	b002      	add	sp, #8
   d4aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    jsonParser.getOuterValueByKey("currentStatus", currentStatus);
    jsonParser.getOuterValueByKey("percipProb", precipProb);
    // Put code to do something with tempMin and tempMax here
    Serial.printlnf("tempReceived=%s, currentStatus=%s, precipitationProbability:%s", tempReceived.c_str(), currentStatus.c_str(), precipProb.c_str()); //translates String to char* 
  }
  jsonParser.clear();//clears buffer so that geographical data can be parsed correctly
   d4aaa:	f001 bece 	b.w	d684a <_ZN10JsonBuffer5clearEv>
   d4aae:	bf00      	nop
   d4ab0:	2003ddc4 	.word	0x2003ddc4
   d4ab4:	2003e354 	.word	0x2003e354
   d4ab8:	2003ddac 	.word	0x2003ddac
   d4abc:	000db0cb 	.word	0x000db0cb
   d4ac0:	2003dd60 	.word	0x2003dd60
   d4ac4:	000db0d8 	.word	0x000db0d8
   d4ac8:	000db0e6 	.word	0x000db0e6
   d4acc:	000db0f1 	.word	0x000db0f1

000d4ad0 <_Z12geoIpHandlerPKcS0_>:
}

void geoIpHandler(const char *event, const char *data) { //callback for geoip webhook
   d4ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  jsonParser.addString(data); //this input uses a response template on the particle console to simplify the response
   d4ad2:	4811      	ldr	r0, [pc, #68]	; (d4b18 <_Z12geoIpHandlerPKcS0_+0x48>)
   d4ad4:	f7ff fc7c 	bl	d43d0 <_ZN10JsonBuffer9addStringEPKc>
  if (jsonParser.parse()) {
   d4ad8:	480f      	ldr	r0, [pc, #60]	; (d4b18 <_Z12geoIpHandlerPKcS0_+0x48>)
   d4ada:	f002 f9ca 	bl	d6e72 <_ZN10JsonParser5parseEv>
   d4ade:	b1a0      	cbz	r0, d4b0a <_Z12geoIpHandlerPKcS0_+0x3a>
    jsonParser.getOuterValueByKey("latitude", global_lat);
   d4ae0:	4c0e      	ldr	r4, [pc, #56]	; (d4b1c <_Z12geoIpHandlerPKcS0_+0x4c>)
    jsonParser.getOuterValueByKey("longitude", global_lon);
   d4ae2:	4d0f      	ldr	r5, [pc, #60]	; (d4b20 <_Z12geoIpHandlerPKcS0_+0x50>)
}

void geoIpHandler(const char *event, const char *data) { //callback for geoip webhook
  jsonParser.addString(data); //this input uses a response template on the particle console to simplify the response
  if (jsonParser.parse()) {
    jsonParser.getOuterValueByKey("latitude", global_lat);
   d4ae4:	490f      	ldr	r1, [pc, #60]	; (d4b24 <_Z12geoIpHandlerPKcS0_+0x54>)
   d4ae6:	480c      	ldr	r0, [pc, #48]	; (d4b18 <_Z12geoIpHandlerPKcS0_+0x48>)
   d4ae8:	4622      	mov	r2, r4
   d4aea:	f7ff ffa1 	bl	d4a30 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>
    jsonParser.getOuterValueByKey("longitude", global_lon);
   d4aee:	462a      	mov	r2, r5
   d4af0:	490d      	ldr	r1, [pc, #52]	; (d4b28 <_Z12geoIpHandlerPKcS0_+0x58>)
   d4af2:	4809      	ldr	r0, [pc, #36]	; (d4b18 <_Z12geoIpHandlerPKcS0_+0x48>)
   d4af4:	f7ff ff9c 	bl	d4a30 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>
    Serial.printlnf("lat=%s,lon=%s", global_lat.c_str(), global_lon.c_str());
   d4af8:	f004 fd80 	bl	d95fc <_Z16_fetch_usbserialv>
   d4afc:	682b      	ldr	r3, [r5, #0]
   d4afe:	9300      	str	r3, [sp, #0]
   d4b00:	4a0a      	ldr	r2, [pc, #40]	; (d4b2c <_Z12geoIpHandlerPKcS0_+0x5c>)
   d4b02:	6823      	ldr	r3, [r4, #0]
   d4b04:	2101      	movs	r1, #1
   d4b06:	f003 ff4f 	bl	d89a8 <_ZN5Print11printf_implEbPKcz>
  }
  jsonParser.clear(); //clears the parser buffer so the temp can be parsed correctly
   d4b0a:	4803      	ldr	r0, [pc, #12]	; (d4b18 <_Z12geoIpHandlerPKcS0_+0x48>)
}
   d4b0c:	b003      	add	sp, #12
   d4b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (jsonParser.parse()) {
    jsonParser.getOuterValueByKey("latitude", global_lat);
    jsonParser.getOuterValueByKey("longitude", global_lon);
    Serial.printlnf("lat=%s,lon=%s", global_lat.c_str(), global_lon.c_str());
  }
  jsonParser.clear(); //clears the parser buffer so the temp can be parsed correctly
   d4b12:	f001 be9a 	b.w	d684a <_ZN10JsonBuffer5clearEv>
   d4b16:	bf00      	nop
   d4b18:	2003ddc4 	.word	0x2003ddc4
   d4b1c:	2003e310 	.word	0x2003e310
   d4b20:	2003dc80 	.word	0x2003dc80
   d4b24:	000db130 	.word	0x000db130
   d4b28:	000db139 	.word	0x000db139
   d4b2c:	000db143 	.word	0x000db143

000d4b30 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4b30:	b508      	push	{r3, lr}
        state = CONNECTING;
   d4b32:	2300      	movs	r3, #0
   d4b34:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4b36:	6800      	ldr	r0, [r0, #0]
   d4b38:	f004 fb12 	bl	d9160 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d4b3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d4b40:	f002 ba50 	b.w	d6fe4 <BlynkNoOpCbk>

000d4b44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4b48:	188e      	adds	r6, r1, r2
   d4b4a:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4b4c:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4b4e:	4680      	mov	r8, r0
   d4b50:	460d      	mov	r5, r1
   d4b52:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4b54:	9105      	str	r1, [sp, #20]
   d4b56:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4b58:	f080 811e 	bcs.w	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d4b5c:	880b      	ldrh	r3, [r1, #0]
   d4b5e:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d4b62:	a805      	add	r0, sp, #20
   d4b64:	f7ff fbc8 	bl	d42f8 <_ZN10BlynkParam8iteratorppEv>
   d4b68:	6803      	ldr	r3, [r0, #0]
   d4b6a:	429e      	cmp	r6, r3
   d4b6c:	f240 8114 	bls.w	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
   d4b70:	9805      	ldr	r0, [sp, #20]
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d4b72:	7803      	ldrb	r3, [r0, #0]
   d4b74:	2b41      	cmp	r3, #65	; 0x41
   d4b76:	d113      	bne.n	d4ba0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5c>
   d4b78:	3001      	adds	r0, #1
   d4b7a:	f005 fc71 	bl	da460 <atoi>
   d4b7e:	2805      	cmp	r0, #5
   d4b80:	dd01      	ble.n	d4b86 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x42>
   d4b82:	24ff      	movs	r4, #255	; 0xff
   d4b84:	e010      	b.n	d4ba8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x64>
   d4b86:	9805      	ldr	r0, [sp, #20]
   d4b88:	3001      	adds	r0, #1
   d4b8a:	f005 fc69 	bl	da460 <atoi>
   d4b8e:	2800      	cmp	r0, #0
   d4b90:	dbf7      	blt.n	d4b82 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3e>
   d4b92:	9805      	ldr	r0, [sp, #20]
   d4b94:	3001      	adds	r0, #1
   d4b96:	f005 fc63 	bl	da460 <atoi>
   d4b9a:	300e      	adds	r0, #14
   d4b9c:	b2c4      	uxtb	r4, r0
   d4b9e:	e003      	b.n	d4ba8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x64>
   d4ba0:	a805      	add	r0, sp, #20
   d4ba2:	f7ff fb9f 	bl	d42e4 <_ZNK10BlynkParam8iterator5asIntEv>
   d4ba6:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d4ba8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d4bac:	f247 2276 	movw	r2, #29302	; 0x7276
   d4bb0:	4293      	cmp	r3, r2
   d4bb2:	f000 80b5 	beq.w	d4d20 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   d4bb6:	d80d      	bhi.n	d4bd4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x90>
   d4bb8:	f247 2261 	movw	r2, #29281	; 0x7261
   d4bbc:	4293      	cmp	r3, r2
   d4bbe:	d07b      	beq.n	d4cb8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   d4bc0:	f247 2264 	movw	r2, #29284	; 0x7264
   d4bc4:	4293      	cmp	r3, r2
   d4bc6:	d050      	beq.n	d4c6a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x126>
   d4bc8:	f646 5270 	movw	r2, #28016	; 0x6d70
   d4bcc:	4293      	cmp	r3, r2
   d4bce:	f040 80d2 	bne.w	d4d76 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x232>
   d4bd2:	e034      	b.n	d4c3e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xfa>
   d4bd4:	f247 7264 	movw	r2, #30564	; 0x7764
   d4bd8:	4293      	cmp	r3, r2
   d4bda:	d058      	beq.n	d4c8e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x14a>
   d4bdc:	f247 7276 	movw	r2, #30582	; 0x7776
   d4be0:	4293      	cmp	r3, r2
   d4be2:	f000 80ae 	beq.w	d4d42 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fe>
   d4be6:	f247 7261 	movw	r2, #30561	; 0x7761
   d4bea:	4293      	cmp	r3, r2
   d4bec:	f040 80c3 	bne.w	d4d76 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x232>
   d4bf0:	e083      	b.n	d4cfa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1b6>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            pin = BLYNK_DECODE_PIN(it);
   d4bf2:	7803      	ldrb	r3, [r0, #0]
   d4bf4:	2b41      	cmp	r3, #65	; 0x41
   d4bf6:	d133      	bne.n	d4c60 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x11c>
   d4bf8:	3001      	adds	r0, #1
   d4bfa:	f005 fc31 	bl	da460 <atoi>
   d4bfe:	2805      	cmp	r0, #5
   d4c00:	dd21      	ble.n	d4c46 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x102>
   d4c02:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d4c04:	a805      	add	r0, sp, #20
   d4c06:	f7ff fb77 	bl	d42f8 <_ZN10BlynkParam8iteratorppEv>
   d4c0a:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d4c0c:	4964      	ldr	r1, [pc, #400]	; (d4da0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>)
   d4c0e:	4628      	mov	r0, r5
   d4c10:	f005 fd70 	bl	da6f4 <strcmp>
   d4c14:	4601      	mov	r1, r0
   d4c16:	2800      	cmp	r0, #0
   d4c18:	f000 80ba 	beq.w	d4d90 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4c1c:	4961      	ldr	r1, [pc, #388]	; (d4da4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x260>)
   d4c1e:	4628      	mov	r0, r5
   d4c20:	f005 fd68 	bl	da6f4 <strcmp>
   d4c24:	2800      	cmp	r0, #0
   d4c26:	f000 80b2 	beq.w	d4d8e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
   d4c2a:	495f      	ldr	r1, [pc, #380]	; (d4da8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x264>)
   d4c2c:	4628      	mov	r0, r5
   d4c2e:	f005 fd61 	bl	da6f4 <strcmp>
   d4c32:	2800      	cmp	r0, #0
   d4c34:	f000 80ab 	beq.w	d4d8e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24a>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d4c38:	a805      	add	r0, sp, #20
   d4c3a:	f7ff fb5d 	bl	d42f8 <_ZN10BlynkParam8iteratorppEv>
   d4c3e:	9805      	ldr	r0, [sp, #20]
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d4c40:	4286      	cmp	r6, r0
   d4c42:	d8d6      	bhi.n	d4bf2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xae>
   d4c44:	e0a8      	b.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
            pin = BLYNK_DECODE_PIN(it);
   d4c46:	9805      	ldr	r0, [sp, #20]
   d4c48:	3001      	adds	r0, #1
   d4c4a:	f005 fc09 	bl	da460 <atoi>
   d4c4e:	2800      	cmp	r0, #0
   d4c50:	dbd7      	blt.n	d4c02 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xbe>
   d4c52:	9805      	ldr	r0, [sp, #20]
   d4c54:	3001      	adds	r0, #1
   d4c56:	f005 fc03 	bl	da460 <atoi>
   d4c5a:	300e      	adds	r0, #14
   d4c5c:	b2c4      	uxtb	r4, r0
   d4c5e:	e7d1      	b.n	d4c04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
   d4c60:	a805      	add	r0, sp, #20
   d4c62:	f7ff fb3f 	bl	d42e4 <_ZNK10BlynkParam8iterator5asIntEv>
   d4c66:	b2c4      	uxtb	r4, r0
   d4c68:	e7cc      	b.n	d4c04 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4c6a:	ab0a      	add	r3, sp, #40	; 0x28
   d4c6c:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
   d4c6e:	a807      	add	r0, sp, #28
   d4c70:	2310      	movs	r3, #16
   d4c72:	2500      	movs	r5, #0
   d4c74:	494d      	ldr	r1, [pc, #308]	; (d4dac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x268>)
   d4c76:	9309      	str	r3, [sp, #36]	; 0x24
   d4c78:	9508      	str	r5, [sp, #32]
   d4c7a:	f7ff fb69 	bl	d4350 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d4c7e:	a807      	add	r0, sp, #28
   d4c80:	4621      	mov	r1, r4
   d4c82:	f7ff fb81 	bl	d4388 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d4c86:	4620      	mov	r0, r4
   d4c88:	f004 fdd4 	bl	d9834 <digitalRead>
   d4c8c:	e025      	b.n	d4cda <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x196>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d4c8e:	a805      	add	r0, sp, #20
   d4c90:	f7ff fb32 	bl	d42f8 <_ZN10BlynkParam8iteratorppEv>
   d4c94:	6803      	ldr	r3, [r0, #0]
   d4c96:	429e      	cmp	r6, r3
   d4c98:	d97e      	bls.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d4c9a:	b2a4      	uxth	r4, r4
   d4c9c:	2101      	movs	r1, #1
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	f004 fd9e 	bl	d97e0 <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4ca4:	a805      	add	r0, sp, #20
   d4ca6:	f7ff fb1d 	bl	d42e4 <_ZNK10BlynkParam8iterator5asIntEv>
   d4caa:	1c01      	adds	r1, r0, #0
   d4cac:	bf18      	it	ne
   d4cae:	2101      	movne	r1, #1
   d4cb0:	4620      	mov	r0, r4
   d4cb2:	f004 fda6 	bl	d9802 <digitalWrite>
    } break;
   d4cb6:	e06f      	b.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
   d4cb8:	ab0a      	add	r3, sp, #40	; 0x28
   d4cba:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
   d4cbc:	493c      	ldr	r1, [pc, #240]	; (d4db0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x26c>)
   d4cbe:	2310      	movs	r3, #16
   d4cc0:	a807      	add	r0, sp, #28
   d4cc2:	2500      	movs	r5, #0
   d4cc4:	9309      	str	r3, [sp, #36]	; 0x24
   d4cc6:	9508      	str	r5, [sp, #32]
   d4cc8:	f7ff fb42 	bl	d4350 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d4ccc:	a807      	add	r0, sp, #28
   d4cce:	4621      	mov	r1, r4
   d4cd0:	f7ff fb5a 	bl	d4388 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	f004 fdc0 	bl	d985a <analogRead>
   d4cda:	4601      	mov	r1, r0
   d4cdc:	a807      	add	r0, sp, #28
   d4cde:	f7ff fb65 	bl	d43ac <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d4ce2:	9b08      	ldr	r3, [sp, #32]
   d4ce4:	9502      	str	r5, [sp, #8]
   d4ce6:	3b01      	subs	r3, #1
   d4ce8:	9300      	str	r3, [sp, #0]
   d4cea:	9501      	str	r5, [sp, #4]
   d4cec:	9b07      	ldr	r3, [sp, #28]
   d4cee:	462a      	mov	r2, r5
   d4cf0:	2114      	movs	r1, #20
   d4cf2:	4640      	mov	r0, r8
   d4cf4:	f000 fb9c 	bl	d5430 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d4cf8:	e04e      	b.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d4cfa:	a805      	add	r0, sp, #20
   d4cfc:	f7ff fafc 	bl	d42f8 <_ZN10BlynkParam8iteratorppEv>
   d4d00:	6803      	ldr	r3, [r0, #0]
   d4d02:	429e      	cmp	r6, r3
   d4d04:	d948      	bls.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d4d06:	b2a4      	uxth	r4, r4
   d4d08:	2101      	movs	r1, #1
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	f004 fd68 	bl	d97e0 <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d4d10:	a805      	add	r0, sp, #20
   d4d12:	f7ff fae7 	bl	d42e4 <_ZNK10BlynkParam8iterator5asIntEv>
   d4d16:	4601      	mov	r1, r0
   d4d18:	4620      	mov	r0, r4
   d4d1a:	f004 fdb5 	bl	d9888 <_Z11analogWritetm>
    } break;
   d4d1e:	e03b      	b.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d4d20:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d4d22:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d4d24:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d4d28:	f002 f95e 	bl	d6fe8 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d4d2c:	4603      	mov	r3, r0
            handler(req);
   d4d2e:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d4d30:	b123      	cbz	r3, d4d3c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>
   d4d32:	4a20      	ldr	r2, [pc, #128]	; (d4db4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x270>)
   d4d34:	4293      	cmp	r3, r2
   d4d36:	d001      	beq.n	d4d3c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>
            handler(req);
   d4d38:	4798      	blx	r3
   d4d3a:	e02d      	b.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
        } else {
            BlynkWidgetReadDefault(req);
   d4d3c:	f002 f950 	bl	d6fe0 <BlynkWidgetRead>
        }
    } break;
   d4d40:	e02a      	b.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
    case BLYNK_HW_VW: {
        ++it;
   d4d42:	a805      	add	r0, sp, #20
   d4d44:	f7ff fad8 	bl	d42f8 <_ZN10BlynkParam8iteratorppEv>
   d4d48:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d4d4a:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d4d4c:	1b5d      	subs	r5, r3, r5
   d4d4e:	1b7d      	subs	r5, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4d50:	4620      	mov	r0, r4
   d4d52:	950b      	str	r5, [sp, #44]	; 0x2c
   d4d54:	950c      	str	r5, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d4d56:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4d5a:	f002 f94f 	bl	d6ffc <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d4d5e:	4603      	mov	r3, r0
            handler(req, param2);
   d4d60:	a90a      	add	r1, sp, #40	; 0x28
   d4d62:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d4d64:	b123      	cbz	r3, d4d70 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22c>
   d4d66:	4a14      	ldr	r2, [pc, #80]	; (d4db8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x274>)
   d4d68:	4293      	cmp	r3, r2
   d4d6a:	d001      	beq.n	d4d70 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x22c>
            handler(req, param2);
   d4d6c:	4798      	blx	r3
   d4d6e:	e013      	b.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d4d70:	f002 f937 	bl	d6fe2 <BlynkWidgetWrite>
        }
    } break;
   d4d74:	e010      	b.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4d76:	2300      	movs	r3, #0
   d4d78:	2102      	movs	r1, #2
   d4d7a:	9100      	str	r1, [sp, #0]
   d4d7c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d4d80:	9302      	str	r3, [sp, #8]
   d4d82:	9301      	str	r3, [sp, #4]
   d4d84:	4619      	mov	r1, r3
   d4d86:	4640      	mov	r0, r8
   d4d88:	f000 fb52 	bl	d5430 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d4d8c:	e004      	b.n	d4d98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>
            pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d4d8e:	2101      	movs	r1, #1
   d4d90:	4620      	mov	r0, r4
   d4d92:	f004 fd25 	bl	d97e0 <pinMode>
   d4d96:	e74f      	b.n	d4c38 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf4>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d4d98:	b00e      	add	sp, #56	; 0x38
   d4d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d9e:	bf00      	nop
   d4da0:	000db151 	.word	0x000db151
   d4da4:	000db154 	.word	0x000db154
   d4da8:	000db158 	.word	0x000db158
   d4dac:	000db15c 	.word	0x000db15c
   d4db0:	000db15f 	.word	0x000db15f
   d4db4:	000d6fe1 	.word	0x000d6fe1
   d4db8:	000d6fe3 	.word	0x000d6fe3

000d4dbc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d4dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4dc0:	b08e      	sub	sp, #56	; 0x38
   d4dc2:	af04      	add	r7, sp, #16
   d4dc4:	4605      	mov	r5, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d4dc6:	2205      	movs	r2, #5
   d4dc8:	f107 010c 	add.w	r1, r7, #12
   d4dcc:	6800      	ldr	r0, [r0, #0]
   d4dce:	f003 fe6d 	bl	d8aac <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d4dd2:	2800      	cmp	r0, #0
   d4dd4:	f000 8123 	beq.w	d501e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x262>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d4dd8:	2805      	cmp	r0, #5
   d4dda:	d001      	beq.n	d4de0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
   d4ddc:	2000      	movs	r0, #0
   d4dde:	e123      	b.n	d5028 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4de0:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d4de4:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4de8:	0a13      	lsrs	r3, r2, #8
   d4dea:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d4dee:	0a23      	lsrs	r3, r4, #8
   d4df0:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4df4:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
   d4df6:	b2a4      	uxth	r4, r4
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4df8:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d4dfc:	f8a7 400f 	strh.w	r4, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d4e00:	2a00      	cmp	r2, #0
   d4e02:	d0eb      	beq.n	d4ddc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d4e04:	7b3b      	ldrb	r3, [r7, #12]
   d4e06:	b9f3      	cbnz	r3, d4e46 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
        lastActivityIn = BlynkMillis();
   d4e08:	f002 f8e6 	bl	d6fd8 <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d4e0c:	7f6b      	ldrb	r3, [r5, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d4e0e:	60e8      	str	r0, [r5, #12]
   d4e10:	f8b7 200f 	ldrh.w	r2, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d4e14:	b99b      	cbnz	r3, d4e3e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   d4e16:	f8b7 100d 	ldrh.w	r1, [r7, #13]
   d4e1a:	2901      	cmp	r1, #1
   d4e1c:	d10f      	bne.n	d4e3e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
            switch (hdr.length) {
   d4e1e:	2a04      	cmp	r2, #4
   d4e20:	d001      	beq.n	d4e26 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   d4e22:	2ac8      	cmp	r2, #200	; 0xc8
   d4e24:	d1da      	bne.n	d4ddc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
                state = CONNECTED;
   d4e26:	2401      	movs	r4, #1
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
   d4e28:	6168      	str	r0, [r5, #20]
                state = CONNECTED;
   d4e2a:	776c      	strb	r4, [r5, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
   d4e2c:	4628      	mov	r0, r5
   d4e2e:	f000 fbb9 	bl	d55a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4e32:	f7ff fa4b 	bl	d42cc <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d4e36:	f002 f8d5 	bl	d6fe4 <BlynkNoOpCbk>
                return true;
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	e0f4      	b.n	d5028 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4e3e:	1f50      	subs	r0, r2, #5
   d4e40:	bf18      	it	ne
   d4e42:	2001      	movne	r0, #1
   d4e44:	e0f0      	b.n	d5028 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d4e46:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   d4e4a:	d904      	bls.n	d4e56 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9a>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
        // TODO: Flush
        internalReconnect();
   d4e4c:	4628      	mov	r0, r5
   d4e4e:	f7ff fe6f 	bl	d4b30 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return true;
   d4e52:	2001      	movs	r0, #1
   d4e54:	e0e8      	b.n	d5028 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d4e56:	f104 0308 	add.w	r3, r4, #8
   d4e5a:	f023 0307 	bic.w	r3, r3, #7
   d4e5e:	46e8      	mov	r8, sp
   d4e60:	ebad 0d03 	sub.w	sp, sp, r3
   d4e64:	ae04      	add	r6, sp, #16
   d4e66:	4622      	mov	r2, r4
   d4e68:	4631      	mov	r1, r6
   d4e6a:	6828      	ldr	r0, [r5, #0]
   d4e6c:	f003 fe1e 	bl	d8aac <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d4e70:	4284      	cmp	r4, r0
   d4e72:	f04f 0400 	mov.w	r4, #0
   d4e76:	f040 80cd 	bne.w	d5014 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d4e7a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d4e7e:	54f4      	strb	r4, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d4e80:	f002 f8aa 	bl	d6fd8 <_Z11BlynkMillisv>

    switch (hdr.type)
   d4e84:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d4e86:	60e8      	str	r0, [r5, #12]

    switch (hdr.type)
   d4e88:	2b11      	cmp	r3, #17
   d4e8a:	d07a      	beq.n	d4f82 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c6>
   d4e8c:	d806      	bhi.n	d4e9c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe0>
   d4e8e:	2b06      	cmp	r3, #6
   d4e90:	d025      	beq.n	d4ede <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x122>
   d4e92:	2b0f      	cmp	r3, #15
   d4e94:	d067      	beq.n	d4f66 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1aa>
   d4e96:	2b02      	cmp	r3, #2
   d4e98:	d009      	beq.n	d4eae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   d4e9a:	e0b6      	b.n	d500a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
   d4e9c:	2b29      	cmp	r3, #41	; 0x29
   d4e9e:	d02b      	beq.n	d4ef8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13c>
   d4ea0:	2b37      	cmp	r3, #55	; 0x37
   d4ea2:	f000 80b9 	beq.w	d5018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25c>
   d4ea6:	2b14      	cmp	r3, #20
   d4ea8:	f040 80af 	bne.w	d500a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
   d4eac:	e05b      	b.n	d4f66 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1aa>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d4eae:	7f6b      	ldrb	r3, [r5, #29]
   d4eb0:	b943      	cbnz	r3, d4ec4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x108>
            BLYNK_LOG1(BLYNK_F("Ready"));
            state = CONNECTED;
   d4eb2:	2301      	movs	r3, #1
   d4eb4:	776b      	strb	r3, [r5, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
   d4eb6:	4628      	mov	r0, r5
   d4eb8:	f000 fb74 	bl	d55a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d4ebc:	f7ff fa06 	bl	d42cc <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d4ec0:	f002 f890 	bl	d6fe4 <BlynkNoOpCbk>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d4ec4:	2300      	movs	r3, #0
   d4ec6:	21c8      	movs	r1, #200	; 0xc8
   d4ec8:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d4ecc:	9100      	str	r1, [sp, #0]
   d4ece:	4628      	mov	r0, r5
   d4ed0:	9302      	str	r3, [sp, #8]
   d4ed2:	9301      	str	r3, [sp, #4]
   d4ed4:	4619      	mov	r1, r3
   d4ed6:	f000 faab 	bl	d5430 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d4eda:	2001      	movs	r0, #1
            this->sendInfo();
            BLYNK_RUN_YIELD();
            BlynkOnConnected();
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
    } break;
   d4edc:	e09d      	b.n	d501a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25e>
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d4ede:	23c8      	movs	r3, #200	; 0xc8
   d4ee0:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d4ee4:	9300      	str	r3, [sp, #0]
   d4ee6:	4628      	mov	r0, r5
   d4ee8:	9402      	str	r4, [sp, #8]
   d4eea:	9401      	str	r4, [sp, #4]
   d4eec:	4623      	mov	r3, r4
   d4eee:	4621      	mov	r1, r4
   d4ef0:	f000 fa9e 	bl	d5430 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d4ef4:	2001      	movs	r0, #1
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
    } break;
   d4ef6:	e090      	b.n	d501a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25e>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d4ef8:	68ab      	ldr	r3, [r5, #8]
   d4efa:	b91b      	cbnz	r3, d4f04 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x148>
             redir_serv = (char*)malloc(32);
   d4efc:	2020      	movs	r0, #32
   d4efe:	f002 ff4b 	bl	d7d98 <malloc>
   d4f02:	60a8      	str	r0, [r5, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4f04:	f8b7 400f 	ldrh.w	r4, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4f08:	61fe      	str	r6, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4f0a:	4434      	add	r4, r6
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d4f0c:	42a6      	cmp	r6, r4
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4f0e:	623c      	str	r4, [r7, #32]
   d4f10:	d301      	bcc.n	d4f16 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x15a>
            return false;
   d4f12:	2000      	movs	r0, #0
   d4f14:	e081      	b.n	d501a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25e>
        strncpy(redir_serv, it.asStr(), 32);
   d4f16:	2220      	movs	r2, #32
   d4f18:	4631      	mov	r1, r6
   d4f1a:	68a8      	ldr	r0, [r5, #8]
   d4f1c:	f005 fc34 	bl	da788 <strncpy>
        if (++it < param.end())
   d4f20:	f107 001c 	add.w	r0, r7, #28
   d4f24:	f7ff f9e8 	bl	d42f8 <_ZN10BlynkParam8iteratorppEv>
   d4f28:	6803      	ldr	r3, [r0, #0]
   d4f2a:	42a3      	cmp	r3, r4
   d4f2c:	d207      	bcs.n	d4f3e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x182>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4f2e:	69f8      	ldr	r0, [r7, #28]
   d4f30:	b118      	cbz	r0, d4f3a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17e>
   d4f32:	6a3b      	ldr	r3, [r7, #32]
   d4f34:	4298      	cmp	r0, r3
   d4f36:	d374      	bcc.n	d5022 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x266>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d4f38:	2000      	movs	r0, #0
            redir_port = it.asLong();
   d4f3a:	b284      	uxth	r4, r0
   d4f3c:	e000      	b.n	d4f40 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x184>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d4f3e:	2450      	movs	r4, #80	; 0x50
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4f40:	6828      	ldr	r0, [r5, #0]
   d4f42:	f004 f90d 	bl	d9160 <_ZN9TCPClient4stopEv>
        strncpy(redir_serv, it.asStr(), 32);
        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d4f46:	682b      	ldr	r3, [r5, #0]
   d4f48:	68aa      	ldr	r2, [r5, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d4f4a:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4f4c:	871c      	strh	r4, [r3, #56]	; 0x38
        state = CONNECTING;
   d4f4e:	2300      	movs	r3, #0
   d4f50:	776b      	strb	r3, [r5, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4f52:	f002 f841 	bl	d6fd8 <_Z11BlynkMillisv>
   d4f56:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4f5a:	3808      	subs	r0, #8
   d4f5c:	6128      	str	r0, [r5, #16]
   d4f5e:	60e8      	str	r0, [r5, #12]
   d4f60:	6168      	str	r0, [r5, #20]
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d4f62:	2001      	movs	r0, #1
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
   d4f64:	e059      	b.n	d501a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25e>
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d4f66:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
   d4f68:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d4f6c:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4f70:	836b      	strh	r3, [r5, #26]
        this->processCmd(inputBuffer, hdr.length);
   d4f72:	4628      	mov	r0, r5
   d4f74:	4631      	mov	r1, r6
   d4f76:	f7ff fde5 	bl	d4b44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d4f7a:	2300      	movs	r3, #0
   d4f7c:	836b      	strh	r3, [r5, #26]
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d4f7e:	2001      	movs	r0, #1
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
        this->processCmd(inputBuffer, hdr.length);
        msgIdOutOverride = 0;
    } break;
   d4f80:	e04b      	b.n	d501a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25e>
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4f82:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d4f86:	713c      	strb	r4, [r7, #4]
   d4f88:	4433      	add	r3, r6
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d4f8a:	429e      	cmp	r6, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4f8c:	617e      	str	r6, [r7, #20]
   d4f8e:	61bb      	str	r3, [r7, #24]
   d4f90:	d242      	bcs.n	d5018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25c>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d4f92:	6830      	ldr	r0, [r6, #0]
   d4f94:	60b8      	str	r0, [r7, #8]

        ++it;
   d4f96:	f107 0014 	add.w	r0, r7, #20
   d4f9a:	f7ff f9ad 	bl	d42f8 <_ZN10BlynkParam8iteratorppEv>
   d4f9e:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d4fa0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d4fa4:	61fa      	str	r2, [r7, #28]
   d4fa6:	1b96      	subs	r6, r2, r6
   d4fa8:	1b9e      	subs	r6, r3, r6
        BlynkParam param2(start, length);

        switch (cmd32) {
   d4faa:	4a21      	ldr	r2, [pc, #132]	; (d5030 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x274>)
   d4fac:	68bb      	ldr	r3, [r7, #8]
   d4fae:	623e      	str	r6, [r7, #32]
   d4fb0:	4293      	cmp	r3, r2
   d4fb2:	627e      	str	r6, [r7, #36]	; 0x24
   d4fb4:	d01d      	beq.n	d4ff2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x236>
   d4fb6:	d80b      	bhi.n	d4fd0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x214>
   d4fb8:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
   d4fbc:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   d4fc0:	4293      	cmp	r3, r2
   d4fc2:	d129      	bne.n	d5018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d4fc4:	f107 011c 	add.w	r1, r7, #28
   d4fc8:	1d38      	adds	r0, r7, #4
   d4fca:	f002 f80a 	bl	d6fe2 <BlynkWidgetWrite>
   d4fce:	e023      	b.n	d5018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25c>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d4fd0:	4a18      	ldr	r2, [pc, #96]	; (d5034 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x278>)
   d4fd2:	4293      	cmp	r3, r2
   d4fd4:	d013      	beq.n	d4ffe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d4fd6:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d4fda:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d4fde:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d4fe2:	4293      	cmp	r3, r2
   d4fe4:	d118      	bne.n	d5018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d4fe6:	f107 011c 	add.w	r1, r7, #28
   d4fea:	1d38      	adds	r0, r7, #4
   d4fec:	f001 fff9 	bl	d6fe2 <BlynkWidgetWrite>
   d4ff0:	e012      	b.n	d5018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25c>
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d4ff2:	f107 011c 	add.w	r1, r7, #28
   d4ff6:	1d38      	adds	r0, r7, #4
   d4ff8:	f001 fff3 	bl	d6fe2 <BlynkWidgetWrite>
   d4ffc:	e00c      	b.n	d5018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d4ffe:	f107 011c 	add.w	r1, r7, #28
   d5002:	1d38      	adds	r0, r7, #4
   d5004:	f001 ffed 	bl	d6fe2 <BlynkWidgetWrite>
   d5008:	e006      	b.n	d5018 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25c>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
   d500a:	4628      	mov	r0, r5
   d500c:	f7ff fd90 	bl	d4b30 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
    } break;
    }

    return true;
   d5010:	2001      	movs	r0, #1
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
    } break;
   d5012:	e002      	b.n	d501a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
   d5014:	4620      	mov	r0, r4
   d5016:	e000      	b.n	d501a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x25e>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d5018:	2001      	movs	r0, #1
   d501a:	46c5      	mov	sp, r8
   d501c:	e004      	b.n	d5028 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d501e:	2001      	movs	r0, #1
   d5020:	e002      	b.n	d5028 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x26c>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d5022:	f005 fa21 	bl	da468 <atol>
   d5026:	e788      	b.n	d4f3a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17e>
        internalReconnect();
    } break;
    }

    return true;
}
   d5028:	3728      	adds	r7, #40	; 0x28
   d502a:	46bd      	mov	sp, r7
   d502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5030:	00637472 	.word	0x00637472
   d5034:	6e6f6361 	.word	0x6e6f6361

000d5038 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d5038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d503c:	4604      	mov	r4, r0
   d503e:	b08a      	sub	sp, #40	; 0x28
   d5040:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d5042:	f7ff f943 	bl	d42cc <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d5046:	7f63      	ldrb	r3, [r4, #29]
   d5048:	2b02      	cmp	r3, #2
   d504a:	f000 80a0 	beq.w	d518e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x156>
      avg -= 1;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d504e:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d5050:	8b62      	ldrh	r2, [r4, #26]
   d5052:	3301      	adds	r3, #1
   d5054:	b2db      	uxtb	r3, r3
   d5056:	7723      	strb	r3, [r4, #28]
   d5058:	2a00      	cmp	r2, #0
   d505a:	d141      	bne.n	d50e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d505c:	2b02      	cmp	r3, #2
   d505e:	d83f      	bhi.n	d50e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d5060:	6820      	ldr	r0, [r4, #0]
   d5062:	f003 fe8e 	bl	d8d82 <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d5066:	b140      	cbz	r0, d507a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x42>
        while (avail || conn.available() > 0) {
   d5068:	2d00      	cmp	r5, #0
   d506a:	f040 8092 	bne.w	d5192 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
    int available() { return client.available(); }
   d506e:	6820      	ldr	r0, [r4, #0]
   d5070:	f004 f88e 	bl	d9190 <_ZN9TCPClient9availableEv>
   d5074:	2800      	cmp	r0, #0
   d5076:	f300 808c 	bgt.w	d5192 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x15a>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d507a:	f001 ffad 	bl	d6fd8 <_Z11BlynkMillisv>
   d507e:	4606      	mov	r6, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d5080:	6820      	ldr	r0, [r4, #0]
   d5082:	f003 fe7e 	bl	d8d82 <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d5086:	7f67      	ldrb	r7, [r4, #29]
   d5088:	2f01      	cmp	r7, #1
   d508a:	4605      	mov	r5, r0
   d508c:	d12a      	bne.n	d50e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xac>
        if (!tconn) {
   d508e:	b920      	cbnz	r0, d509a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d5090:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d5092:	4620      	mov	r0, r4
   d5094:	f7ff fd4c 	bl	d4b30 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d5098:	e075      	b.n	d5186 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x14e>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d509a:	68e3      	ldr	r3, [r4, #12]
   d509c:	f644 2238 	movw	r2, #19000	; 0x4a38
   d50a0:	1af3      	subs	r3, r6, r3
   d50a2:	4293      	cmp	r3, r2
   d50a4:	d904      	bls.n	d50b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x78>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d50a6:	4620      	mov	r0, r4
   d50a8:	f7ff fd42 	bl	d4b30 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d50ac:	2500      	movs	r5, #0
   d50ae:	e06a      	b.n	d5186 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x14e>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d50b0:	f242 7210 	movw	r2, #10000	; 0x2710
   d50b4:	4293      	cmp	r3, r2
   d50b6:	d803      	bhi.n	d50c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x88>
   d50b8:	6923      	ldr	r3, [r4, #16]
   d50ba:	1af3      	subs	r3, r6, r3
   d50bc:	4293      	cmp	r3, r2
   d50be:	d90f      	bls.n	d50e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d50c0:	6963      	ldr	r3, [r4, #20]
   d50c2:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d50c6:	1af3      	subs	r3, r6, r3
   d50c8:	4293      	cmp	r3, r2
   d50ca:	d909      	bls.n	d50e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d50cc:	2300      	movs	r3, #0
   d50ce:	9302      	str	r3, [sp, #8]
   d50d0:	9301      	str	r3, [sp, #4]
   d50d2:	9300      	str	r3, [sp, #0]
   d50d4:	461a      	mov	r2, r3
   d50d6:	2106      	movs	r1, #6
   d50d8:	4620      	mov	r0, r4
   d50da:	f000 f9a9 	bl	d5430 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d50de:	6166      	str	r6, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d50e0:	2501      	movs	r5, #1
   d50e2:	e050      	b.n	d5186 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x14e>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d50e4:	2f00      	cmp	r7, #0
   d50e6:	d1fb      	bne.n	d50e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d50e8:	6962      	ldr	r2, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d50ea:	b150      	cbz	r0, d5102 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
   d50ec:	1ab6      	subs	r6, r6, r2
   d50ee:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d50f2:	429e      	cmp	r6, r3
   d50f4:	d9f4      	bls.n	d50e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d50f6:	6820      	ldr	r0, [r4, #0]
   d50f8:	f004 f832 	bl	d9160 <_ZN9TCPClient4stopEv>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
            return false;
   d50fc:	463d      	mov	r5, r7
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
   d50fe:	7767      	strb	r7, [r4, #29]
            return false;
   d5100:	e041      	b.n	d5186 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x14e>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d5102:	1ab2      	subs	r2, r6, r2
   d5104:	f241 3388 	movw	r3, #5000	; 0x1388
   d5108:	429a      	cmp	r2, r3
   d510a:	d9e9      	bls.n	d50e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d510c:	6820      	ldr	r0, [r4, #0]
   d510e:	f004 f827 	bl	d9160 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d5112:	f8d4 e000 	ldr.w	lr, [r4]
        domain = d;
        port = p;
    }

    bool connect() {
        if (domain) {
   d5116:	f8de c034 	ldr.w	ip, [lr, #52]	; 0x34
   d511a:	f8be 8038 	ldrh.w	r8, [lr, #56]	; 0x38
   d511e:	f1bc 0f00 	cmp.w	ip, #0
   d5122:	d009      	beq.n	d5138 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x100>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
            return (1 == client.connect(domain, port));
   d5124:	462b      	mov	r3, r5
   d5126:	4642      	mov	r2, r8
   d5128:	4661      	mov	r1, ip
   d512a:	4670      	mov	r0, lr
   d512c:	f003 fe56 	bl	d8ddc <_ZN9TCPClient7connectEPKctm>
   d5130:	1e42      	subs	r2, r0, #1
   d5132:	4255      	negs	r5, r2
   d5134:	4155      	adcs	r5, r2
   d5136:	e011      	b.n	d515c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x124>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5138:	4b1e      	ldr	r3, [pc, #120]	; (d51b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x17c>)
   d513a:	9304      	str	r3, [sp, #16]
   d513c:	f10e 0720 	add.w	r7, lr, #32
   d5140:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d5142:	ad05      	add	r5, sp, #20
   d5144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5146:	683b      	ldr	r3, [r7, #0]
   d5148:	702b      	strb	r3, [r5, #0]
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
   d514a:	4642      	mov	r2, r8
   d514c:	4663      	mov	r3, ip
   d514e:	a904      	add	r1, sp, #16
   d5150:	4670      	mov	r0, lr
   d5152:	f003 ff88 	bl	d9066 <_ZN9TCPClient7connectE9IPAddresstm>
   d5156:	1e43      	subs	r3, r0, #1
   d5158:	425d      	negs	r5, r3
   d515a:	415d      	adcs	r5, r3
   d515c:	b90d      	cbnz	r5, d5162 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x12a>
                lastLogin = t;
   d515e:	6166      	str	r6, [r4, #20]
                return false;
   d5160:	e011      	b.n	d5186 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x14e>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d5162:	6867      	ldr	r7, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d5164:	2601      	movs	r6, #1
   d5166:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d5168:	4638      	mov	r0, r7
   d516a:	f005 faf0 	bl	da74e <strlen>
   d516e:	2300      	movs	r3, #0
   d5170:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5174:	9302      	str	r3, [sp, #8]
   d5176:	4632      	mov	r2, r6
   d5178:	463b      	mov	r3, r7
   d517a:	2102      	movs	r1, #2
   d517c:	4620      	mov	r0, r4
   d517e:	f000 f957 	bl	d5430 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d5182:	6923      	ldr	r3, [r4, #16]
   d5184:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d5186:	7f23      	ldrb	r3, [r4, #28]
   d5188:	3b01      	subs	r3, #1
   d518a:	7723      	strb	r3, [r4, #28]
   d518c:	e00e      	b.n	d51ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x174>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d518e:	2500      	movs	r5, #0
   d5190:	e00c      	b.n	d51ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x174>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d5192:	4620      	mov	r0, r4
   d5194:	f7ff fe12 	bl	d4dbc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d5198:	4605      	mov	r5, r0
   d519a:	2800      	cmp	r0, #0
   d519c:	f47f af67 	bne.w	d506e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x36>
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d51a0:	6820      	ldr	r0, [r4, #0]
   d51a2:	f003 ffdd 	bl	d9160 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d51a6:	f001 ff1d 	bl	d6fe4 <BlynkNoOpCbk>
                return false;
   d51aa:	e7ec      	b.n	d5186 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x14e>
            return true;
        }
#endif
    }
    return true;
}
   d51ac:	4628      	mov	r0, r5
   d51ae:	b00a      	add	sp, #40	; 0x28
   d51b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d51b4:	000dbce8 	.word	0x000dbce8

000d51b8 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d51b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d51bc:	4614      	mov	r4, r2
   d51be:	b08c      	sub	sp, #48	; 0x30
   d51c0:	4605      	mov	r5, r0
   d51c2:	3404      	adds	r4, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d51c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d51c8:	460f      	mov	r7, r1
   d51ca:	4698      	mov	r8, r3
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d51cc:	f001 ff02 	bl	d6fd4 <_Z10BlynkDelaym>
   d51d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d51d2:	ae01      	add	r6, sp, #4
   d51d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d51d6:	6823      	ldr	r3, [r4, #0]
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d51d8:	606f      	str	r7, [r5, #4]
   d51da:	7033      	strb	r3, [r6, #0]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d51dc:	f001 fefc 	bl	d6fd8 <_Z11BlynkMillisv>
   d51e0:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d51e4:	3808      	subs	r0, #8
   d51e6:	af01      	add	r7, sp, #4
   d51e8:	6128      	str	r0, [r5, #16]
   d51ea:	60e8      	str	r0, [r5, #12]
   d51ec:	6168      	str	r0, [r5, #20]
   d51ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d51f0:	ae07      	add	r6, sp, #28
   d51f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d51f4:	683b      	ldr	r3, [r7, #0]
   d51f6:	7033      	strb	r3, [r6, #0]
   d51f8:	af07      	add	r7, sp, #28
   d51fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    void config(const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(addr, port);
   d51fc:	682c      	ldr	r4, [r5, #0]
    BlynkTransportParticle()
        : domain(NULL), port(0)
    {}

    void begin(IPAddress a, uint16_t p) {
        domain = NULL;
   d51fe:	f04f 0e00 	mov.w	lr, #0
   d5202:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
        port = p;
   d5206:	f8a4 8038 	strh.w	r8, [r4, #56]	; 0x38
   d520a:	3420      	adds	r4, #32
   d520c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d520e:	6833      	ldr	r3, [r6, #0]
   d5210:	7023      	strb	r3, [r4, #0]

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d5212:	f242 3627 	movw	r6, #8999	; 0x2327

    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
   d5216:	4674      	mov	r4, lr
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5218:	6828      	ldr	r0, [r5, #0]
   d521a:	f003 ffa1 	bl	d9160 <_ZN9TCPClient4stopEv>
   d521e:	776c      	strb	r4, [r5, #29]
        millis_time_t started = BlynkMillis();
   d5220:	f001 feda 	bl	d6fd8 <_Z11BlynkMillisv>
   d5224:	4607      	mov	r7, r0
        while ((state != CONNECTED) &&
   d5226:	7f6b      	ldrb	r3, [r5, #29]
   d5228:	2b01      	cmp	r3, #1
   d522a:	d009      	beq.n	d5240 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
               (BlynkMillis() - started < timeout))
   d522c:	f001 fed4 	bl	d6fd8 <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d5230:	1bc0      	subs	r0, r0, r7
   d5232:	42b0      	cmp	r0, r6
   d5234:	d804      	bhi.n	d5240 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
               (BlynkMillis() - started < timeout))
        {
            run();
   d5236:	2100      	movs	r1, #0
   d5238:	4628      	mov	r0, r5
   d523a:	f7ff fefd 	bl	d5038 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d523e:	e7f2      	b.n	d5226 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
        config(auth, addr, port);
        while(this->connect() != true) {}
   d5240:	7f6b      	ldrb	r3, [r5, #29]
   d5242:	2b01      	cmp	r3, #1
   d5244:	d1e8      	bne.n	d5218 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d5246:	b00c      	add	sp, #48	; 0x30
   d5248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d524c <setup>:
    String minute = String::format("%02i",Time.minute(now));
    return hour + ":" + minute;
}

void setup(void)
{
   d524c:	b570      	push	{r4, r5, r6, lr}
   d524e:	b08a      	sub	sp, #40	; 0x28
  Serial.begin(9600);
   d5250:	f004 f9d4 	bl	d95fc <_Z16_fetch_usbserialv>
   d5254:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5258:	f004 f9c4 	bl	d95e4 <_ZN9USBSerial5beginEl>
  if(!bno.begin())
   d525c:	210c      	movs	r1, #12
   d525e:	485b      	ldr	r0, [pc, #364]	; (d53cc <setup+0x180>)
   d5260:	f000 ff61 	bl	d6126 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>
   d5264:	b900      	cbnz	r0, d5268 <setup+0x1c>
   d5266:	e7fe      	b.n	d5266 <setup+0x1a>
  {
    while(1);
    Serial.println("not working");
  }
  delay(1000);
   d5268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d526c:	f002 fdec 	bl	d7e48 <delay>
  bno.setExtCrystalUse(true);
   d5270:	2101      	movs	r1, #1
   d5272:	4856      	ldr	r0, [pc, #344]	; (d53cc <setup+0x180>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5274:	4e56      	ldr	r6, [pc, #344]	; (d53d0 <setup+0x184>)
	    _M_manager = &_My_handler::_M_manager;
   d5276:	4d57      	ldr	r5, [pc, #348]	; (d53d4 <setup+0x188>)
   d5278:	f000 ff18 	bl	d60ac <_ZN15Adafruit_BNO05516setExtCrystalUseEb>
  pinMode(A3, OUTPUT);
   d527c:	2101      	movs	r1, #1
   d527e:	2010      	movs	r0, #16
   d5280:	f004 faae 	bl	d97e0 <pinMode>
  Serial.println("complete");
   d5284:	f004 f9ba 	bl	d95fc <_Z16_fetch_usbserialv>
   d5288:	4953      	ldr	r1, [pc, #332]	; (d53d8 <setup+0x18c>)
   d528a:	f003 fb26 	bl	d88da <_ZN5Print7printlnEPKc>
  matrix.begin();
   d528e:	4853      	ldr	r0, [pc, #332]	; (d53dc <setup+0x190>)
   d5290:	f002 f825 	bl	d72de <_ZN17Adafruit_NeoPixel5beginEv>
  matrix.setTextWrap(false);
   d5294:	2100      	movs	r1, #0
   d5296:	4852      	ldr	r0, [pc, #328]	; (d53e0 <setup+0x194>)
   d5298:	f001 fa5d 	bl	d6756 <_ZN12Adafruit_GFX11setTextWrapEb>
  matrix.setBrightness(30);
   d529c:	211e      	movs	r1, #30
   d529e:	484f      	ldr	r0, [pc, #316]	; (d53dc <setup+0x190>)
   d52a0:	f002 fa48 	bl	d7734 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  matrix.setTextColor(matrix.Color(80,255,0));
   d52a4:	2200      	movs	r2, #0
   d52a6:	21ff      	movs	r1, #255	; 0xff
   d52a8:	2050      	movs	r0, #80	; 0x50
   d52aa:	f001 ffdd 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d52ae:	4601      	mov	r1, r0
   d52b0:	484b      	ldr	r0, [pc, #300]	; (d53e0 <setup+0x194>)
   d52b2:	f001 fa4d 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
  matrix_1.begin();
   d52b6:	484b      	ldr	r0, [pc, #300]	; (d53e4 <setup+0x198>)
   d52b8:	f002 f811 	bl	d72de <_ZN17Adafruit_NeoPixel5beginEv>
  matrix_1.setTextWrap(false);
   d52bc:	2100      	movs	r1, #0
   d52be:	484a      	ldr	r0, [pc, #296]	; (d53e8 <setup+0x19c>)
   d52c0:	f001 fa49 	bl	d6756 <_ZN12Adafruit_GFX11setTextWrapEb>
  matrix_1.setBrightness(30);
   d52c4:	211e      	movs	r1, #30
   d52c6:	4847      	ldr	r0, [pc, #284]	; (d53e4 <setup+0x198>)
   d52c8:	f002 fa34 	bl	d7734 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  matrix_1.setTextColor(matrix.Color(80,255,0));
   d52cc:	2200      	movs	r2, #0
   d52ce:	21ff      	movs	r1, #255	; 0xff
   d52d0:	2050      	movs	r0, #80	; 0x50
   d52d2:	f001 ffc9 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d52d6:	4601      	mov	r1, r0
   d52d8:	4843      	ldr	r0, [pc, #268]	; (d53e8 <setup+0x19c>)
   d52da:	f001 fa39 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
  updateTimer.SetCallback(OnTimer);
   d52de:	4943      	ldr	r1, [pc, #268]	; (d53ec <setup+0x1a0>)
   d52e0:	4843      	ldr	r0, [pc, #268]	; (d53f0 <setup+0x1a4>)
   d52e2:	f001 fe73 	bl	d6fcc <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>
  Blynk.begin("8d7cb678e67a48d49e443ce542cbf215",IPAddress(167,99,150,124),8080);
   d52e6:	237c      	movs	r3, #124	; 0x7c
   d52e8:	9300      	str	r3, [sp, #0]
   d52ea:	2263      	movs	r2, #99	; 0x63
   d52ec:	2396      	movs	r3, #150	; 0x96
   d52ee:	21a7      	movs	r1, #167	; 0xa7
   d52f0:	a804      	add	r0, sp, #16
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d52f2:	2400      	movs	r4, #0
   d52f4:	f003 f984 	bl	d8600 <_ZN9IPAddressC1Ehhhh>
   d52f8:	f641 7390 	movw	r3, #8080	; 0x1f90
   d52fc:	aa04      	add	r2, sp, #16
   d52fe:	493d      	ldr	r1, [pc, #244]	; (d53f4 <setup+0x1a8>)
   d5300:	483d      	ldr	r0, [pc, #244]	; (d53f8 <setup+0x1ac>)
   d5302:	f7ff ff59 	bl	d51b8 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
   d5306:	2301      	movs	r3, #1
   d5308:	4622      	mov	r2, r4
   d530a:	493c      	ldr	r1, [pc, #240]	; (d53fc <setup+0x1b0>)
   d530c:	9401      	str	r4, [sp, #4]
   d530e:	9400      	str	r4, [sp, #0]
   d5310:	483b      	ldr	r0, [pc, #236]	; (d5400 <setup+0x1b4>)
   d5312:	f002 fcd9 	bl	d7cc8 <spark_subscribe>
   d5316:	4623      	mov	r3, r4
   d5318:	4622      	mov	r2, r4
   d531a:	493a      	ldr	r1, [pc, #232]	; (d5404 <setup+0x1b8>)
   d531c:	9401      	str	r4, [sp, #4]
   d531e:	9400      	str	r4, [sp, #0]
   d5320:	4839      	ldr	r0, [pc, #228]	; (d5408 <setup+0x1bc>)
   d5322:	f002 fcd1 	bl	d7cc8 <spark_subscribe>
   d5326:	4623      	mov	r3, r4
   d5328:	4622      	mov	r2, r4
   d532a:	4938      	ldr	r1, [pc, #224]	; (d540c <setup+0x1c0>)
   d532c:	9401      	str	r4, [sp, #4]
   d532e:	9400      	str	r4, [sp, #0]
   d5330:	4837      	ldr	r0, [pc, #220]	; (d5410 <setup+0x1c4>)
   d5332:	f002 fcc9 	bl	d7cc8 <spark_subscribe>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d5336:	4b37      	ldr	r3, [pc, #220]	; (d5414 <setup+0x1c8>)
   d5338:	9304      	str	r3, [sp, #16]
  Particle.subscribe("particle/device/ip", ipHandler);//subscribes to global IP get
  Particle.subscribe("hook-response/geoip", geoIpHandler, MY_DEVICES);
  Particle.subscribe("hook-response/tempRead", tempHandler, MY_DEVICES);
  weather = Thread("name", weatherFunction);
   d533a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d533e:	9300      	str	r3, [sp, #0]
   d5340:	aa04      	add	r2, sp, #16
   d5342:	2302      	movs	r3, #2
   d5344:	4934      	ldr	r1, [pc, #208]	; (d5418 <setup+0x1cc>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5346:	9607      	str	r6, [sp, #28]
   d5348:	a803      	add	r0, sp, #12
	    _M_manager = &_My_handler::_M_manager;
   d534a:	9506      	str	r5, [sp, #24]
   d534c:	f7fe ff60 	bl	d4210 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5350:	4b32      	ldr	r3, [pc, #200]	; (d541c <setup+0x1d0>)
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5352:	9a03      	ldr	r2, [sp, #12]
   d5354:	6818      	ldr	r0, [r3, #0]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d5356:	9403      	str	r4, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5358:	601a      	str	r2, [r3, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d535a:	b108      	cbz	r0, d5360 <setup+0x114>
	  get_deleter()(__p);
   d535c:	f7fe ff26 	bl	d41ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.16>
   d5360:	a803      	add	r0, sp, #12
   d5362:	f7fe ff36 	bl	d41d2 <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5366:	a804      	add	r0, sp, #16
   d5368:	f7fe ff17 	bl	d419a <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d536c:	4b2c      	ldr	r3, [pc, #176]	; (d5420 <setup+0x1d4>)
   d536e:	9304      	str	r3, [sp, #16]
  main = Thread("nubeds", mainFunction);
   d5370:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d5374:	9300      	str	r3, [sp, #0]
   d5376:	aa04      	add	r2, sp, #16
   d5378:	2302      	movs	r3, #2
   d537a:	492a      	ldr	r1, [pc, #168]	; (d5424 <setup+0x1d8>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d537c:	9607      	str	r6, [sp, #28]
   d537e:	a803      	add	r0, sp, #12
	    _M_manager = &_My_handler::_M_manager;
   d5380:	9506      	str	r5, [sp, #24]
   d5382:	f7fe ff45 	bl	d4210 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d5386:	2300      	movs	r3, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5388:	9a03      	ldr	r2, [sp, #12]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d538a:	9303      	str	r3, [sp, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d538c:	4b26      	ldr	r3, [pc, #152]	; (d5428 <setup+0x1dc>)
   d538e:	6818      	ldr	r0, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5390:	601a      	str	r2, [r3, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5392:	b108      	cbz	r0, d5398 <setup+0x14c>
	  get_deleter()(__p);
   d5394:	f7fe ff0a 	bl	d41ac <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.16>
   d5398:	a803      	add	r0, sp, #12
   d539a:	f7fe ff1a 	bl	d41d2 <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d539e:	a804      	add	r0, sp, #16
   d53a0:	f7fe fefb 	bl	d419a <_ZNSt14_Function_baseD1Ev>
  pinMode(A0, OUTPUT);
   d53a4:	2101      	movs	r1, #1
   d53a6:	2013      	movs	r0, #19
   d53a8:	f004 fa1a 	bl	d97e0 <pinMode>
  pinMode(A1, OUTPUT);
   d53ac:	2101      	movs	r1, #1
   d53ae:	2012      	movs	r0, #18
   d53b0:	f004 fa16 	bl	d97e0 <pinMode>
  pinMode(D2, OUTPUT);
   d53b4:	2101      	movs	r1, #1
   d53b6:	2002      	movs	r0, #2
   d53b8:	f004 fa12 	bl	d97e0 <pinMode>
  strip.begin();
   d53bc:	481b      	ldr	r0, [pc, #108]	; (d542c <setup+0x1e0>)
   d53be:	f001 ff8e 	bl	d72de <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
   d53c2:	481a      	ldr	r0, [pc, #104]	; (d542c <setup+0x1e0>)
   d53c4:	f001 ffc2 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
}
   d53c8:	b00a      	add	sp, #40	; 0x28
   d53ca:	bd70      	pop	{r4, r5, r6, pc}
   d53cc:	2003dd48 	.word	0x2003dd48
   d53d0:	000d40e5 	.word	0x000d40e5
   d53d4:	000d40e9 	.word	0x000d40e9
   d53d8:	000db162 	.word	0x000db162
   d53dc:	2003dcb4 	.word	0x2003dcb4
   d53e0:	2003dc98 	.word	0x2003dc98
   d53e4:	2003dd00 	.word	0x2003dd00
   d53e8:	2003dce4 	.word	0x2003dce4
   d53ec:	000d40cd 	.word	0x000d40cd
   d53f0:	2003dc48 	.word	0x2003dc48
   d53f4:	000db16b 	.word	0x000db16b
   d53f8:	2003e334 	.word	0x2003e334
   d53fc:	000d4135 	.word	0x000d4135
   d5400:	000db0b2 	.word	0x000db0b2
   d5404:	000d4ad1 	.word	0x000d4ad1
   d5408:	000db18c 	.word	0x000db18c
   d540c:	000d4a59 	.word	0x000d4a59
   d5410:	000db1a0 	.word	0x000db1a0
   d5414:	000d4979 	.word	0x000d4979
   d5418:	000db1b7 	.word	0x000db1b7
   d541c:	2003dc58 	.word	0x2003dc58
   d5420:	000d5879 	.word	0x000d5879
   d5424:	000db1bc 	.word	0x000db1bc
   d5428:	2003dce0 	.word	0x2003dce0
   d542c:	2003dd34 	.word	0x2003dd34

000d5430 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d5430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5434:	b083      	sub	sp, #12
   d5436:	af00      	add	r7, sp, #0
   d5438:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d543a:	6800      	ldr	r0, [r0, #0]
   d543c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d543e:	4689      	mov	r9, r1
   d5440:	4616      	mov	r6, r2
   d5442:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d5444:	46ea      	mov	sl, sp
   d5446:	f003 fc9c 	bl	d8d82 <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
   d544a:	2800      	cmp	r0, #0
   d544c:	d060      	beq.n	d5510 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
   d544e:	f019 0ffd 	tst.w	r9, #253	; 0xfd
   d5452:	f000 809e 	beq.w	d5592 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x162>
   d5456:	f1b9 0f06 	cmp.w	r9, #6
   d545a:	f000 809a 	beq.w	d5592 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x162>
   d545e:	7f63      	ldrb	r3, [r4, #29]
   d5460:	2b01      	cmp	r3, #1
   d5462:	d155      	bne.n	d5510 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d5464:	b916      	cbnz	r6, d546c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d5466:	8b66      	ldrh	r6, [r4, #26]
   d5468:	2e00      	cmp	r6, #0
   d546a:	d053      	beq.n	d5514 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe4>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d546c:	f1a9 030c 	sub.w	r3, r9, #12
   d5470:	2b08      	cmp	r3, #8
   d5472:	d957      	bls.n	d5524 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf4>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d5474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d5476:	f1bb 0f00 	cmp.w	fp, #0
   d547a:	bf14      	ite	ne
   d547c:	46a8      	movne	r8, r5
   d547e:	f04f 0800 	moveq.w	r8, #0
   d5482:	2a00      	cmp	r2, #0
   d5484:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d5486:	f108 0305 	add.w	r3, r8, #5
   d548a:	bf14      	ite	ne
   d548c:	4690      	movne	r8, r2
   d548e:	f04f 0800 	moveq.w	r8, #0
   d5492:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d5494:	f108 0307 	add.w	r3, r8, #7
   d5498:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d549c:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d549e:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d54a2:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d54a6:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d54a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d54ac:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d54b0:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d54b4:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d54b8:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d54bc:	f1bb 0f00 	cmp.w	fp, #0
   d54c0:	d04f      	beq.n	d5562 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x132>
   d54c2:	2d00      	cmp	r5, #0
   d54c4:	d04d      	beq.n	d5562 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x132>
        memcpy(buff + pos, data, length);
   d54c6:	462a      	mov	r2, r5
   d54c8:	4659      	mov	r1, fp
   d54ca:	f10d 0005 	add.w	r0, sp, #5
   d54ce:	f005 f8d5 	bl	da67c <memcpy>
        pos += length;
   d54d2:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d54d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d54d6:	2b00      	cmp	r3, #0
   d54d8:	d145      	bne.n	d5566 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x136>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d54da:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d54dc:	4545      	cmp	r5, r8
   d54de:	d24e      	bcs.n	d557e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14e>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d54e0:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d54e4:	687b      	ldr	r3, [r7, #4]
   d54e6:	6820      	ldr	r0, [r4, #0]
   d54e8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d54ec:	bf28      	it	cs
   d54ee:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d54f2:	1959      	adds	r1, r3, r5
   d54f4:	f003 fc2f 	bl	d8d56 <_ZN9TCPClient5writeEPKhj>
   d54f8:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d54fa:	2000      	movs	r0, #0
   d54fc:	f001 fd6a 	bl	d6fd4 <_Z10BlynkDelaym>
        if (w == 0) {
   d5500:	2e00      	cmp	r6, #0
   d5502:	d13a      	bne.n	d557a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d5504:	6820      	ldr	r0, [r4, #0]
   d5506:	f003 fe2b 	bl	d9160 <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
   d550a:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d550c:	f001 fd6a 	bl	d6fe4 <BlynkNoOpCbk>
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d5510:	46d5      	mov	sp, sl
   d5512:	e042      	b.n	d559a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x16a>
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d5514:	8b23      	ldrh	r3, [r4, #24]
   d5516:	3301      	adds	r3, #1
   d5518:	b29b      	uxth	r3, r3
   d551a:	b903      	cbnz	r3, d551e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        msgIdOut = 1;
   d551c:	2301      	movs	r3, #1
   d551e:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d5520:	8b26      	ldrh	r6, [r4, #24]
   d5522:	e7a3      	b.n	d546c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d5524:	68e3      	ldr	r3, [r4, #12]
   d5526:	6922      	ldr	r2, [r4, #16]
   d5528:	4293      	cmp	r3, r2
   d552a:	bf38      	it	cc
   d552c:	4613      	movcc	r3, r2
   d552e:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d5532:	f001 fd51 	bl	d6fd8 <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d5536:	ebc0 0008 	rsb	r0, r0, r8
   d553a:	2800      	cmp	r0, #0
   d553c:	db0a      	blt.n	d5554 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x124>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d553e:	2100      	movs	r1, #0
   d5540:	4620      	mov	r0, r4
   d5542:	f7ff fd79 	bl	d5038 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d5546:	f001 fd47 	bl	d6fd8 <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d554a:	ebc0 0008 	rsb	r0, r0, r8
   d554e:	2800      	cmp	r0, #0
   d5550:	daf5      	bge.n	d553e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x10e>
   d5552:	e78f      	b.n	d5474 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d5554:	7f21      	ldrb	r1, [r4, #28]
   d5556:	2900      	cmp	r1, #0
   d5558:	d18c      	bne.n	d5474 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
            run();
   d555a:	4620      	mov	r0, r4
   d555c:	f7ff fd6c 	bl	d5038 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d5560:	e788      	b.n	d5474 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d5562:	2005      	movs	r0, #5
   d5564:	e7b6      	b.n	d54d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa4>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d5566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d5568:	2b00      	cmp	r3, #0
   d556a:	d0b6      	beq.n	d54da <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
        memcpy(buff + pos, data2, length2);
   d556c:	461a      	mov	r2, r3
   d556e:	687b      	ldr	r3, [r7, #4]
   d5570:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d5572:	4418      	add	r0, r3
   d5574:	f005 f882 	bl	da67c <memcpy>
   d5578:	e7af      	b.n	d54da <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d557a:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d557c:	e7ae      	b.n	d54dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        }
    }

#endif

    if (wlen != full_length) {
   d557e:	d003      	beq.n	d5588 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
   d5580:	4620      	mov	r0, r4
   d5582:	f7ff fad5 	bl	d4b30 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d5586:	e7c3      	b.n	d5510 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
    }

    lastActivityOut = BlynkMillis();
   d5588:	f001 fd26 	bl	d6fd8 <_Z11BlynkMillisv>
   d558c:	6120      	str	r0, [r4, #16]
   d558e:	46d5      	mov	sp, sl
   d5590:	e003      	b.n	d559a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x16a>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d5592:	2e00      	cmp	r6, #0
   d5594:	f47f af6e 	bne.w	d5474 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
   d5598:	e765      	b.n	d5466 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d559a:	370c      	adds	r7, #12
   d559c:	46bd      	mov	sp, r7
   d559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d55a4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d55a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len);
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len);
   d55a6:	2200      	movs	r2, #0
   d55a8:	2349      	movs	r3, #73	; 0x49
   d55aa:	9300      	str	r3, [sp, #0]
   d55ac:	9202      	str	r2, [sp, #8]
   d55ae:	9201      	str	r2, [sp, #4]
   d55b0:	4b03      	ldr	r3, [pc, #12]	; (d55c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
   d55b2:	2111      	movs	r1, #17
   d55b4:	f7ff ff3c 	bl	d5430 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d55b8:	b005      	add	sp, #20
   d55ba:	f85d fb04 	ldr.w	pc, [sp], #4
   d55be:	bf00      	nop
   d55c0:	000db030 	.word	0x000db030

000d55c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII8PinStateEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d55c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d55c6:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d55ca:	ab08      	add	r3, sp, #32
   d55cc:	2400      	movs	r4, #0
   d55ce:	4605      	mov	r5, r0
   d55d0:	460f      	mov	r7, r1
   d55d2:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d55d4:	a805      	add	r0, sp, #20
   d55d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d55da:	490e      	ldr	r1, [pc, #56]	; (d5614 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII8PinStateEEEviDpT_+0x50>)
   d55dc:	9307      	str	r3, [sp, #28]
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d55de:	4616      	mov	r6, r2
   d55e0:	9406      	str	r4, [sp, #24]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d55e2:	f7fe feb5 	bl	d4350 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d55e6:	4639      	mov	r1, r7
   d55e8:	a805      	add	r0, sp, #20
   d55ea:	f7fe fecd 	bl	d4388 <_ZN10BlynkParam3addEi>
#endif
#endif

    template<typename T, typename... Args>
    void add_multi(T last) {
        add(last);
   d55ee:	4631      	mov	r1, r6
   d55f0:	a805      	add	r0, sp, #20
   d55f2:	f7fe fec9 	bl	d4388 <_ZN10BlynkParam3addEi>
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d55f6:	9b06      	ldr	r3, [sp, #24]
   d55f8:	9402      	str	r4, [sp, #8]
   d55fa:	3b01      	subs	r3, #1
   d55fc:	9300      	str	r3, [sp, #0]
   d55fe:	9401      	str	r4, [sp, #4]
   d5600:	9b05      	ldr	r3, [sp, #20]
   d5602:	4622      	mov	r2, r4
   d5604:	2114      	movs	r1, #20
   d5606:	4628      	mov	r0, r5
   d5608:	f7ff ff12 	bl	d5430 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d560c:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d5610:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5612:	bf00      	nop
   d5614:	000db1c3 	.word	0x000db1c3

000d5618 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA13_cEEvRKT_>:
     * Sends a push notification to the App
     *
     * @param msg Text of the message
     */
    template<typename T>
    void notify(const T& msg) {
   d5618:	b530      	push	{r4, r5, lr}
   d561a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d561e:	ab08      	add	r3, sp, #32
   d5620:	2400      	movs	r4, #0
   d5622:	4605      	mov	r5, r0
   d5624:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
   d5626:	a805      	add	r0, sp, #20
   d5628:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d562c:	9307      	str	r3, [sp, #28]
   d562e:	9406      	str	r4, [sp, #24]
   d5630:	f7fe fe8e 	bl	d4350 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   d5634:	9b06      	ldr	r3, [sp, #24]
   d5636:	9402      	str	r4, [sp, #8]
   d5638:	3b01      	subs	r3, #1
   d563a:	9300      	str	r3, [sp, #0]
   d563c:	9401      	str	r4, [sp, #4]
   d563e:	9b05      	ldr	r3, [sp, #20]
   d5640:	4622      	mov	r2, r4
   d5642:	210e      	movs	r1, #14
   d5644:	4628      	mov	r0, r5
   d5646:	f7ff fef3 	bl	d5430 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d564a:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d564e:	bd30      	pop	{r4, r5, pc}

000d5650 <_Z5timerv>:
void OnTimer() {
  timerDone = true;
  timerOn = false;
}

void timer(){
   d5650:	b570      	push	{r4, r5, r6, lr}
  if (timerDone==true){
   d5652:	4b7e      	ldr	r3, [pc, #504]	; (d584c <_Z5timerv+0x1fc>)
   d5654:	6819      	ldr	r1, [r3, #0]
   d5656:	2901      	cmp	r1, #1
   d5658:	461d      	mov	r5, r3
   d565a:	f040 808d 	bne.w	d5778 <_Z5timerv+0x128>
    Blynk.virtualWrite(V1, LOW);
   d565e:	2200      	movs	r2, #0
   d5660:	487b      	ldr	r0, [pc, #492]	; (d5850 <_Z5timerv+0x200>)
    Blynk.notify("Time's UP!!!");
    x2 = matrix_1.width();
   d5662:	4c7c      	ldr	r4, [pc, #496]	; (d5854 <_Z5timerv+0x204>)
  timerOn = false;
}

void timer(){
  if (timerDone==true){
    Blynk.virtualWrite(V1, LOW);
   d5664:	f7ff ffae 	bl	d55c4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteII8PinStateEEEviDpT_>
    Blynk.notify("Time's UP!!!");
   d5668:	497b      	ldr	r1, [pc, #492]	; (d5858 <_Z5timerv+0x208>)
   d566a:	4879      	ldr	r0, [pc, #484]	; (d5850 <_Z5timerv+0x200>)
   d566c:	f7ff ffd4 	bl	d5618 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA13_cEEvRKT_>
    x2 = matrix_1.width();
   d5670:	487a      	ldr	r0, [pc, #488]	; (d585c <_Z5timerv+0x20c>)
   d5672:	f001 f872 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
   d5676:	2636      	movs	r6, #54	; 0x36
   d5678:	6020      	str	r0, [r4, #0]
    for(int i = 0;i<54;i++){
    matrix_1.fillScreen(0);
   d567a:	2100      	movs	r1, #0
   d567c:	4877      	ldr	r0, [pc, #476]	; (d585c <_Z5timerv+0x20c>)
   d567e:	f001 fce7 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
    matrix_1.setCursor(x2, 0);
   d5682:	2200      	movs	r2, #0
   d5684:	f9b4 1000 	ldrsh.w	r1, [r4]
   d5688:	4874      	ldr	r0, [pc, #464]	; (d585c <_Z5timerv+0x20c>)
   d568a:	f001 f85e 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
    tone(A1, 3401, 500); //connect two to D2
   d568e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d5692:	f640 5149 	movw	r1, #3401	; 0xd49
   d5696:	2012      	movs	r0, #18
   d5698:	f003 feb6 	bl	d9408 <tone>
    tone(A0, 3817, 500);
   d569c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d56a0:	f640 61e9 	movw	r1, #3817	; 0xee9
   d56a4:	2013      	movs	r0, #19
   d56a6:	f003 feaf 	bl	d9408 <tone>
    tone(A1, 3817, 500);
   d56aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d56ae:	f640 61e9 	movw	r1, #3817	; 0xee9
   d56b2:	2012      	movs	r0, #18
   d56b4:	f003 fea8 	bl	d9408 <tone>
    tone(A0, 3401, 500); // connect two to A5
   d56b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d56bc:	f640 5149 	movw	r1, #3401	; 0xd49
   d56c0:	2013      	movs	r0, #19
   d56c2:	f003 fea1 	bl	d9408 <tone>
    tone(D2, 2696, 500);
   d56c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d56ca:	f640 2188 	movw	r1, #2696	; 0xa88
   d56ce:	2002      	movs	r0, #2
   d56d0:	f003 fe9a 	bl	d9408 <tone>
    tone(D2, 1234, 500);
   d56d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d56d8:	f240 41d2 	movw	r1, #1234	; 0x4d2
   d56dc:	2002      	movs	r0, #2
   d56de:	f003 fe93 	bl	d9408 <tone>
    matrix_1.print(F("Time's Up   "));
   d56e2:	495f      	ldr	r1, [pc, #380]	; (d5860 <_Z5timerv+0x210>)
   d56e4:	485d      	ldr	r0, [pc, #372]	; (d585c <_Z5timerv+0x20c>)
   d56e6:	f003 f8e8 	bl	d88ba <_ZN5Print5printEPK19__FlashStringHelper>
    if(--x2 < -36) {
   d56ea:	6823      	ldr	r3, [r4, #0]
   d56ec:	3b01      	subs	r3, #1
   d56ee:	6023      	str	r3, [r4, #0]
   d56f0:	3324      	adds	r3, #36	; 0x24
   d56f2:	da0d      	bge.n	d5710 <_Z5timerv+0xc0>
        x2 = matrix_1.width();
   d56f4:	4859      	ldr	r0, [pc, #356]	; (d585c <_Z5timerv+0x20c>)
   d56f6:	f001 f830 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
   d56fa:	4b56      	ldr	r3, [pc, #344]	; (d5854 <_Z5timerv+0x204>)
        matrix_1.setTextColor(matrix_1.Color(80, 255, 0));
   d56fc:	21ff      	movs	r1, #255	; 0xff
    tone(A0, 3401, 500); // connect two to A5
    tone(D2, 2696, 500);
    tone(D2, 1234, 500);
    matrix_1.print(F("Time's Up   "));
    if(--x2 < -36) {
        x2 = matrix_1.width();
   d56fe:	6018      	str	r0, [r3, #0]
        matrix_1.setTextColor(matrix_1.Color(80, 255, 0));
   d5700:	2200      	movs	r2, #0
   d5702:	2050      	movs	r0, #80	; 0x50
   d5704:	f001 fdb0 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d5708:	4601      	mov	r1, r0
   d570a:	4854      	ldr	r0, [pc, #336]	; (d585c <_Z5timerv+0x20c>)
   d570c:	f001 f820 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
    }
    tone(A1, 3401, 500); //connect two to D2
   d5710:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d5714:	f640 5149 	movw	r1, #3401	; 0xd49
   d5718:	2012      	movs	r0, #18
   d571a:	f003 fe75 	bl	d9408 <tone>
    tone(A0, 3817, 500);
   d571e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d5722:	f640 61e9 	movw	r1, #3817	; 0xee9
   d5726:	2013      	movs	r0, #19
   d5728:	f003 fe6e 	bl	d9408 <tone>
    tone(A1, 3817, 500);
   d572c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d5730:	f640 61e9 	movw	r1, #3817	; 0xee9
   d5734:	2012      	movs	r0, #18
   d5736:	f003 fe67 	bl	d9408 <tone>
    tone(A0, 3401, 500); // connect two to A5
   d573a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d573e:	f640 5149 	movw	r1, #3401	; 0xd49
   d5742:	2013      	movs	r0, #19
   d5744:	f003 fe60 	bl	d9408 <tone>
    tone(D2, 2696, 500);
   d5748:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d574c:	f640 2188 	movw	r1, #2696	; 0xa88
   d5750:	2002      	movs	r0, #2
   d5752:	f003 fe59 	bl	d9408 <tone>
    tone(D2, 1234, 500);
   d5756:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   d575a:	f240 41d2 	movw	r1, #1234	; 0x4d2
   d575e:	2002      	movs	r0, #2
   d5760:	f003 fe52 	bl	d9408 <tone>
    matrix_1.show();
   d5764:	483f      	ldr	r0, [pc, #252]	; (d5864 <_Z5timerv+0x214>)
   d5766:	f001 fdf1 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    delay(100);
   d576a:	2064      	movs	r0, #100	; 0x64
   d576c:	f002 fb6c 	bl	d7e48 <delay>
void timer(){
  if (timerDone==true){
    Blynk.virtualWrite(V1, LOW);
    Blynk.notify("Time's UP!!!");
    x2 = matrix_1.width();
    for(int i = 0;i<54;i++){
   d5770:	3e01      	subs	r6, #1
   d5772:	d182      	bne.n	d567a <_Z5timerv+0x2a>
    tone(D2, 2696, 500);
    tone(D2, 1234, 500);
    matrix_1.show();
    delay(100);
    }
    timerDone = false;
   d5774:	602e      	str	r6, [r5, #0]
   d5776:	bd70      	pop	{r4, r5, r6, pc}
  } else if(timerOn == true){
   d5778:	4b3b      	ldr	r3, [pc, #236]	; (d5868 <_Z5timerv+0x218>)
   d577a:	681b      	ldr	r3, [r3, #0]
   d577c:	2b01      	cmp	r3, #1
   d577e:	d13b      	bne.n	d57f8 <_Z5timerv+0x1a8>
    for(int i = timerTime;i>0;i-=1000){
   d5780:	4b3a      	ldr	r3, [pc, #232]	; (d586c <_Z5timerv+0x21c>)
    updateTimer.Update();
    Serial.println(i/1000);
    matrix_1.fillScreen(0);
    matrix_1.setCursor(2, 0);
    matrix_1.print(i/1000);
    if(--x2 < -36) {
   d5782:	4e34      	ldr	r6, [pc, #208]	; (d5854 <_Z5timerv+0x204>)
    matrix_1.show();
    delay(100);
    }
    timerDone = false;
  } else if(timerOn == true){
    for(int i = timerTime;i>0;i-=1000){
   d5784:	681c      	ldr	r4, [r3, #0]
   d5786:	2c00      	cmp	r4, #0
   d5788:	dd5f      	ble.n	d584a <_Z5timerv+0x1fa>
    updateTimer.Update();
   d578a:	4839      	ldr	r0, [pc, #228]	; (d5870 <_Z5timerv+0x220>)
   d578c:	f001 fc12 	bl	d6fb4 <_ZN20SparkCorePolledTimer6UpdateEv>
    Serial.println(i/1000);
   d5790:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   d5794:	f003 ff32 	bl	d95fc <_Z16_fetch_usbserialv>
   d5798:	fb94 f5f5 	sdiv	r5, r4, r5
   d579c:	220a      	movs	r2, #10
   d579e:	4629      	mov	r1, r5
   d57a0:	f003 f8f8 	bl	d8994 <_ZN5Print7printlnEii>
    matrix_1.fillScreen(0);
   d57a4:	2100      	movs	r1, #0
   d57a6:	482d      	ldr	r0, [pc, #180]	; (d585c <_Z5timerv+0x20c>)
   d57a8:	f001 fc52 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
    matrix_1.setCursor(2, 0);
   d57ac:	2200      	movs	r2, #0
   d57ae:	2102      	movs	r1, #2
   d57b0:	482a      	ldr	r0, [pc, #168]	; (d585c <_Z5timerv+0x20c>)
   d57b2:	f000 ffca 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
    matrix_1.print(i/1000);
   d57b6:	220a      	movs	r2, #10
   d57b8:	4629      	mov	r1, r5
   d57ba:	4828      	ldr	r0, [pc, #160]	; (d585c <_Z5timerv+0x20c>)
   d57bc:	f003 f8e8 	bl	d8990 <_ZN5Print5printEii>
    if(--x2 < -36) {
   d57c0:	6833      	ldr	r3, [r6, #0]
   d57c2:	3b01      	subs	r3, #1
   d57c4:	6033      	str	r3, [r6, #0]
   d57c6:	3324      	adds	r3, #36	; 0x24
   d57c8:	da0c      	bge.n	d57e4 <_Z5timerv+0x194>
      x2 = matrix_1.width();
   d57ca:	4824      	ldr	r0, [pc, #144]	; (d585c <_Z5timerv+0x20c>)
   d57cc:	f000 ffc5 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
      matrix_1.setTextColor(matrix_1.Color(80, 255, 0));
   d57d0:	21ff      	movs	r1, #255	; 0xff
    Serial.println(i/1000);
    matrix_1.fillScreen(0);
    matrix_1.setCursor(2, 0);
    matrix_1.print(i/1000);
    if(--x2 < -36) {
      x2 = matrix_1.width();
   d57d2:	6030      	str	r0, [r6, #0]
      matrix_1.setTextColor(matrix_1.Color(80, 255, 0));
   d57d4:	2200      	movs	r2, #0
   d57d6:	2050      	movs	r0, #80	; 0x50
   d57d8:	f001 fd46 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d57dc:	4601      	mov	r1, r0
   d57de:	481f      	ldr	r0, [pc, #124]	; (d585c <_Z5timerv+0x20c>)
   d57e0:	f000 ffb6 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
    }
    matrix_1.show();
   d57e4:	481f      	ldr	r0, [pc, #124]	; (d5864 <_Z5timerv+0x214>)
   d57e6:	f001 fdb1 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    delay(1000);
   d57ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d57ee:	f002 fb2b 	bl	d7e48 <delay>
    matrix_1.show();
    delay(100);
    }
    timerDone = false;
  } else if(timerOn == true){
    for(int i = timerTime;i>0;i-=1000){
   d57f2:	f5a4 747a 	sub.w	r4, r4, #1000	; 0x3e8
   d57f6:	e7c6      	b.n	d5786 <_Z5timerv+0x136>
    matrix_1.show();
    delay(1000);
    }
  } else {
    matrix_1.fillScreen(0);
    matrix_1.setCursor(x2, 0);
   d57f8:	4c16      	ldr	r4, [pc, #88]	; (d5854 <_Z5timerv+0x204>)
    }
    matrix_1.show();
    delay(1000);
    }
  } else {
    matrix_1.fillScreen(0);
   d57fa:	4818      	ldr	r0, [pc, #96]	; (d585c <_Z5timerv+0x20c>)
   d57fc:	2100      	movs	r1, #0
   d57fe:	f001 fc27 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
    matrix_1.setCursor(x2, 0);
   d5802:	2200      	movs	r2, #0
   d5804:	f9b4 1000 	ldrsh.w	r1, [r4]
   d5808:	4814      	ldr	r0, [pc, #80]	; (d585c <_Z5timerv+0x20c>)
   d580a:	f000 ff9e 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
    matrix_1.print(F("TIMER"));
   d580e:	4919      	ldr	r1, [pc, #100]	; (d5874 <_Z5timerv+0x224>)
   d5810:	4812      	ldr	r0, [pc, #72]	; (d585c <_Z5timerv+0x20c>)
   d5812:	f003 f852 	bl	d88ba <_ZN5Print5printEPK19__FlashStringHelper>
    if(--x2 < -36) {
   d5816:	6823      	ldr	r3, [r4, #0]
   d5818:	3b01      	subs	r3, #1
   d581a:	6023      	str	r3, [r4, #0]
   d581c:	3324      	adds	r3, #36	; 0x24
   d581e:	da0c      	bge.n	d583a <_Z5timerv+0x1ea>
      x2 = matrix_1.width();
   d5820:	480e      	ldr	r0, [pc, #56]	; (d585c <_Z5timerv+0x20c>)
   d5822:	f000 ff9a 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
      matrix_1.setTextColor(matrix_1.Color(80, 255, 0));
   d5826:	21ff      	movs	r1, #255	; 0xff
  } else {
    matrix_1.fillScreen(0);
    matrix_1.setCursor(x2, 0);
    matrix_1.print(F("TIMER"));
    if(--x2 < -36) {
      x2 = matrix_1.width();
   d5828:	6020      	str	r0, [r4, #0]
      matrix_1.setTextColor(matrix_1.Color(80, 255, 0));
   d582a:	2200      	movs	r2, #0
   d582c:	2050      	movs	r0, #80	; 0x50
   d582e:	f001 fd1b 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d5832:	4601      	mov	r1, r0
   d5834:	4809      	ldr	r0, [pc, #36]	; (d585c <_Z5timerv+0x20c>)
   d5836:	f000 ff8b 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
    }
    matrix_1.show();
   d583a:	480a      	ldr	r0, [pc, #40]	; (d5864 <_Z5timerv+0x214>)
   d583c:	f001 fd86 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    delay(100);
   d5840:	2064      	movs	r0, #100	; 0x64
    }
}
   d5842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if(--x2 < -36) {
      x2 = matrix_1.width();
      matrix_1.setTextColor(matrix_1.Color(80, 255, 0));
    }
    matrix_1.show();
    delay(100);
   d5846:	f002 baff 	b.w	d7e48 <delay>
   d584a:	bd70      	pop	{r4, r5, r6, pc}
   d584c:	2003dc90 	.word	0x2003dc90
   d5850:	2003e334 	.word	0x2003e334
   d5854:	2003dd28 	.word	0x2003dd28
   d5858:	000db1c6 	.word	0x000db1c6
   d585c:	2003dce4 	.word	0x2003dce4
   d5860:	000db1d3 	.word	0x000db1d3
   d5864:	2003dd00 	.word	0x2003dd00
   d5868:	2003ddbc 	.word	0x2003ddbc
   d586c:	2003db78 	.word	0x2003db78
   d5870:	2003dc48 	.word	0x2003dc48
   d5874:	000db1e0 	.word	0x000db1e0

000d5878 <_Z12mainFunctionv>:
    }
  }
}

void mainFunction()
{
   d5878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Blynk.run();
  BLYNK_WRITE(V1);
  BLYNK_WRITE(V0);
  BLYNK_WRITE(V2);
  BLYNK_WRITE(V3);
  matrix.setBrightness(brightness);
   d587c:	4ebc      	ldr	r6, [pc, #752]	; (d5b70 <_Z12mainFunctionv+0x2f8>)
    }
  }
}

void mainFunction()
{
   d587e:	b099      	sub	sp, #100	; 0x64
  while(1){
  Blynk.run();
   d5880:	2100      	movs	r1, #0
   d5882:	48bc      	ldr	r0, [pc, #752]	; (d5b74 <_Z12mainFunctionv+0x2fc>)
  BLYNK_WRITE(V0);
  BLYNK_WRITE(V2);
  BLYNK_WRITE(V3);
  matrix.setBrightness(brightness);
  matrix_1.setBrightness(brightness);
  matrix.setTextColor(matrix.Color(r,g,b));
   d5884:	4fbc      	ldr	r7, [pc, #752]	; (d5b78 <_Z12mainFunctionv+0x300>)
   d5886:	f8df 8348 	ldr.w	r8, [pc, #840]	; d5bd0 <_Z12mainFunctionv+0x358>
   d588a:	f8df 9348 	ldr.w	r9, [pc, #840]	; d5bd4 <_Z12mainFunctionv+0x35c>
  matrix_1.setTextColor(matrix.Color(r,g,b));
  sensors_event_t accelData, orientationData;
  bno.getEvent(&accelData, Adafruit_BNO055::VECTOR_ACCELEROMETER);
  bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);
  x = accelData.acceleration.x;
   d588e:	4cbb      	ldr	r4, [pc, #748]	; (d5b7c <_Z12mainFunctionv+0x304>)
  y = accelData.acceleration.y;
   d5890:	4dbb      	ldr	r5, [pc, #748]	; (d5b80 <_Z12mainFunctionv+0x308>)
  z = accelData.acceleration.z;
  ori = orientationData.orientation.x;
   d5892:	f8df a344 	ldr.w	sl, [pc, #836]	; d5bd8 <_Z12mainFunctionv+0x360>
  ntpTime->nowMillis(&now);
   d5896:	f8df b344 	ldr.w	fp, [pc, #836]	; d5bdc <_Z12mainFunctionv+0x364>
}

void mainFunction()
{
  while(1){
  Blynk.run();
   d589a:	f7ff fbcd 	bl	d5038 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  BLYNK_WRITE(V1);
  BLYNK_WRITE(V0);
  BLYNK_WRITE(V2);
  BLYNK_WRITE(V3);
  matrix.setBrightness(brightness);
   d589e:	7831      	ldrb	r1, [r6, #0]
   d58a0:	48b8      	ldr	r0, [pc, #736]	; (d5b84 <_Z12mainFunctionv+0x30c>)
   d58a2:	f001 ff47 	bl	d7734 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  matrix_1.setBrightness(brightness);
   d58a6:	7831      	ldrb	r1, [r6, #0]
   d58a8:	48b7      	ldr	r0, [pc, #732]	; (d5b88 <_Z12mainFunctionv+0x310>)
   d58aa:	f001 ff43 	bl	d7734 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  matrix.setTextColor(matrix.Color(r,g,b));
   d58ae:	783a      	ldrb	r2, [r7, #0]
   d58b0:	f898 1000 	ldrb.w	r1, [r8]
   d58b4:	f899 0000 	ldrb.w	r0, [r9]
   d58b8:	f001 fcd6 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d58bc:	4601      	mov	r1, r0
   d58be:	48b3      	ldr	r0, [pc, #716]	; (d5b8c <_Z12mainFunctionv+0x314>)
   d58c0:	f000 ff46 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
  matrix_1.setTextColor(matrix.Color(r,g,b));
   d58c4:	783a      	ldrb	r2, [r7, #0]
   d58c6:	f898 1000 	ldrb.w	r1, [r8]
   d58ca:	f899 0000 	ldrb.w	r0, [r9]
   d58ce:	f001 fccb 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d58d2:	4601      	mov	r1, r0
   d58d4:	48ae      	ldr	r0, [pc, #696]	; (d5b90 <_Z12mainFunctionv+0x318>)
   d58d6:	f000 ff3b 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
  sensors_event_t accelData, orientationData;
  bno.getEvent(&accelData, Adafruit_BNO055::VECTOR_ACCELEROMETER);
   d58da:	2208      	movs	r2, #8
   d58dc:	a906      	add	r1, sp, #24
   d58de:	48ad      	ldr	r0, [pc, #692]	; (d5b94 <_Z12mainFunctionv+0x31c>)
   d58e0:	f000 fd34 	bl	d634c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>
  bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);
   d58e4:	221a      	movs	r2, #26
   d58e6:	a90f      	add	r1, sp, #60	; 0x3c
   d58e8:	48aa      	ldr	r0, [pc, #680]	; (d5b94 <_Z12mainFunctionv+0x31c>)
   d58ea:	f000 fd2f 	bl	d634c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>
  x = accelData.acceleration.x;
   d58ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d58f0:	6023      	str	r3, [r4, #0]
  y = accelData.acceleration.y;
   d58f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d58f4:	602b      	str	r3, [r5, #0]
  z = accelData.acceleration.z;
   d58f6:	4ba8      	ldr	r3, [pc, #672]	; (d5b98 <_Z12mainFunctionv+0x320>)
   d58f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d58fa:	601a      	str	r2, [r3, #0]
  ori = orientationData.orientation.x;
   d58fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d58fe:	f8ca 2000 	str.w	r2, [sl]
  ntpTime->nowMillis(&now);
   d5902:	4aa6      	ldr	r2, [pc, #664]	; (d5b9c <_Z12mainFunctionv+0x324>)
  sensors_event_t accelData, orientationData;
  bno.getEvent(&accelData, Adafruit_BNO055::VECTOR_ACCELEROMETER);
  bno.getEvent(&orientationData, Adafruit_BNO055::VECTOR_EULER);
  x = accelData.acceleration.x;
  y = accelData.acceleration.y;
  z = accelData.acceleration.z;
   d5904:	9301      	str	r3, [sp, #4]
  ori = orientationData.orientation.x;
  ntpTime->nowMillis(&now);
   d5906:	4659      	mov	r1, fp
   d5908:	6810      	ldr	r0, [r2, #0]
   d590a:	f001 ff49 	bl	d77a0 <_ZN7NtpTime9nowMillisEP11epochMillis>
  timeNow = hhmmss(now.seconds, currentTimeZone);
   d590e:	4aa4      	ldr	r2, [pc, #656]	; (d5ba0 <_Z12mainFunctionv+0x328>)
   d5910:	f8db 1000 	ldr.w	r1, [fp]
   d5914:	f8df b2c8 	ldr.w	fp, [pc, #712]	; d5be0 <_Z12mainFunctionv+0x368>
   d5918:	6812      	ldr	r2, [r2, #0]
   d591a:	a802      	add	r0, sp, #8
   d591c:	f7fe fd66 	bl	d43ec <_Z6hhmmssmi>
   d5920:	a902      	add	r1, sp, #8
   d5922:	4658      	mov	r0, fp
   d5924:	f003 f968 	bl	d8bf8 <_ZN6StringaSEOS_>
   d5928:	a802      	add	r0, sp, #8
   d592a:	f003 f8d4 	bl	d8ad6 <_ZN6StringD1Ev>
  if(z>9&&x<3.00&&y<3.00){ 
   d592e:	9b01      	ldr	r3, [sp, #4]
   d5930:	edd3 7a00 	vldr	s15, [r3]
   d5934:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
   d5938:	eef4 7ae6 	vcmpe.f32	s15, s13
   d593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5940:	dd3d      	ble.n	d59be <_Z12mainFunctionv+0x146>
   d5942:	ed94 6a00 	vldr	s12, [r4]
   d5946:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   d594a:	eeb4 6ac7 	vcmpe.f32	s12, s14
   d594e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5952:	d534      	bpl.n	d59be <_Z12mainFunctionv+0x146>
   d5954:	ed95 6a00 	vldr	s12, [r5]
   d5958:	eeb4 6ac7 	vcmpe.f32	s12, s14
   d595c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5960:	d52d      	bpl.n	d59be <_Z12mainFunctionv+0x146>
    matrix_1.clear();
   d5962:	4889      	ldr	r0, [pc, #548]	; (d5b88 <_Z12mainFunctionv+0x310>)
    matrix_1.show();
    if(millis() > waitMillis) {
   d5964:	4d8f      	ldr	r5, [pc, #572]	; (d5ba4 <_Z12mainFunctionv+0x32c>)
  z = accelData.acceleration.z;
  ori = orientationData.orientation.x;
  ntpTime->nowMillis(&now);
  timeNow = hhmmss(now.seconds, currentTimeZone);
  if(z>9&&x<3.00&&y<3.00){ 
    matrix_1.clear();
   d5966:	f001 ff0b 	bl	d7780 <_ZN17Adafruit_NeoPixel5clearEv>
    matrix_1.show();
   d596a:	4887      	ldr	r0, [pc, #540]	; (d5b88 <_Z12mainFunctionv+0x310>)
   d596c:	f001 fcee 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5970:	f001 ff8e 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
    if(millis() > waitMillis) {
   d5974:	682b      	ldr	r3, [r5, #0]
   d5976:	4283      	cmp	r3, r0
   d5978:	d282      	bcs.n	d5880 <_Z12mainFunctionv+0x8>
      matrix.fillScreen(0);
      matrix.setCursor(x1, 0);
   d597a:	4c8b      	ldr	r4, [pc, #556]	; (d5ba8 <_Z12mainFunctionv+0x330>)
  timeNow = hhmmss(now.seconds, currentTimeZone);
  if(z>9&&x<3.00&&y<3.00){ 
    matrix_1.clear();
    matrix_1.show();
    if(millis() > waitMillis) {
      matrix.fillScreen(0);
   d597c:	4883      	ldr	r0, [pc, #524]	; (d5b8c <_Z12mainFunctionv+0x314>)
   d597e:	2100      	movs	r1, #0
   d5980:	f001 fb66 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
      matrix.setCursor(x1, 0);
   d5984:	2200      	movs	r2, #0
   d5986:	f9b4 1000 	ldrsh.w	r1, [r4]
   d598a:	4880      	ldr	r0, [pc, #512]	; (d5b8c <_Z12mainFunctionv+0x314>)
   d598c:	f000 fedd 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
      matrix.print(timeNow);
   d5990:	f8db 1000 	ldr.w	r1, [fp]
   d5994:	487d      	ldr	r0, [pc, #500]	; (d5b8c <_Z12mainFunctionv+0x314>)
   d5996:	f002 ff89 	bl	d88ac <_ZN5Print5printEPKc>
      if(--x1 < -36) {
   d599a:	6823      	ldr	r3, [r4, #0]
   d599c:	3b01      	subs	r3, #1
   d599e:	6023      	str	r3, [r4, #0]
   d59a0:	3324      	adds	r3, #36	; 0x24
   d59a2:	da03      	bge.n	d59ac <_Z12mainFunctionv+0x134>
        x1 = matrix.width();
   d59a4:	4879      	ldr	r0, [pc, #484]	; (d5b8c <_Z12mainFunctionv+0x314>)
   d59a6:	f000 fed8 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
   d59aa:	6020      	str	r0, [r4, #0]
      }
      matrix.show();
   d59ac:	4875      	ldr	r0, [pc, #468]	; (d5b84 <_Z12mainFunctionv+0x30c>)
   d59ae:	f001 fccd 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
   d59b2:	f001 ff6d 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
      waitMillis = millis() + (300);
   d59b6:	f500 7096 	add.w	r0, r0, #300	; 0x12c
   d59ba:	6028      	str	r0, [r5, #0]
   d59bc:	e760      	b.n	d5880 <_Z12mainFunctionv+0x8>
    }
  } else if(z<-9&&y<3.00&&x<3.00){
   d59be:	eeba 7a02 	vmov.f32	s14, #162	; 0xc1100000 -9.0
   d59c2:	eef4 7ac7 	vcmpe.f32	s15, s14
   d59c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d59ca:	d518      	bpl.n	d59fe <_Z12mainFunctionv+0x186>
   d59cc:	edd5 5a00 	vldr	s11, [r5]
   d59d0:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
   d59d4:	eef4 5ac6 	vcmpe.f32	s11, s12
   d59d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d59dc:	d50f      	bpl.n	d59fe <_Z12mainFunctionv+0x186>
   d59de:	edd4 5a00 	vldr	s11, [r4]
   d59e2:	eef4 5ac6 	vcmpe.f32	s11, s12
   d59e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d59ea:	d508      	bpl.n	d59fe <_Z12mainFunctionv+0x186>
    matrix.clear();
   d59ec:	4865      	ldr	r0, [pc, #404]	; (d5b84 <_Z12mainFunctionv+0x30c>)
   d59ee:	f001 fec7 	bl	d7780 <_ZN17Adafruit_NeoPixel5clearEv>
    matrix.show();
   d59f2:	4864      	ldr	r0, [pc, #400]	; (d5b84 <_Z12mainFunctionv+0x30c>)
   d59f4:	f001 fcaa 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    timer();
   d59f8:	f7ff fe2a 	bl	d5650 <_Z5timerv>
   d59fc:	e740      	b.n	d5880 <_Z12mainFunctionv+0x8>
  } else if(y>9&&x<3.00&&z<3.00){
   d59fe:	ed95 6a00 	vldr	s12, [r5]
   d5a02:	eeb4 6ae6 	vcmpe.f32	s12, s13
   d5a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5a0a:	dd16      	ble.n	d5a3a <_Z12mainFunctionv+0x1c2>
   d5a0c:	ed94 5a00 	vldr	s10, [r4]
   d5a10:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
   d5a14:	eeb4 5ae5 	vcmpe.f32	s10, s11
   d5a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5a1c:	d50d      	bpl.n	d5a3a <_Z12mainFunctionv+0x1c2>
   d5a1e:	eef4 7ae5 	vcmpe.f32	s15, s11
   d5a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5a26:	d561      	bpl.n	d5aec <_Z12mainFunctionv+0x274>
    matrix_1.clear();
   d5a28:	4857      	ldr	r0, [pc, #348]	; (d5b88 <_Z12mainFunctionv+0x310>)
   d5a2a:	f001 fea9 	bl	d7780 <_ZN17Adafruit_NeoPixel5clearEv>
    matrix_1.show();
   d5a2e:	4856      	ldr	r0, [pc, #344]	; (d5b88 <_Z12mainFunctionv+0x310>)
   d5a30:	f001 fc8c 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    stopwatch();
   d5a34:	f7fe fe48 	bl	d46c8 <_Z9stopwatchv>
   d5a38:	e722      	b.n	d5880 <_Z12mainFunctionv+0x8>
  } else if(y<-9&&x<3.00&&z<3.00){
   d5a3a:	eeb4 6ac7 	vcmpe.f32	s12, s14
   d5a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5a42:	d558      	bpl.n	d5af6 <_Z12mainFunctionv+0x27e>
   d5a44:	ed94 5a00 	vldr	s10, [r4]
   d5a48:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
   d5a4c:	eeb4 5ae5 	vcmpe.f32	s10, s11
   d5a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5a54:	d54f      	bpl.n	d5af6 <_Z12mainFunctionv+0x27e>
   d5a56:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
   d5a5a:	eef4 7ae5 	vcmpe.f32	s15, s11
   d5a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5a62:	d548      	bpl.n	d5af6 <_Z12mainFunctionv+0x27e>
    matrix.clear();
   d5a64:	4847      	ldr	r0, [pc, #284]	; (d5b84 <_Z12mainFunctionv+0x30c>)
   d5a66:	f001 fe8b 	bl	d7780 <_ZN17Adafruit_NeoPixel5clearEv>
    matrix.show();
   d5a6a:	4846      	ldr	r0, [pc, #280]	; (d5b84 <_Z12mainFunctionv+0x30c>)
   d5a6c:	f001 fc6e 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5a70:	494e      	ldr	r1, [pc, #312]	; (d5bac <_Z12mainFunctionv+0x334>)
   d5a72:	484f      	ldr	r0, [pc, #316]	; (d5bb0 <_Z12mainFunctionv+0x338>)
   d5a74:	f003 f91b 	bl	d8cae <_ZNK6String6equalsEPKc>
    if (tempReceived!="")
   d5a78:	4605      	mov	r5, r0
   d5a7a:	2800      	cmp	r0, #0
   d5a7c:	f47f af00 	bne.w	d5880 <_Z12mainFunctionv+0x8>
  {
    matrix_1.fillScreen(0);
    matrix_1.setCursor(x1, 0);
   d5a80:	4c49      	ldr	r4, [pc, #292]	; (d5ba8 <_Z12mainFunctionv+0x330>)
  } else if(y<-9&&x<3.00&&z<3.00){
    matrix.clear();
    matrix.show();
    if (tempReceived!="")
  {
    matrix_1.fillScreen(0);
   d5a82:	4601      	mov	r1, r0
   d5a84:	4842      	ldr	r0, [pc, #264]	; (d5b90 <_Z12mainFunctionv+0x318>)
   d5a86:	f001 fae3 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
    matrix_1.setCursor(x1, 0);
   d5a8a:	462a      	mov	r2, r5
   d5a8c:	f9b4 1000 	ldrsh.w	r1, [r4]
   d5a90:	483f      	ldr	r0, [pc, #252]	; (d5b90 <_Z12mainFunctionv+0x318>)
   d5a92:	f000 fe5a 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5a96:	4946      	ldr	r1, [pc, #280]	; (d5bb0 <_Z12mainFunctionv+0x338>)
   d5a98:	a802      	add	r0, sp, #8
   d5a9a:	f003 f8a2 	bl	d8be2 <_ZN6StringC1ERKS_>
    matrix_1.print(tempReceived + "F " + currentStatus + " Rain: " + precipProb + "%");
   d5a9e:	4945      	ldr	r1, [pc, #276]	; (d5bb4 <_Z12mainFunctionv+0x33c>)
   d5aa0:	a802      	add	r0, sp, #8
   d5aa2:	f003 f8f2 	bl	d8c8a <_ZplRK15StringSumHelperPKc>
   d5aa6:	4944      	ldr	r1, [pc, #272]	; (d5bb8 <_Z12mainFunctionv+0x340>)
   d5aa8:	f003 f8e3 	bl	d8c72 <_ZplRK15StringSumHelperRK6String>
   d5aac:	4943      	ldr	r1, [pc, #268]	; (d5bbc <_Z12mainFunctionv+0x344>)
   d5aae:	f003 f8ec 	bl	d8c8a <_ZplRK15StringSumHelperPKc>
   d5ab2:	4943      	ldr	r1, [pc, #268]	; (d5bc0 <_Z12mainFunctionv+0x348>)
   d5ab4:	f003 f8dd 	bl	d8c72 <_ZplRK15StringSumHelperRK6String>
   d5ab8:	4942      	ldr	r1, [pc, #264]	; (d5bc4 <_Z12mainFunctionv+0x34c>)
   d5aba:	f003 f8e6 	bl	d8c8a <_ZplRK15StringSumHelperPKc>
   d5abe:	6801      	ldr	r1, [r0, #0]
   d5ac0:	4833      	ldr	r0, [pc, #204]	; (d5b90 <_Z12mainFunctionv+0x318>)
   d5ac2:	f002 fef3 	bl	d88ac <_ZN5Print5printEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5ac6:	a802      	add	r0, sp, #8
   d5ac8:	f003 f805 	bl	d8ad6 <_ZN6StringD1Ev>
    if(--x1 < -200) {
   d5acc:	6823      	ldr	r3, [r4, #0]
   d5ace:	3b01      	subs	r3, #1
   d5ad0:	6023      	str	r3, [r4, #0]
   d5ad2:	33c8      	adds	r3, #200	; 0xc8
   d5ad4:	da03      	bge.n	d5ade <_Z12mainFunctionv+0x266>
    x1 = matrix_1.width();
   d5ad6:	482e      	ldr	r0, [pc, #184]	; (d5b90 <_Z12mainFunctionv+0x318>)
   d5ad8:	f000 fe3f 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
   d5adc:	6020      	str	r0, [r4, #0]
    }
    matrix_1.show();
   d5ade:	482a      	ldr	r0, [pc, #168]	; (d5b88 <_Z12mainFunctionv+0x310>)
   d5ae0:	f001 fc34 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    delay(100);
   d5ae4:	2064      	movs	r0, #100	; 0x64
   d5ae6:	f002 f9af 	bl	d7e48 <delay>
   d5aea:	e6c9      	b.n	d5880 <_Z12mainFunctionv+0x8>
    timer();
  } else if(y>9&&x<3.00&&z<3.00){
    matrix_1.clear();
    matrix_1.show();
    stopwatch();
  } else if(y<-9&&x<3.00&&z<3.00){
   d5aec:	eeb4 6ac7 	vcmpe.f32	s12, s14
   d5af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5af4:	d4af      	bmi.n	d5a56 <_Z12mainFunctionv+0x1de>
    x1 = matrix_1.width();
    }
    matrix_1.show();
    delay(100);
  }
  } else if(x>9&&z<3.00&&y<3.00){
   d5af6:	edd4 5a00 	vldr	s11, [r4]
   d5afa:	eef4 5ae6 	vcmpe.f32	s11, s13
   d5afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b02:	f77f aebd 	ble.w	d5880 <_Z12mainFunctionv+0x8>
   d5b06:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
   d5b0a:	eef4 7ae6 	vcmpe.f32	s15, s13
   d5b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b12:	f57f aeb5 	bpl.w	d5880 <_Z12mainFunctionv+0x8>
   d5b16:	eeb4 6ae6 	vcmpe.f32	s12, s13
   d5b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b1e:	f57f aeaf 	bpl.w	d5880 <_Z12mainFunctionv+0x8>
    if (ori>0&&ori<90){
   d5b22:	edda 7a00 	vldr	s15, [sl]
   d5b26:	eddf 6a28 	vldr	s13, [pc, #160]	; d5bc8 <_Z12mainFunctionv+0x350>
   d5b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d5b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b32:	dd59      	ble.n	d5be8 <_Z12mainFunctionv+0x370>
   d5b34:	eef4 7ae6 	vcmpe.f32	s15, s13
   d5b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5b3c:	d554      	bpl.n	d5be8 <_Z12mainFunctionv+0x370>
      matrix_1.clear();
   d5b3e:	4812      	ldr	r0, [pc, #72]	; (d5b88 <_Z12mainFunctionv+0x310>)
   d5b40:	f001 fe1e 	bl	d7780 <_ZN17Adafruit_NeoPixel5clearEv>
      matrix_1.show();
   d5b44:	4810      	ldr	r0, [pc, #64]	; (d5b88 <_Z12mainFunctionv+0x310>)
   d5b46:	f001 fc01 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      matrix.fillScreen(matrix.Color(200,200,200));
   d5b4a:	22c8      	movs	r2, #200	; 0xc8
   d5b4c:	4611      	mov	r1, r2
   d5b4e:	4610      	mov	r0, r2
   d5b50:	f001 fb8a 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d5b54:	4601      	mov	r1, r0
   d5b56:	480d      	ldr	r0, [pc, #52]	; (d5b8c <_Z12mainFunctionv+0x314>)
   d5b58:	f001 fa7a 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
      matrix.show();
   d5b5c:	4809      	ldr	r0, [pc, #36]	; (d5b84 <_Z12mainFunctionv+0x30c>)
   d5b5e:	f001 fbf5 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      Serial.println("light");
   d5b62:	f003 fd4b 	bl	d95fc <_Z16_fetch_usbserialv>
   d5b66:	4919      	ldr	r1, [pc, #100]	; (d5bcc <_Z12mainFunctionv+0x354>)
   d5b68:	f002 feb7 	bl	d88da <_ZN5Print7printlnEPKc>
   d5b6c:	e688      	b.n	d5880 <_Z12mainFunctionv+0x8>
   d5b6e:	bf00      	nop
   d5b70:	2003db74 	.word	0x2003db74
   d5b74:	2003e334 	.word	0x2003e334
   d5b78:	2003db7c 	.word	0x2003db7c
   d5b7c:	2003dc6c 	.word	0x2003dc6c
   d5b80:	2003dc70 	.word	0x2003dc70
   d5b84:	2003dcb4 	.word	0x2003dcb4
   d5b88:	2003dd00 	.word	0x2003dd00
   d5b8c:	2003dc98 	.word	0x2003dc98
   d5b90:	2003dce4 	.word	0x2003dce4
   d5b94:	2003dd48 	.word	0x2003dd48
   d5b98:	2003dd30 	.word	0x2003dd30
   d5b9c:	2003dd2c 	.word	0x2003dd2c
   d5ba0:	2003db80 	.word	0x2003db80
   d5ba4:	2003dc94 	.word	0x2003dc94
   d5ba8:	2003dcdc 	.word	0x2003dcdc
   d5bac:	000dbd08 	.word	0x000dbd08
   d5bb0:	2003e354 	.word	0x2003e354
   d5bb4:	000db1e6 	.word	0x000db1e6
   d5bb8:	2003ddac 	.word	0x2003ddac
   d5bbc:	000db1e9 	.word	0x000db1e9
   d5bc0:	2003dd60 	.word	0x2003dd60
   d5bc4:	000db1f1 	.word	0x000db1f1
   d5bc8:	42b40000 	.word	0x42b40000
   d5bcc:	000db1ff 	.word	0x000db1ff
   d5bd0:	2003db6c 	.word	0x2003db6c
   d5bd4:	2003db70 	.word	0x2003db70
   d5bd8:	2003dc44 	.word	0x2003dc44
   d5bdc:	2003dc78 	.word	0x2003dc78
   d5be0:	2003dc5c 	.word	0x2003dc5c
   d5be4:	43340000 	.word	0x43340000
    } else if (ori>90&&ori<180){
   d5be8:	eef4 7ae6 	vcmpe.f32	s15, s13
   d5bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5bf0:	ed5f 6a04 	vldr	s13, [pc, #-16]	; d5be4 <_Z12mainFunctionv+0x36c>
   d5bf4:	dd2f      	ble.n	d5c56 <_Z12mainFunctionv+0x3de>
   d5bf6:	eef4 7ae6 	vcmpe.f32	s15, s13
   d5bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5bfe:	d52a      	bpl.n	d5c56 <_Z12mainFunctionv+0x3de>
      matrix_1.clear();
   d5c00:	485f      	ldr	r0, [pc, #380]	; (d5d80 <_Z12mainFunctionv+0x508>)
   d5c02:	f001 fdbd 	bl	d7780 <_ZN17Adafruit_NeoPixel5clearEv>
      matrix_1.show();
   d5c06:	485e      	ldr	r0, [pc, #376]	; (d5d80 <_Z12mainFunctionv+0x508>)
   d5c08:	f001 fba0 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      matrix.fillScreen(matrix.Color(255,255,255));
   d5c0c:	22ff      	movs	r2, #255	; 0xff
   d5c0e:	4611      	mov	r1, r2
   d5c10:	4610      	mov	r0, r2
   d5c12:	f001 fb29 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d5c16:	4601      	mov	r1, r0
   d5c18:	485a      	ldr	r0, [pc, #360]	; (d5d84 <_Z12mainFunctionv+0x50c>)
   d5c1a:	f001 fa19 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
      matrix.setBrightness(100);
   d5c1e:	2164      	movs	r1, #100	; 0x64
   d5c20:	4859      	ldr	r0, [pc, #356]	; (d5d88 <_Z12mainFunctionv+0x510>)
   d5c22:	f001 fd87 	bl	d7734 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
      matrix.show();
   d5c26:	4858      	ldr	r0, [pc, #352]	; (d5d88 <_Z12mainFunctionv+0x510>)
   d5c28:	f001 fb90 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      delay(500);
   d5c2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5c30:	f002 f90a 	bl	d7e48 <delay>
      matrix.setBrightness(0);
   d5c34:	2100      	movs	r1, #0
   d5c36:	4854      	ldr	r0, [pc, #336]	; (d5d88 <_Z12mainFunctionv+0x510>)
   d5c38:	f001 fd7c 	bl	d7734 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
      matrix.show();
   d5c3c:	4852      	ldr	r0, [pc, #328]	; (d5d88 <_Z12mainFunctionv+0x510>)
   d5c3e:	f001 fb85 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      delay(500);
   d5c42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5c46:	f002 f8ff 	bl	d7e48 <delay>
      Serial.println("flash");
   d5c4a:	f003 fcd7 	bl	d95fc <_Z16_fetch_usbserialv>
   d5c4e:	494f      	ldr	r1, [pc, #316]	; (d5d8c <_Z12mainFunctionv+0x514>)
   d5c50:	f002 fe43 	bl	d88da <_ZN5Print7printlnEPKc>
   d5c54:	e614      	b.n	d5880 <_Z12mainFunctionv+0x8>
    } else if (ori>180&&ori<270){
   d5c56:	eef4 7ae6 	vcmpe.f32	s15, s13
   d5c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5c5e:	eddf 6a4c 	vldr	s13, [pc, #304]	; d5d90 <_Z12mainFunctionv+0x518>
   d5c62:	dd23      	ble.n	d5cac <_Z12mainFunctionv+0x434>
   d5c64:	eef4 7ae6 	vcmpe.f32	s15, s13
   d5c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5c6c:	d51e      	bpl.n	d5cac <_Z12mainFunctionv+0x434>
      matrix.clear();
   d5c6e:	4846      	ldr	r0, [pc, #280]	; (d5d88 <_Z12mainFunctionv+0x510>)
   d5c70:	f001 fd86 	bl	d7780 <_ZN17Adafruit_NeoPixel5clearEv>
      matrix.show();
   d5c74:	4844      	ldr	r0, [pc, #272]	; (d5d88 <_Z12mainFunctionv+0x510>)
   d5c76:	f001 fb69 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      matrix_1.fillScreen(matrix.Color(r,g,b));
   d5c7a:	783a      	ldrb	r2, [r7, #0]
   d5c7c:	f898 1000 	ldrb.w	r1, [r8]
   d5c80:	f899 0000 	ldrb.w	r0, [r9]
   d5c84:	f001 faf0 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d5c88:	4601      	mov	r1, r0
   d5c8a:	4842      	ldr	r0, [pc, #264]	; (d5d94 <_Z12mainFunctionv+0x51c>)
   d5c8c:	f001 f9e0 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
      matrix_1.setBrightness(brightness);
   d5c90:	4b41      	ldr	r3, [pc, #260]	; (d5d98 <_Z12mainFunctionv+0x520>)
   d5c92:	483b      	ldr	r0, [pc, #236]	; (d5d80 <_Z12mainFunctionv+0x508>)
   d5c94:	7819      	ldrb	r1, [r3, #0]
   d5c96:	f001 fd4d 	bl	d7734 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
      matrix_1.show();
   d5c9a:	4839      	ldr	r0, [pc, #228]	; (d5d80 <_Z12mainFunctionv+0x508>)
   d5c9c:	f001 fb56 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      Serial.println("customlight");
   d5ca0:	f003 fcac 	bl	d95fc <_Z16_fetch_usbserialv>
   d5ca4:	493d      	ldr	r1, [pc, #244]	; (d5d9c <_Z12mainFunctionv+0x524>)
   d5ca6:	f002 fe18 	bl	d88da <_ZN5Print7printlnEPKc>
   d5caa:	e5e9      	b.n	d5880 <_Z12mainFunctionv+0x8>
    } else if (ori>270&&ori<360){
   d5cac:	eef4 7ae6 	vcmpe.f32	s15, s13
   d5cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5cb4:	dd10      	ble.n	d5cd8 <_Z12mainFunctionv+0x460>
   d5cb6:	eddf 6a3a 	vldr	s13, [pc, #232]	; d5da0 <_Z12mainFunctionv+0x528>
   d5cba:	eef4 7ae6 	vcmpe.f32	s15, s13
   d5cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5cc2:	d509      	bpl.n	d5cd8 <_Z12mainFunctionv+0x460>
      matrix.clear();
   d5cc4:	4830      	ldr	r0, [pc, #192]	; (d5d88 <_Z12mainFunctionv+0x510>)
   d5cc6:	f001 fd5b 	bl	d7780 <_ZN17Adafruit_NeoPixel5clearEv>
      matrix.show();
   d5cca:	482f      	ldr	r0, [pc, #188]	; (d5d88 <_Z12mainFunctionv+0x510>)
   d5ccc:	f001 fb3e 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
      rainbow(20);
   d5cd0:	2014      	movs	r0, #20
   d5cd2:	f7fe fc09 	bl	d44e8 <_Z7rainbowh>
   d5cd6:	e5d3      	b.n	d5880 <_Z12mainFunctionv+0x8>
  } else if(x<-9&&z<3.00&&y<3.00){
   d5cd8:	eef4 5ac7 	vcmpe.f32	s11, s14
   d5cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5ce0:	f57f adce 	bpl.w	d5880 <_Z12mainFunctionv+0x8>
    matrix.fillScreen(0);
    matrix.setCursor(x1, 0);
   d5ce4:	4c2f      	ldr	r4, [pc, #188]	; (d5da4 <_Z12mainFunctionv+0x52c>)
    } else if (ori>270&&ori<360){
      matrix.clear();
      matrix.show();
      rainbow(20);
  } else if(x<-9&&z<3.00&&y<3.00){
    matrix.fillScreen(0);
   d5ce6:	4827      	ldr	r0, [pc, #156]	; (d5d84 <_Z12mainFunctionv+0x50c>)
   d5ce8:	2100      	movs	r1, #0
   d5cea:	f001 f9b1 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
    matrix.setCursor(x1, 0);
   d5cee:	2200      	movs	r2, #0
   d5cf0:	f9b4 1000 	ldrsh.w	r1, [r4]
   d5cf4:	4823      	ldr	r0, [pc, #140]	; (d5d84 <_Z12mainFunctionv+0x50c>)
   d5cf6:	f000 fd28 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
    matrix.print("BOX");
   d5cfa:	492b      	ldr	r1, [pc, #172]	; (d5da8 <_Z12mainFunctionv+0x530>)
   d5cfc:	4821      	ldr	r0, [pc, #132]	; (d5d84 <_Z12mainFunctionv+0x50c>)
   d5cfe:	f002 fdd5 	bl	d88ac <_ZN5Print5printEPKc>
    if(--x1 < -36) {
   d5d02:	6823      	ldr	r3, [r4, #0]
   d5d04:	3b01      	subs	r3, #1
   d5d06:	6023      	str	r3, [r4, #0]
   d5d08:	3324      	adds	r3, #36	; 0x24
   d5d0a:	da0c      	bge.n	d5d26 <_Z12mainFunctionv+0x4ae>
    x1 = matrix.width();
   d5d0c:	481d      	ldr	r0, [pc, #116]	; (d5d84 <_Z12mainFunctionv+0x50c>)
   d5d0e:	f000 fd24 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
    matrix.setTextColor(matrix.Color(80, 255, 0));
   d5d12:	21ff      	movs	r1, #255	; 0xff
  } else if(x<-9&&z<3.00&&y<3.00){
    matrix.fillScreen(0);
    matrix.setCursor(x1, 0);
    matrix.print("BOX");
    if(--x1 < -36) {
    x1 = matrix.width();
   d5d14:	6020      	str	r0, [r4, #0]
    matrix.setTextColor(matrix.Color(80, 255, 0));
   d5d16:	2200      	movs	r2, #0
   d5d18:	2050      	movs	r0, #80	; 0x50
   d5d1a:	f001 faa5 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d5d1e:	4601      	mov	r1, r0
   d5d20:	4818      	ldr	r0, [pc, #96]	; (d5d84 <_Z12mainFunctionv+0x50c>)
   d5d22:	f000 fd15 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
    }
    matrix_1.show();
   d5d26:	4816      	ldr	r0, [pc, #88]	; (d5d80 <_Z12mainFunctionv+0x508>)
   d5d28:	f001 fb10 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    matrix_1.fillScreen(0);
   d5d2c:	2100      	movs	r1, #0
   d5d2e:	4819      	ldr	r0, [pc, #100]	; (d5d94 <_Z12mainFunctionv+0x51c>)
   d5d30:	f001 f98e 	bl	d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>
    matrix_1.setCursor(x1, 0);
   d5d34:	2200      	movs	r2, #0
   d5d36:	f9b4 1000 	ldrsh.w	r1, [r4]
   d5d3a:	4816      	ldr	r0, [pc, #88]	; (d5d94 <_Z12mainFunctionv+0x51c>)
   d5d3c:	f000 fd05 	bl	d674a <_ZN12Adafruit_GFX9setCursorEss>
    matrix_1.print("BOX");
   d5d40:	4919      	ldr	r1, [pc, #100]	; (d5da8 <_Z12mainFunctionv+0x530>)
   d5d42:	4814      	ldr	r0, [pc, #80]	; (d5d94 <_Z12mainFunctionv+0x51c>)
   d5d44:	f002 fdb2 	bl	d88ac <_ZN5Print5printEPKc>
    if(--x1 < -36) {
   d5d48:	6823      	ldr	r3, [r4, #0]
   d5d4a:	3b01      	subs	r3, #1
   d5d4c:	6023      	str	r3, [r4, #0]
   d5d4e:	3324      	adds	r3, #36	; 0x24
   d5d50:	da0d      	bge.n	d5d6e <_Z12mainFunctionv+0x4f6>
    x1 = matrix_1.width();
   d5d52:	4810      	ldr	r0, [pc, #64]	; (d5d94 <_Z12mainFunctionv+0x51c>)
   d5d54:	f000 fd01 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
   d5d58:	4b12      	ldr	r3, [pc, #72]	; (d5da4 <_Z12mainFunctionv+0x52c>)
    matrix_1.setTextColor(matrix_1.Color(80, 255, 0));
   d5d5a:	21ff      	movs	r1, #255	; 0xff
    matrix_1.show();
    matrix_1.fillScreen(0);
    matrix_1.setCursor(x1, 0);
    matrix_1.print("BOX");
    if(--x1 < -36) {
    x1 = matrix_1.width();
   d5d5c:	6018      	str	r0, [r3, #0]
    matrix_1.setTextColor(matrix_1.Color(80, 255, 0));
   d5d5e:	2200      	movs	r2, #0
   d5d60:	2050      	movs	r0, #80	; 0x50
   d5d62:	f001 fa81 	bl	d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>
   d5d66:	4601      	mov	r1, r0
   d5d68:	480a      	ldr	r0, [pc, #40]	; (d5d94 <_Z12mainFunctionv+0x51c>)
   d5d6a:	f000 fcf1 	bl	d6750 <_ZN12Adafruit_GFX12setTextColorEt>
    }
    matrix_1.show();
   d5d6e:	4804      	ldr	r0, [pc, #16]	; (d5d80 <_Z12mainFunctionv+0x508>)
   d5d70:	f001 faec 	bl	d734c <_ZN17Adafruit_NeoPixel4showEv>
    delay(300);
   d5d74:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5d78:	f002 f866 	bl	d7e48 <delay>
   d5d7c:	e580      	b.n	d5880 <_Z12mainFunctionv+0x8>
   d5d7e:	bf00      	nop
   d5d80:	2003dd00 	.word	0x2003dd00
   d5d84:	2003dc98 	.word	0x2003dc98
   d5d88:	2003dcb4 	.word	0x2003dcb4
   d5d8c:	000db1f3 	.word	0x000db1f3
   d5d90:	43870000 	.word	0x43870000
   d5d94:	2003dce4 	.word	0x2003dce4
   d5d98:	2003db74 	.word	0x2003db74
   d5d9c:	000db1f9 	.word	0x000db1f9
   d5da0:	43b40000 	.word	0x43b40000
   d5da4:	2003dcdc 	.word	0x2003dcdc
   d5da8:	000db205 	.word	0x000db205

000d5dac <_ZN15Adafruit_BNO055D0Ev>:
   d5dac:	b510      	push	{r4, lr}
   d5dae:	2114      	movs	r1, #20
   d5db0:	4604      	mov	r4, r0
   d5db2:	f003 fdd6 	bl	d9962 <_ZdlPvj>
   d5db6:	4620      	mov	r0, r4
   d5db8:	bd10      	pop	{r4, pc}

000d5dba <_ZN18Adafruit_NeoMatrixD0Ev>:
   d5dba:	b510      	push	{r4, lr}
   d5dbc:	4604      	mov	r4, r0
   d5dbe:	f7fe f9cb 	bl	d4158 <_ZN18Adafruit_NeoMatrixD1Ev>
   d5dc2:	4620      	mov	r0, r4
   d5dc4:	2144      	movs	r1, #68	; 0x44
   d5dc6:	f003 fdcc 	bl	d9962 <_ZdlPvj>
   d5dca:	4620      	mov	r0, r4
   d5dcc:	bd10      	pop	{r4, pc}
	...

000d5dd0 <_GLOBAL__sub_I_Blynk>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5dd0:	4b70      	ldr	r3, [pc, #448]	; (d5f94 <_GLOBAL__sub_I_Blynk+0x1c4>)
}
}

void loop(){
  delay(CONCURRENT_WAIT_FOREVER);
   d5dd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5dd6:	2500      	movs	r5, #0

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d5dd8:	4e6f      	ldr	r6, [pc, #444]	; (d5f98 <_GLOBAL__sub_I_Blynk+0x1c8>)
   d5dda:	701d      	strb	r5, [r3, #0]
   d5ddc:	4b6f      	ldr	r3, [pc, #444]	; (d5f9c <_GLOBAL__sub_I_Blynk+0x1cc>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d5dde:	4c70      	ldr	r4, [pc, #448]	; (d5fa0 <_GLOBAL__sub_I_Blynk+0x1d0>)
String global_lat = ""; //variables for location data
String global_lon = "";
String global_ip = ""; //through here
SparkCorePolledTimer updateTimer(timerTime);
Adafruit_BNO055 bno = Adafruit_BNO055(55);
Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(16, 8, PIXEL_PIN,
   d5de0:	f8df 8228 	ldr.w	r8, [pc, #552]	; d600c <_GLOBAL__sub_I_Blynk+0x23c>
   d5de4:	2701      	movs	r7, #1
   d5de6:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5de8:	f001 fd6a 	bl	d78c0 <HAL_Pin_Map>
   d5dec:	4630      	mov	r0, r6
   d5dee:	f003 fa6b 	bl	d92c8 <_ZN9TCPClientC1Ev>
   d5df2:	f106 001c 	add.w	r0, r6, #28
   d5df6:	f002 fbbf 	bl	d8578 <_ZN9IPAddressC1Ev>
   d5dfa:	4622      	mov	r2, r4
   d5dfc:	4969      	ldr	r1, [pc, #420]	; (d5fa4 <_GLOBAL__sub_I_Blynk+0x1d4>)
   d5dfe:	6375      	str	r5, [r6, #52]	; 0x34
   d5e00:	4630      	mov	r0, r6
   d5e02:	8735      	strh	r5, [r6, #56]	; 0x38
   d5e04:	f003 fda8 	bl	d9958 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d5e08:	4b67      	ldr	r3, [pc, #412]	; (d5fa8 <_GLOBAL__sub_I_Blynk+0x1d8>)
#include <JsonParserGeneratorRK.h>
#define PIXEL_PIN A3             // Set up for Neopixel RGB board side 1 Analog Pin
#define PIXEL_PIN_1 A4           // Set up for Neopixel RGB board side 2 Analog Pin
#define PIXEL_COUNT 128          // Neopixel RGB board total pixel count
#define PIXEL_TYPE WS2812B       // Neopixel RGB board total pixel type
SYSTEM_THREAD(ENABLED);
   d5e0a:	4629      	mov	r1, r5
   d5e0c:	601e      	str	r6, [r3, #0]
   d5e0e:	605d      	str	r5, [r3, #4]
   d5e10:	609d      	str	r5, [r3, #8]
   d5e12:	60dd      	str	r5, [r3, #12]
   d5e14:	611d      	str	r5, [r3, #16]
   d5e16:	615d      	str	r5, [r3, #20]
   d5e18:	831d      	strh	r5, [r3, #24]
   d5e1a:	835d      	strh	r5, [r3, #26]
   d5e1c:	771d      	strb	r5, [r3, #28]
   d5e1e:	775d      	strb	r5, [r3, #29]
   d5e20:	4638      	mov	r0, r7
   d5e22:	f001 ff05 	bl	d7c30 <system_thread_set_state>
Thread main;
   d5e26:	4e61      	ldr	r6, [pc, #388]	; (d5fac <_GLOBAL__sub_I_Blynk+0x1dc>)

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5e28:	4861      	ldr	r0, [pc, #388]	; (d5fb0 <_GLOBAL__sub_I_Blynk+0x1e0>)
Thread weather;
int currentTimeZone = 5;     
NtpTime* ntpTime;
float x,y,z,ori;
String timeNow;
   d5e2a:	4f62      	ldr	r7, [pc, #392]	; (d5fb4 <_GLOBAL__sub_I_Blynk+0x1e4>)
   d5e2c:	6005      	str	r5, [r0, #0]
#define PIXEL_PIN A3             // Set up for Neopixel RGB board side 1 Analog Pin
#define PIXEL_PIN_1 A4           // Set up for Neopixel RGB board side 2 Analog Pin
#define PIXEL_COUNT 128          // Neopixel RGB board total pixel count
#define PIXEL_TYPE WS2812B       // Neopixel RGB board total pixel type
SYSTEM_THREAD(ENABLED);
Thread main;
   d5e2e:	4622      	mov	r2, r4
   d5e30:	4631      	mov	r1, r6
   d5e32:	f003 fd91 	bl	d9958 <__aeabi_atexit>
   d5e36:	4860      	ldr	r0, [pc, #384]	; (d5fb8 <_GLOBAL__sub_I_Blynk+0x1e8>)
Thread weather;
   d5e38:	4631      	mov	r1, r6
int currentTimeZone = 5;     
NtpTime* ntpTime;
float x,y,z,ori;
String timeNow;
   d5e3a:	4e60      	ldr	r6, [pc, #384]	; (d5fbc <_GLOBAL__sub_I_Blynk+0x1ec>)
   d5e3c:	6005      	str	r5, [r0, #0]
#define PIXEL_PIN_1 A4           // Set up for Neopixel RGB board side 2 Analog Pin
#define PIXEL_COUNT 128          // Neopixel RGB board total pixel count
#define PIXEL_TYPE WS2812B       // Neopixel RGB board total pixel type
SYSTEM_THREAD(ENABLED);
Thread main;
Thread weather;
   d5e3e:	4622      	mov	r2, r4
int currentTimeZone = 5;     
NtpTime* ntpTime;
float x,y,z,ori;
String timeNow;
   d5e40:	4d5f      	ldr	r5, [pc, #380]	; (d5fc0 <_GLOBAL__sub_I_Blynk+0x1f0>)
#define PIXEL_PIN_1 A4           // Set up for Neopixel RGB board side 2 Analog Pin
#define PIXEL_COUNT 128          // Neopixel RGB board total pixel count
#define PIXEL_TYPE WS2812B       // Neopixel RGB board total pixel type
SYSTEM_THREAD(ENABLED);
Thread main;
Thread weather;
   d5e42:	f003 fd89 	bl	d9958 <__aeabi_atexit>
int currentTimeZone = 5;     
NtpTime* ntpTime;
float x,y,z,ori;
String timeNow;
   d5e46:	4631      	mov	r1, r6
   d5e48:	4638      	mov	r0, r7
   d5e4a:	f002 fe8b 	bl	d8b64 <_ZN6StringC1EPK19__FlashStringHelper>
   d5e4e:	4638      	mov	r0, r7
int r = 255;
int g =255;
int b = 255;
float secondsdisplay;
unsigned int nextTime = 30;    // Next time to contact the server
String tempReceived = "";
   d5e50:	4f5c      	ldr	r7, [pc, #368]	; (d5fc4 <_GLOBAL__sub_I_Blynk+0x1f4>)
Thread main;
Thread weather;
int currentTimeZone = 5;     
NtpTime* ntpTime;
float x,y,z,ori;
String timeNow;
   d5e52:	4622      	mov	r2, r4
   d5e54:	4629      	mov	r1, r5
   d5e56:	f003 fd7f 	bl	d9958 <__aeabi_atexit>
int r = 255;
int g =255;
int b = 255;
float secondsdisplay;
unsigned int nextTime = 30;    // Next time to contact the server
String tempReceived = "";
   d5e5a:	4631      	mov	r1, r6
   d5e5c:	4638      	mov	r0, r7
   d5e5e:	f002 fe81 	bl	d8b64 <_ZN6StringC1EPK19__FlashStringHelper>
   d5e62:	4638      	mov	r0, r7
String currentStatus;
   d5e64:	4f58      	ldr	r7, [pc, #352]	; (d5fc8 <_GLOBAL__sub_I_Blynk+0x1f8>)
int r = 255;
int g =255;
int b = 255;
float secondsdisplay;
unsigned int nextTime = 30;    // Next time to contact the server
String tempReceived = "";
   d5e66:	4622      	mov	r2, r4
   d5e68:	4629      	mov	r1, r5
   d5e6a:	f003 fd75 	bl	d9958 <__aeabi_atexit>
String currentStatus;
   d5e6e:	4631      	mov	r1, r6
   d5e70:	4638      	mov	r0, r7
   d5e72:	f002 fe77 	bl	d8b64 <_ZN6StringC1EPK19__FlashStringHelper>
   d5e76:	4638      	mov	r0, r7
String precipProb;
   d5e78:	4f54      	ldr	r7, [pc, #336]	; (d5fcc <_GLOBAL__sub_I_Blynk+0x1fc>)
int g =255;
int b = 255;
float secondsdisplay;
unsigned int nextTime = 30;    // Next time to contact the server
String tempReceived = "";
String currentStatus;
   d5e7a:	4622      	mov	r2, r4
   d5e7c:	4629      	mov	r1, r5
   d5e7e:	f003 fd6b 	bl	d9958 <__aeabi_atexit>
String precipProb;
   d5e82:	4631      	mov	r1, r6
   d5e84:	4638      	mov	r0, r7
   d5e86:	f002 fe6d 	bl	d8b64 <_ZN6StringC1EPK19__FlashStringHelper>
   d5e8a:	4622      	mov	r2, r4
   d5e8c:	4629      	mov	r1, r5
   d5e8e:	4638      	mov	r0, r7
class JsonParserStatic : public JsonParser {
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   d5e90:	4f4f      	ldr	r7, [pc, #316]	; (d5fd0 <_GLOBAL__sub_I_Blynk+0x200>)
   d5e92:	f003 fd61 	bl	d9958 <__aeabi_atexit>
   d5e96:	2332      	movs	r3, #50	; 0x32
   d5e98:	9300      	str	r3, [sp, #0]
   d5e9a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   d5e9e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
   d5ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5ea6:	4638      	mov	r0, r7
   d5ea8:	f000 fcd2 	bl	d6850 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   d5eac:	4b49      	ldr	r3, [pc, #292]	; (d5fd4 <_GLOBAL__sub_I_Blynk+0x204>)
   d5eae:	603b      	str	r3, [r7, #0]
JsonParserStatic<512, 50> jsonParser;
   d5eb0:	4638      	mov	r0, r7
String global_lat = ""; //variables for location data
   d5eb2:	4f49      	ldr	r7, [pc, #292]	; (d5fd8 <_GLOBAL__sub_I_Blynk+0x208>)
float secondsdisplay;
unsigned int nextTime = 30;    // Next time to contact the server
String tempReceived = "";
String currentStatus;
String precipProb;
JsonParserStatic<512, 50> jsonParser;
   d5eb4:	4949      	ldr	r1, [pc, #292]	; (d5fdc <_GLOBAL__sub_I_Blynk+0x20c>)
   d5eb6:	4622      	mov	r2, r4
   d5eb8:	f003 fd4e 	bl	d9958 <__aeabi_atexit>
String global_lat = ""; //variables for location data
   d5ebc:	4631      	mov	r1, r6
   d5ebe:	4638      	mov	r0, r7
   d5ec0:	f002 fe50 	bl	d8b64 <_ZN6StringC1EPK19__FlashStringHelper>
   d5ec4:	4638      	mov	r0, r7
String global_lon = "";
   d5ec6:	4f46      	ldr	r7, [pc, #280]	; (d5fe0 <_GLOBAL__sub_I_Blynk+0x210>)
unsigned int nextTime = 30;    // Next time to contact the server
String tempReceived = "";
String currentStatus;
String precipProb;
JsonParserStatic<512, 50> jsonParser;
String global_lat = ""; //variables for location data
   d5ec8:	4622      	mov	r2, r4
   d5eca:	4629      	mov	r1, r5
   d5ecc:	f003 fd44 	bl	d9958 <__aeabi_atexit>
String global_lon = "";
   d5ed0:	4631      	mov	r1, r6
   d5ed2:	4638      	mov	r0, r7
   d5ed4:	f002 fe46 	bl	d8b64 <_ZN6StringC1EPK19__FlashStringHelper>
   d5ed8:	4638      	mov	r0, r7
String global_ip = ""; //through here
   d5eda:	4f42      	ldr	r7, [pc, #264]	; (d5fe4 <_GLOBAL__sub_I_Blynk+0x214>)
String tempReceived = "";
String currentStatus;
String precipProb;
JsonParserStatic<512, 50> jsonParser;
String global_lat = ""; //variables for location data
String global_lon = "";
   d5edc:	4622      	mov	r2, r4
   d5ede:	4629      	mov	r1, r5
   d5ee0:	f003 fd3a 	bl	d9958 <__aeabi_atexit>
String global_ip = ""; //through here
   d5ee4:	4631      	mov	r1, r6
   d5ee6:	4638      	mov	r0, r7
   d5ee8:	f002 fe3c 	bl	d8b64 <_ZN6StringC1EPK19__FlashStringHelper>
   d5eec:	4622      	mov	r2, r4
   d5eee:	4629      	mov	r1, r5
   d5ef0:	4638      	mov	r0, r7
   d5ef2:	f003 fd31 	bl	d9958 <__aeabi_atexit>
SparkCorePolledTimer updateTimer(timerTime);
   d5ef6:	4b3c      	ldr	r3, [pc, #240]	; (d5fe8 <_GLOBAL__sub_I_Blynk+0x218>)
   d5ef8:	483c      	ldr	r0, [pc, #240]	; (d5fec <_GLOBAL__sub_I_Blynk+0x21c>)
   d5efa:	6819      	ldr	r1, [r3, #0]
Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d5efc:	4d3c      	ldr	r5, [pc, #240]	; (d5ff0 <_GLOBAL__sub_I_Blynk+0x220>)
Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(16, 8, PIXEL_PIN,
   d5efe:	4e3d      	ldr	r6, [pc, #244]	; (d5ff4 <_GLOBAL__sub_I_Blynk+0x224>)
String precipProb;
JsonParserStatic<512, 50> jsonParser;
String global_lat = ""; //variables for location data
String global_lon = "";
String global_ip = ""; //through here
SparkCorePolledTimer updateTimer(timerTime);
   d5f00:	f001 f83e 	bl	d6f80 <_ZN20SparkCorePolledTimerC1Em>
    VECTOR_LINEARACCEL = BNO055_LINEAR_ACCEL_DATA_X_LSB_ADDR,
    VECTOR_GRAVITY = BNO055_GRAVITY_DATA_X_LSB_ADDR
  } adafruit_vector_type_t;

  Adafruit_BNO055(int32_t sensorID = -1, uint8_t address = BNO055_ADDRESS_A,
                  TwoWire *theWire = &Wire);
   d5f04:	f003 fce6 	bl	d98d4 <_Z19__fetch_global_Wirev>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
   d5f08:	2228      	movs	r2, #40	; 0x28
   d5f0a:	4603      	mov	r3, r0
   d5f0c:	2137      	movs	r1, #55	; 0x37
   d5f0e:	4628      	mov	r0, r5
   d5f10:	f000 f8a0 	bl	d6054 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>
   d5f14:	4622      	mov	r2, r4
   d5f16:	4938      	ldr	r1, [pc, #224]	; (d5ff8 <_GLOBAL__sub_I_Blynk+0x228>)
   d5f18:	4628      	mov	r0, r5
   d5f1a:	f003 fd1d 	bl	d9958 <__aeabi_atexit>
Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(16, 8, PIXEL_PIN,
   d5f1e:	2702      	movs	r7, #2
   d5f20:	2310      	movs	r3, #16
   d5f22:	f04f 0906 	mov.w	r9, #6
   d5f26:	4619      	mov	r1, r3
  NEO_MATRIX_TOP     + NEO_MATRIX_RIGHT +
  NEO_MATRIX_COLUMNS + NEO_MATRIX_PROGRESSIVE,
  PIXEL_TYPE);
Adafruit_NeoMatrix matrix_1 = Adafruit_NeoMatrix(16, 8, PIXEL_PIN_1,
   d5f28:	4d34      	ldr	r5, [pc, #208]	; (d5ffc <_GLOBAL__sub_I_Blynk+0x22c>)
String global_lat = ""; //variables for location data
String global_lon = "";
String global_ip = ""; //through here
SparkCorePolledTimer updateTimer(timerTime);
Adafruit_BNO055 bno = Adafruit_BNO055(55);
Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(16, 8, PIXEL_PIN,
   d5f2a:	9701      	str	r7, [sp, #4]
   d5f2c:	f8cd 9000 	str.w	r9, [sp]
   d5f30:	2208      	movs	r2, #8
   d5f32:	4630      	mov	r0, r6
   d5f34:	f001 f96e 	bl	d7214 <_ZN18Adafruit_NeoMatrixC1Eiihhh>
   d5f38:	4622      	mov	r2, r4
   d5f3a:	4641      	mov	r1, r8
   d5f3c:	4630      	mov	r0, r6
   d5f3e:	f003 fd0b 	bl	d9958 <__aeabi_atexit>
  NEO_MATRIX_TOP     + NEO_MATRIX_RIGHT +
  NEO_MATRIX_COLUMNS + NEO_MATRIX_PROGRESSIVE,
  PIXEL_TYPE);
Adafruit_NeoMatrix matrix_1 = Adafruit_NeoMatrix(16, 8, PIXEL_PIN_1,
   d5f42:	230f      	movs	r3, #15
   d5f44:	9701      	str	r7, [sp, #4]
   d5f46:	f8cd 9000 	str.w	r9, [sp]
   d5f4a:	2208      	movs	r2, #8
   d5f4c:	2110      	movs	r1, #16
   d5f4e:	4628      	mov	r0, r5
   d5f50:	f001 f960 	bl	d7214 <_ZN18Adafruit_NeoMatrixC1Eiihhh>
   d5f54:	4641      	mov	r1, r8
  NEO_MATRIX_TOP     + NEO_MATRIX_RIGHT +
  NEO_MATRIX_COLUMNS + NEO_MATRIX_PROGRESSIVE,
  PIXEL_TYPE);
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN_1, PIXEL_TYPE);
   d5f56:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d6010 <_GLOBAL__sub_I_Blynk+0x240>
Adafruit_BNO055 bno = Adafruit_BNO055(55);
Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(16, 8, PIXEL_PIN,
  NEO_MATRIX_TOP     + NEO_MATRIX_RIGHT +
  NEO_MATRIX_COLUMNS + NEO_MATRIX_PROGRESSIVE,
  PIXEL_TYPE);
Adafruit_NeoMatrix matrix_1 = Adafruit_NeoMatrix(16, 8, PIXEL_PIN_1,
   d5f5a:	4622      	mov	r2, r4
   d5f5c:	4628      	mov	r0, r5
   d5f5e:	f003 fcfb 	bl	d9958 <__aeabi_atexit>
  NEO_MATRIX_TOP     + NEO_MATRIX_RIGHT +
  NEO_MATRIX_COLUMNS + NEO_MATRIX_PROGRESSIVE,
  PIXEL_TYPE);
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN_1, PIXEL_TYPE);
   d5f62:	463b      	mov	r3, r7
   d5f64:	220f      	movs	r2, #15
   d5f66:	2180      	movs	r1, #128	; 0x80
   d5f68:	4640      	mov	r0, r8
   d5f6a:	f001 f9dd 	bl	d7328 <_ZN17Adafruit_NeoPixelC1Ethh>
   d5f6e:	4622      	mov	r2, r4
   d5f70:	4923      	ldr	r1, [pc, #140]	; (d6000 <_GLOBAL__sub_I_Blynk+0x230>)
   d5f72:	4640      	mov	r0, r8
   d5f74:	f003 fcf0 	bl	d9958 <__aeabi_atexit>
int x1 = matrix.width();
   d5f78:	4630      	mov	r0, r6
   d5f7a:	f000 fbee 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
   d5f7e:	4b21      	ldr	r3, [pc, #132]	; (d6004 <_GLOBAL__sub_I_Blynk+0x234>)
   d5f80:	6018      	str	r0, [r3, #0]
int x2 = matrix_1.width();
   d5f82:	4628      	mov	r0, r5
   d5f84:	f000 fbe9 	bl	d675a <_ZN12Adafruit_GFX5widthEv>
   d5f88:	4b1f      	ldr	r3, [pc, #124]	; (d6008 <_GLOBAL__sub_I_Blynk+0x238>)
   d5f8a:	6018      	str	r0, [r3, #0]
}
}

void loop(){
  delay(CONCURRENT_WAIT_FOREVER);
   d5f8c:	b003      	add	sp, #12
   d5f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5f92:	bf00      	nop
   d5f94:	2003dd5c 	.word	0x2003dd5c
   d5f98:	2003dd70 	.word	0x2003dd70
   d5f9c:	2003dc54 	.word	0x2003dc54
   d5fa0:	2003dc3c 	.word	0x2003dc3c
   d5fa4:	000d4a19 	.word	0x000d4a19
   d5fa8:	2003e334 	.word	0x2003e334
   d5fac:	000d41d3 	.word	0x000d41d3
   d5fb0:	2003dce0 	.word	0x2003dce0
   d5fb4:	2003dc5c 	.word	0x2003dc5c
   d5fb8:	2003dc58 	.word	0x2003dc58
   d5fbc:	000dbd08 	.word	0x000dbd08
   d5fc0:	000d8ad7 	.word	0x000d8ad7
   d5fc4:	2003e354 	.word	0x2003e354
   d5fc8:	2003ddac 	.word	0x2003ddac
   d5fcc:	2003dd60 	.word	0x2003dd60
   d5fd0:	2003ddc4 	.word	0x2003ddc4
   d5fd4:	000db020 	.word	0x000db020
   d5fd8:	2003e310 	.word	0x2003e310
   d5fdc:	000d4171 	.word	0x000d4171
   d5fe0:	2003dc80 	.word	0x2003dc80
   d5fe4:	2003e324 	.word	0x2003e324
   d5fe8:	2003db78 	.word	0x2003db78
   d5fec:	2003dc48 	.word	0x2003dc48
   d5ff0:	2003dd48 	.word	0x2003dd48
   d5ff4:	2003dc98 	.word	0x2003dc98
   d5ff8:	000d4101 	.word	0x000d4101
   d5ffc:	2003dce4 	.word	0x2003dce4
   d6000:	000d7289 	.word	0x000d7289
   d6004:	2003dcdc 	.word	0x2003dcdc
   d6008:	2003dd28 	.word	0x2003dd28
   d600c:	000d4159 	.word	0x000d4159
   d6010:	2003dd34 	.word	0x2003dd34

000d6014 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t>:

/*!
 *  @brief  Provides the sensor_t data for this sensor
 *  @param  sensor
 */
void Adafruit_BNO055::getSensor(sensor_t *sensor) {
   d6014:	b538      	push	{r3, r4, r5, lr}
   d6016:	460c      	mov	r4, r1
   d6018:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d601a:	2228      	movs	r2, #40	; 0x28
   d601c:	2100      	movs	r1, #0
   d601e:	4620      	mov	r0, r4
   d6020:	f004 fb37 	bl	da692 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
   d6024:	220b      	movs	r2, #11
   d6026:	4909      	ldr	r1, [pc, #36]	; (d604c <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x38>)
   d6028:	4620      	mov	r0, r4
   d602a:	f004 fbad 	bl	da788 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d602e:	2300      	movs	r3, #0
  sensor->version = 1;
   d6030:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
   d6032:	72e3      	strb	r3, [r4, #11]
  sensor->version = 1;
   d6034:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id = _sensorID;
   d6036:	68ea      	ldr	r2, [r5, #12]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
   d6038:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value = 0.0F;
   d603a:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
  sensor->sensor_id = _sensorID;
   d603c:	6122      	str	r2, [r4, #16]
  sensor->type = SENSOR_TYPE_ORIENTATION;
  sensor->min_delay = 0;
  sensor->max_value = 0.0F;
   d603e:	61a3      	str	r3, [r4, #24]
  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
  sensor->sensor_id = _sensorID;
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d6040:	2203      	movs	r2, #3
  sensor->min_delay = 0;
  sensor->max_value = 0.0F;
  sensor->min_value = 0.0F;
   d6042:	61e3      	str	r3, [r4, #28]
  sensor->resolution = 0.01F;
   d6044:	4b02      	ldr	r3, [pc, #8]	; (d6050 <_ZN15Adafruit_BNO0559getSensorEP8sensor_t+0x3c>)
  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BNO055", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
  sensor->sensor_id = _sensorID;
  sensor->type = SENSOR_TYPE_ORIENTATION;
   d6046:	6162      	str	r2, [r4, #20]
  sensor->min_delay = 0;
  sensor->max_value = 0.0F;
  sensor->min_value = 0.0F;
  sensor->resolution = 0.01F;
   d6048:	6223      	str	r3, [r4, #32]
   d604a:	bd38      	pop	{r3, r4, r5, pc}
   d604c:	000db209 	.word	0x000db209
   d6050:	3c23d70a 	.word	0x3c23d70a

000d6054 <_ZN15Adafruit_BNO055C1ElhP7TwoWire>:
 *  @param  address
 *          i2c address
 *  @param  *theWire
 *          Wire object
 */
Adafruit_BNO055::Adafruit_BNO055(int32_t sensorID, uint8_t address,
   d6054:	b530      	push	{r4, r5, lr}
                                 TwoWire *theWire) {
   d6056:	4d03      	ldr	r5, [pc, #12]	; (d6064 <_ZN15Adafruit_BNO055C1ElhP7TwoWire+0x10>)
   d6058:	6005      	str	r5, [r0, #0]
  _sensorID = sensorID;
   d605a:	60c1      	str	r1, [r0, #12]
  _address = address;
   d605c:	7142      	strb	r2, [r0, #5]
  _wire = theWire;
   d605e:	6083      	str	r3, [r0, #8]
}
   d6060:	bd30      	pop	{r4, r5, pc}
   d6062:	bf00      	nop
   d6064:	000db218 	.word	0x000db218

000d6068 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>:
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   d6068:	b570      	push	{r4, r5, r6, lr}
   d606a:	4604      	mov	r4, r0
   d606c:	460e      	mov	r6, r1
  _wire->beginTransmission(_address);
   d606e:	7941      	ldrb	r1, [r0, #5]
   d6070:	6880      	ldr	r0, [r0, #8]
}

/*!
 *  @brief  Writes an 8 bit value over I2C
 */
bool Adafruit_BNO055::write8(adafruit_bno055_reg_t reg, byte value) {
   d6072:	4615      	mov	r5, r2
  _wire->beginTransmission(_address);
   d6074:	f002 fa36 	bl	d84e4 <_ZN7TwoWire17beginTransmissionEh>
#if ARDUINO >= 100
  _wire->write((uint8_t)reg);
   d6078:	68a0      	ldr	r0, [r4, #8]
   d607a:	6803      	ldr	r3, [r0, #0]
   d607c:	4631      	mov	r1, r6
   d607e:	689b      	ldr	r3, [r3, #8]
   d6080:	4798      	blx	r3
  _wire->write((uint8_t)value);
   d6082:	68a0      	ldr	r0, [r4, #8]
   d6084:	6803      	ldr	r3, [r0, #0]
   d6086:	4629      	mov	r1, r5
   d6088:	689b      	ldr	r3, [r3, #8]
   d608a:	4798      	blx	r3
#else
  _wire->send(reg);
  _wire->send(value);
#endif
  _wire->endTransmission();
   d608c:	68a0      	ldr	r0, [r4, #8]
   d608e:	f002 fa31 	bl	d84f4 <_ZN7TwoWire15endTransmissionEv>

  /* ToDo: Check for error! */
  return true;
}
   d6092:	2001      	movs	r0, #1
   d6094:	bd70      	pop	{r4, r5, r6, pc}

000d6096 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>:
 *            OPERATION_MODE_COMPASS,
 *            OPERATION_MODE_M4G,
 *            OPERATION_MODE_NDOF_FMC_OFF,
 *            OPERATION_MODE_NDOF]
 */
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
   d6096:	b508      	push	{r3, lr}
   d6098:	460a      	mov	r2, r1
  _mode = mode;
   d609a:	7401      	strb	r1, [r0, #16]
  write8(BNO055_OPR_MODE_ADDR, _mode);
   d609c:	213d      	movs	r1, #61	; 0x3d
   d609e:	f7ff ffe3 	bl	d6068 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(30);
   d60a2:	201e      	movs	r0, #30
}
   d60a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 *            OPERATION_MODE_NDOF]
 */
void Adafruit_BNO055::setMode(adafruit_bno055_opmode_t mode) {
  _mode = mode;
  write8(BNO055_OPR_MODE_ADDR, _mode);
  delay(30);
   d60a8:	f001 bece 	b.w	d7e48 <delay>

000d60ac <_ZN15Adafruit_BNO05516setExtCrystalUseEb>:
/*!
 *  @brief  Use the external 32.768KHz crystal
 *  @param  usextal
 *          use external crystal boolean
 */
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d60ac:	b570      	push	{r4, r5, r6, lr}
   d60ae:	460d      	mov	r5, r1
  adafruit_bno055_opmode_t modeback = _mode;

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
   d60b0:	2100      	movs	r1, #0
/*!
 *  @brief  Use the external 32.768KHz crystal
 *  @param  usextal
 *          use external crystal boolean
 */
void Adafruit_BNO055::setExtCrystalUse(boolean usextal) {
   d60b2:	4604      	mov	r4, r0
  adafruit_bno055_opmode_t modeback = _mode;
   d60b4:	7c06      	ldrb	r6, [r0, #16]

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
   d60b6:	f7ff ffee 	bl	d6096 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(25);
   d60ba:	2019      	movs	r0, #25
   d60bc:	f001 fec4 	bl	d7e48 <delay>
  write8(BNO055_PAGE_ID_ADDR, 0);
   d60c0:	2200      	movs	r2, #0
   d60c2:	2107      	movs	r1, #7
   d60c4:	4620      	mov	r0, r4
   d60c6:	f7ff ffcf 	bl	d6068 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  if (usextal) {
   d60ca:	b10d      	cbz	r5, d60d0 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x24>
    write8(BNO055_SYS_TRIGGER_ADDR, 0x80);
   d60cc:	2280      	movs	r2, #128	; 0x80
   d60ce:	e000      	b.n	d60d2 <_ZN15Adafruit_BNO05516setExtCrystalUseEb+0x26>
  } else {
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
   d60d0:	462a      	mov	r2, r5
   d60d2:	213f      	movs	r1, #63	; 0x3f
   d60d4:	4620      	mov	r0, r4
   d60d6:	f7ff ffc7 	bl	d6068 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  }
  delay(10);
   d60da:	200a      	movs	r0, #10
   d60dc:	f001 feb4 	bl	d7e48 <delay>
  /* Set the requested operating mode (see section 3.3) */
  setMode(modeback);
   d60e0:	4620      	mov	r0, r4
   d60e2:	4631      	mov	r1, r6
   d60e4:	f7ff ffd7 	bl	d6096 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d60e8:	2014      	movs	r0, #20
}
   d60ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    write8(BNO055_SYS_TRIGGER_ADDR, 0x00);
  }
  delay(10);
  /* Set the requested operating mode (see section 3.3) */
  setMode(modeback);
  delay(20);
   d60ee:	f001 beab 	b.w	d7e48 <delay>

000d60f2 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>:
}

/*!
 *  @brief  Reads an 8 bit value over I2C
 */
byte Adafruit_BNO055::read8(adafruit_bno055_reg_t reg) {
   d60f2:	b538      	push	{r3, r4, r5, lr}
   d60f4:	4604      	mov	r4, r0
   d60f6:	460d      	mov	r5, r1
  byte value = 0;

  _wire->beginTransmission(_address);
   d60f8:	7941      	ldrb	r1, [r0, #5]
   d60fa:	6880      	ldr	r0, [r0, #8]
   d60fc:	f002 f9f2 	bl	d84e4 <_ZN7TwoWire17beginTransmissionEh>
#if ARDUINO >= 100
  _wire->write((uint8_t)reg);
   d6100:	68a0      	ldr	r0, [r4, #8]
   d6102:	6803      	ldr	r3, [r0, #0]
   d6104:	4629      	mov	r1, r5
   d6106:	689b      	ldr	r3, [r3, #8]
   d6108:	4798      	blx	r3
#else
  _wire->send(reg);
#endif
  _wire->endTransmission();
   d610a:	68a0      	ldr	r0, [r4, #8]
   d610c:	f002 f9f2 	bl	d84f4 <_ZN7TwoWire15endTransmissionEv>
  _wire->requestFrom(_address, (byte)1);
   d6110:	2201      	movs	r2, #1
   d6112:	7961      	ldrb	r1, [r4, #5]
   d6114:	68a0      	ldr	r0, [r4, #8]
   d6116:	f002 f9e2 	bl	d84de <_ZN7TwoWire11requestFromEhh>
#if ARDUINO >= 100
  value = _wire->read();
   d611a:	68a0      	ldr	r0, [r4, #8]
   d611c:	6803      	ldr	r3, [r0, #0]
   d611e:	695b      	ldr	r3, [r3, #20]
   d6120:	4798      	blx	r3
#else
  value = _wire->receive();
#endif

  return value;
}
   d6122:	b2c0      	uxtb	r0, r0
   d6124:	bd38      	pop	{r3, r4, r5, pc}

000d6126 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE>:
 *            OPERATION_MODE_M4G,
 *            OPERATION_MODE_NDOF_FMC_OFF,
 *            OPERATION_MODE_NDOF]
 *  @return true if process is successful
 */
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   d6126:	b538      	push	{r3, r4, r5, lr}
   d6128:	4604      	mov	r4, r0
    "On an arduino Zero, BNO055's ADR pin must be high. Fix that, then delete this line."
  _address = BNO055_ADDRESS_B;
#endif

  /* Enable I2C */
  _wire->begin();
   d612a:	6880      	ldr	r0, [r0, #8]
 *            OPERATION_MODE_M4G,
 *            OPERATION_MODE_NDOF_FMC_OFF,
 *            OPERATION_MODE_NDOF]
 *  @return true if process is successful
 */
bool Adafruit_BNO055::begin(adafruit_bno055_opmode_t mode) {
   d612c:	460d      	mov	r5, r1
    "On an arduino Zero, BNO055's ADR pin must be high. Fix that, then delete this line."
  _address = BNO055_ADDRESS_B;
#endif

  /* Enable I2C */
  _wire->begin();
   d612e:	f002 f9c7 	bl	d84c0 <_ZN7TwoWire5beginEv>
#ifdef ESP8266
  _wire->setClockStretchLimit(1000); // Allow for 1000us of clock stretching
#endif

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
   d6132:	2100      	movs	r1, #0
   d6134:	4620      	mov	r0, r4
   d6136:	f7ff ffdc 	bl	d60f2 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
  if (id != BNO055_ID) {
   d613a:	28a0      	cmp	r0, #160	; 0xa0
   d613c:	d109      	bne.n	d6152 <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x2c>
      return false; // still not? ok bail
    }
  }

  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);
   d613e:	4620      	mov	r0, r4
   d6140:	2100      	movs	r1, #0
   d6142:	f7ff ffa8 	bl	d6096 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
   d6146:	2220      	movs	r2, #32
   d6148:	213f      	movs	r1, #63	; 0x3f
   d614a:	4620      	mov	r0, r4
   d614c:	f7ff ff8c 	bl	d6068 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
   d6150:	e00b      	b.n	d616a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x44>
#endif

  /* Make sure we have the right device */
  uint8_t id = read8(BNO055_CHIP_ID_ADDR);
  if (id != BNO055_ID) {
    delay(1000); // hold on for boot
   d6152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6156:	f001 fe77 	bl	d7e48 <delay>
    id = read8(BNO055_CHIP_ID_ADDR);
   d615a:	2100      	movs	r1, #0
   d615c:	4620      	mov	r0, r4
   d615e:	f7ff ffc8 	bl	d60f2 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
    if (id != BNO055_ID) {
   d6162:	28a0      	cmp	r0, #160	; 0xa0
   d6164:	d0eb      	beq.n	d613e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x18>
      return false; // still not? ok bail
   d6166:	2000      	movs	r0, #0
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
  delay(20);

  return true;
}
   d6168:	bd38      	pop	{r3, r4, r5, pc}
  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   d616a:	2100      	movs	r1, #0
   d616c:	4620      	mov	r0, r4
   d616e:	f7ff ffc0 	bl	d60f2 <_ZN15Adafruit_BNO0555read8ENS_21adafruit_bno055_reg_tE>
   d6172:	28a0      	cmp	r0, #160	; 0xa0
   d6174:	d003      	beq.n	d617e <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x58>
    delay(10);
   d6176:	200a      	movs	r0, #10
   d6178:	f001 fe66 	bl	d7e48 <delay>
  /* Switch to config mode (just in case since this is the default) */
  setMode(OPERATION_MODE_CONFIG);

  /* Reset */
  write8(BNO055_SYS_TRIGGER_ADDR, 0x20);
  while (read8(BNO055_CHIP_ID_ADDR) != BNO055_ID) {
   d617c:	e7f5      	b.n	d616a <_ZN15Adafruit_BNO0555beginENS_24adafruit_bno055_opmode_tE+0x44>
    delay(10);
  }
  delay(50);
   d617e:	2032      	movs	r0, #50	; 0x32
   d6180:	f001 fe62 	bl	d7e48 <delay>

  /* Set to normal power mode */
  write8(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
   d6184:	2200      	movs	r2, #0
   d6186:	213e      	movs	r1, #62	; 0x3e
   d6188:	4620      	mov	r0, r4
   d618a:	f7ff ff6d 	bl	d6068 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d618e:	200a      	movs	r0, #10
   d6190:	f001 fe5a 	bl	d7e48 <delay>

  write8(BNO055_PAGE_ID_ADDR, 0);
   d6194:	2200      	movs	r2, #0
   d6196:	2107      	movs	r1, #7
   d6198:	4620      	mov	r0, r4
   d619a:	f7ff ff65 	bl	d6068 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
  write8(BNO055_AXIS_MAP_SIGN_ADDR, REMAP_SIGN_P2); // P0-P7, Default is P1
  delay(10);
  */

  write8(BNO055_SYS_TRIGGER_ADDR, 0x0);
   d619e:	2200      	movs	r2, #0
   d61a0:	213f      	movs	r1, #63	; 0x3f
   d61a2:	4620      	mov	r0, r4
   d61a4:	f7ff ff60 	bl	d6068 <_ZN15Adafruit_BNO0556write8ENS_21adafruit_bno055_reg_tEh>
  delay(10);
   d61a8:	200a      	movs	r0, #10
   d61aa:	f001 fe4d 	bl	d7e48 <delay>
  /* Set the requested operating mode (see section 3.3) */
  setMode(mode);
   d61ae:	4629      	mov	r1, r5
   d61b0:	4620      	mov	r0, r4
   d61b2:	f7ff ff70 	bl	d6096 <_ZN15Adafruit_BNO0557setModeENS_24adafruit_bno055_opmode_tE>
  delay(20);
   d61b6:	2014      	movs	r0, #20
   d61b8:	f001 fe46 	bl	d7e48 <delay>

  return true;
   d61bc:	2001      	movs	r0, #1
   d61be:	bd38      	pop	{r3, r4, r5, pc}

000d61c0 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>:

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   d61c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61c2:	4604      	mov	r4, r0
   d61c4:	460e      	mov	r6, r1
  _wire->beginTransmission(_address);
   d61c6:	7941      	ldrb	r1, [r0, #5]
   d61c8:	6880      	ldr	r0, [r0, #8]

/*!
 *  @brief  Reads the specified number of bytes over I2C
 */
bool Adafruit_BNO055::readLen(adafruit_bno055_reg_t reg, byte *buffer,
                              uint8_t len) {
   d61ca:	4617      	mov	r7, r2
   d61cc:	461d      	mov	r5, r3
  _wire->beginTransmission(_address);
   d61ce:	f002 f989 	bl	d84e4 <_ZN7TwoWire17beginTransmissionEh>
#if ARDUINO >= 100
  _wire->write((uint8_t)reg);
   d61d2:	68a0      	ldr	r0, [r4, #8]
   d61d4:	6803      	ldr	r3, [r0, #0]
   d61d6:	4631      	mov	r1, r6
   d61d8:	689b      	ldr	r3, [r3, #8]
   d61da:	4798      	blx	r3
#else
  _wire->send(reg);
#endif
  _wire->endTransmission();
   d61dc:	68a0      	ldr	r0, [r4, #8]
   d61de:	f002 f989 	bl	d84f4 <_ZN7TwoWire15endTransmissionEv>
  _wire->requestFrom(_address, (byte)len);
   d61e2:	462a      	mov	r2, r5
   d61e4:	7961      	ldrb	r1, [r4, #5]
   d61e6:	68a0      	ldr	r0, [r4, #8]
   d61e8:	f002 f979 	bl	d84de <_ZN7TwoWire11requestFromEhh>
   d61ec:	3d01      	subs	r5, #1
   d61ee:	1e7e      	subs	r6, r7, #1
   d61f0:	443d      	add	r5, r7

  for (uint8_t i = 0; i < len; i++) {
   d61f2:	42ae      	cmp	r6, r5
   d61f4:	d006      	beq.n	d6204 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x44>
#if ARDUINO >= 100
    buffer[i] = _wire->read();
   d61f6:	68a0      	ldr	r0, [r4, #8]
   d61f8:	6803      	ldr	r3, [r0, #0]
   d61fa:	695b      	ldr	r3, [r3, #20]
   d61fc:	4798      	blx	r3
   d61fe:	f806 0f01 	strb.w	r0, [r6, #1]!
  _wire->send(reg);
#endif
  _wire->endTransmission();
  _wire->requestFrom(_address, (byte)len);

  for (uint8_t i = 0; i < len; i++) {
   d6202:	e7f6      	b.n	d61f2 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh+0x32>
#endif
  }

  /* ToDo: Check for errors! */
  return true;
}
   d6204:	2001      	movs	r0, #1
   d6206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6208 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>:
 *            VECTOR_EULER
 *            VECTOR_LINEARACCEL
 *            VECTOR_GRAVITY]
 *  @return  vector from specified source
 */
imu::Vector<3> Adafruit_BNO055::getVector(adafruit_vector_type_t vector_type) {
   d6208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d620a:	460d      	mov	r5, r1
   d620c:	4617      	mov	r7, r2
template <uint8_t N> class Vector
{
public:
    Vector()
    {
        memset(p_vec, 0, sizeof(double)*N);
   d620e:	2100      	movs	r1, #0
   d6210:	2218      	movs	r2, #24
   d6212:	4604      	mov	r4, r0
   d6214:	f004 fa3d 	bl	da692 <memset>
  imu::Vector<3> xyz;
  uint8_t buffer[6];
  memset(buffer, 0, 6);
   d6218:	2300      	movs	r3, #0
   d621a:	9300      	str	r3, [sp, #0]
   d621c:	f8ad 3004 	strh.w	r3, [sp, #4]

  int16_t x, y, z;
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);
   d6220:	4628      	mov	r0, r5
   d6222:	2306      	movs	r3, #6
   d6224:	466a      	mov	r2, sp
   d6226:	4639      	mov	r1, r7
   d6228:	f7ff ffca 	bl	d61c0 <_ZN15Adafruit_BNO0557readLenENS_21adafruit_bno055_reg_tEPhh>

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d622c:	f89d 3000 	ldrb.w	r3, [sp]
   d6230:	f89d 0001 	ldrb.w	r0, [sp, #1]
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6234:	f89d 6003 	ldrb.w	r6, [sp, #3]
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6238:	f89d 5005 	ldrb.w	r5, [sp, #5]
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d623c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6240:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d6244:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6248:	f89d 3004 	ldrb.w	r3, [sp, #4]

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
   d624c:	2f14      	cmp	r7, #20
  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d624e:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  x = y = z = 0;

  /* Read vector data (6 bytes) */
  readLen((adafruit_bno055_reg_t)vector_type, buffer, 6);

  x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
   d6252:	b200      	sxth	r0, r0
  y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
   d6254:	b236      	sxth	r6, r6
  z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
   d6256:	b22d      	sxth	r5, r5

  /*!
   * Convert the value to an appropriate range (section 3.6.4)
   * and assign the value to the Vector type
   */
  switch (vector_type) {
   d6258:	d00a      	beq.n	d6270 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x68>
   d625a:	d803      	bhi.n	d6264 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x5c>
   d625c:	2f08      	cmp	r7, #8
   d625e:	d020      	beq.n	d62a2 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9a>
   d6260:	2f0e      	cmp	r7, #14
   d6262:	e004      	b.n	d626e <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x66>
   d6264:	2f28      	cmp	r7, #40	; 0x28
   d6266:	d01c      	beq.n	d62a2 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9a>
   d6268:	2f2e      	cmp	r7, #46	; 0x2e
   d626a:	d01a      	beq.n	d62a2 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0x9a>
   d626c:	2f1a      	cmp	r7, #26
   d626e:	d132      	bne.n	d62d6 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xce>
    xyz[1] = ((double)y) / 16.0;
    xyz[2] = ((double)z) / 16.0;
    break;
  case VECTOR_EULER:
    /* 1 degree = 16 LSB */
    xyz[0] = ((double)x) / 16.0;
   d6270:	f003 fe2e 	bl	d9ed0 <__aeabi_i2d>
   d6274:	2200      	movs	r2, #0
   d6276:	4b19      	ldr	r3, [pc, #100]	; (d62dc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd4>)
   d6278:	f003 fe90 	bl	d9f9c <__aeabi_dmul>
   d627c:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 16.0;
   d6280:	4630      	mov	r0, r6
   d6282:	f003 fe25 	bl	d9ed0 <__aeabi_i2d>
   d6286:	2200      	movs	r2, #0
   d6288:	4b14      	ldr	r3, [pc, #80]	; (d62dc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd4>)
   d628a:	f003 fe87 	bl	d9f9c <__aeabi_dmul>
   d628e:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 16.0;
   d6292:	4628      	mov	r0, r5
   d6294:	f003 fe1c 	bl	d9ed0 <__aeabi_i2d>
   d6298:	2200      	movs	r2, #0
   d629a:	4b10      	ldr	r3, [pc, #64]	; (d62dc <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd4>)
   d629c:	f003 fe7e 	bl	d9f9c <__aeabi_dmul>
   d62a0:	e017      	b.n	d62d2 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xca>
    xyz[1] = ((double)y) / 100.0;
    xyz[2] = ((double)z) / 100.0;
    break;
  case VECTOR_GRAVITY:
    /* 1m/s^2 = 100 LSB */
    xyz[0] = ((double)x) / 100.0;
   d62a2:	f003 fe15 	bl	d9ed0 <__aeabi_i2d>
   d62a6:	2200      	movs	r2, #0
   d62a8:	4b0d      	ldr	r3, [pc, #52]	; (d62e0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d62aa:	f003 ffa1 	bl	da1f0 <__aeabi_ddiv>
   d62ae:	e9c4 0100 	strd	r0, r1, [r4]
    xyz[1] = ((double)y) / 100.0;
   d62b2:	4630      	mov	r0, r6
   d62b4:	f003 fe0c 	bl	d9ed0 <__aeabi_i2d>
   d62b8:	2200      	movs	r2, #0
   d62ba:	4b09      	ldr	r3, [pc, #36]	; (d62e0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d62bc:	f003 ff98 	bl	da1f0 <__aeabi_ddiv>
   d62c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
    xyz[2] = ((double)z) / 100.0;
   d62c4:	4628      	mov	r0, r5
   d62c6:	f003 fe03 	bl	d9ed0 <__aeabi_i2d>
   d62ca:	2200      	movs	r2, #0
   d62cc:	4b04      	ldr	r3, [pc, #16]	; (d62e0 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE+0xd8>)
   d62ce:	f003 ff8f 	bl	da1f0 <__aeabi_ddiv>
   d62d2:	e9c4 0104 	strd	r0, r1, [r4, #16]
    break;
  }

  return xyz;
}
   d62d6:	4620      	mov	r0, r4
   d62d8:	b003      	add	sp, #12
   d62da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d62dc:	3fb00000 	.word	0x3fb00000
   d62e0:	40590000 	.word	0x40590000

000d62e4 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_t>:
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   d62e4:	b570      	push	{r4, r5, r6, lr}
   d62e6:	460c      	mov	r4, r1
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d62e8:	2624      	movs	r6, #36	; 0x24
/*!
 *  @brief  Reads the sensor and returns the data as a sensors_event_t
 *  @param  event
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event) {
   d62ea:	b086      	sub	sp, #24
   d62ec:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d62ee:	4632      	mov	r2, r6
   d62f0:	2100      	movs	r1, #0
   d62f2:	4620      	mov	r0, r4
   d62f4:	f004 f9cd 	bl	da692 <memset>

  event->version = sizeof(sensors_event_t);
   d62f8:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
   d62fa:	68eb      	ldr	r3, [r5, #12]
   d62fc:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_ORIENTATION;
   d62fe:	2303      	movs	r3, #3
   d6300:	60a3      	str	r3, [r4, #8]
   d6302:	f001 fac5 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d6306:	221a      	movs	r2, #26
  memset(event, 0, sizeof(sensors_event_t));

  event->version = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
  event->type = SENSOR_TYPE_ORIENTATION;
  event->timestamp = millis();
   d6308:	6120      	str	r0, [r4, #16]

  /* Get a Euler angle sample for orientation */
  imu::Vector<3> euler = getVector(Adafruit_BNO055::VECTOR_EULER);
   d630a:	4629      	mov	r1, r5
   d630c:	4668      	mov	r0, sp
   d630e:	f7ff ff7b 	bl	d6208 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
  event->orientation.x = euler.x();
   d6312:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6316:	f004 f853 	bl	da3c0 <__aeabi_d2f>
   d631a:	6160      	str	r0, [r4, #20]
  event->orientation.y = euler.y();
   d631c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6320:	f004 f84e 	bl	da3c0 <__aeabi_d2f>
   d6324:	61a0      	str	r0, [r4, #24]
  event->orientation.z = euler.z();
   d6326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d632a:	f004 f849 	bl	da3c0 <__aeabi_d2f>
   d632e:	61e0      	str	r0, [r4, #28]

  return true;
}
   d6330:	2001      	movs	r0, #1
   d6332:	b006      	add	sp, #24
   d6334:	bd70      	pop	{r4, r5, r6, pc}

000d6336 <_ZN3imu6VectorILh3EEaSERKS1_>:
        for(int i = 0; i < N; i++)
            ret.p_vec[i] = -p_vec[i];
        return ret;
    }

    Vector& operator=(const Vector& v)
   d6336:	b530      	push	{r4, r5, lr}
   d6338:	4603      	mov	r3, r0
   d633a:	f101 0218 	add.w	r2, r1, #24
    {
        for (int x = 0; x < N; x++ )
            p_vec[x] = v.p_vec[x];
   d633e:	e8f1 4502 	ldrd	r4, r5, [r1], #8
        return ret;
    }

    Vector& operator=(const Vector& v)
    {
        for (int x = 0; x < N; x++ )
   d6342:	4291      	cmp	r1, r2
            p_vec[x] = v.p_vec[x];
   d6344:	e8e3 4502 	strd	r4, r5, [r3], #8
        return ret;
    }

    Vector& operator=(const Vector& v)
    {
        for (int x = 0; x < N; x++ )
   d6348:	d1f9      	bne.n	d633e <_ZN3imu6VectorILh3EEaSERKS1_+0x8>
            p_vec[x] = v.p_vec[x];
        return *this;
    }
   d634a:	bd30      	pop	{r4, r5, pc}

000d634c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE>:
 *  @param  vec_type
 *          specify the type of reading
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event, adafruit_vector_type_t vec_type)
{
   d634c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d634e:	460c      	mov	r4, r1
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6350:	2724      	movs	r7, #36	; 0x24
 *  @param  vec_type
 *          specify the type of reading
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event, adafruit_vector_type_t vec_type)
{
   d6352:	b08d      	sub	sp, #52	; 0x34
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d6354:	2100      	movs	r1, #0
 *  @param  vec_type
 *          specify the type of reading
 *  @return always returns true
 */
bool Adafruit_BNO055::getEvent(sensors_event_t *event, adafruit_vector_type_t vec_type)
{
   d6356:	4606      	mov	r6, r0
   d6358:	4615      	mov	r5, r2
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d635a:	4620      	mov	r0, r4
   d635c:	463a      	mov	r2, r7
   d635e:	f004 f998 	bl	da692 <memset>

  event->version = sizeof(sensors_event_t);
   d6362:	6027      	str	r7, [r4, #0]
  event->sensor_id = _sensorID;
   d6364:	68f3      	ldr	r3, [r6, #12]
   d6366:	6063      	str	r3, [r4, #4]
   d6368:	f001 fa92 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
template <uint8_t N> class Vector
{
public:
    Vector()
    {
        memset(p_vec, 0, sizeof(double)*N);
   d636c:	2218      	movs	r2, #24
  event->timestamp = millis();
   d636e:	6120      	str	r0, [r4, #16]
   d6370:	2100      	movs	r1, #0
   d6372:	4668      	mov	r0, sp
   d6374:	f004 f98d 	bl	da692 <memset>

  //read the data according to vec_type
  imu::Vector<3> vec;
  if (vec_type == Adafruit_BNO055::VECTOR_LINEARACCEL)
   d6378:	2d28      	cmp	r5, #40	; 0x28
   d637a:	d101      	bne.n	d6380 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x34>
  {
    event->type = SENSOR_TYPE_LINEAR_ACCELERATION;
   d637c:	230a      	movs	r3, #10
   d637e:	e010      	b.n	d63a2 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x56>

    event->acceleration.x = vec.x();
    event->acceleration.y = vec.y();
    event->acceleration.z = vec.z();
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_ACCELEROMETER)
   d6380:	2d08      	cmp	r5, #8
   d6382:	d001      	beq.n	d6388 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x3c>

    event->acceleration.x = vec.x();
    event->acceleration.y = vec.y();
    event->acceleration.z = vec.z();
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_GRAVITY)
   d6384:	2d2e      	cmp	r5, #46	; 0x2e
   d6386:	d101      	bne.n	d638c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x40>
  {
    event->type = SENSOR_TYPE_ACCELEROMETER;
   d6388:	2301      	movs	r3, #1
   d638a:	e00a      	b.n	d63a2 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x56>

    event->acceleration.x = vec.x();
    event->acceleration.y = vec.y();
    event->acceleration.z = vec.z();
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_EULER)
   d638c:	2d1a      	cmp	r5, #26
   d638e:	d101      	bne.n	d6394 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x48>
  {
    event->type = SENSOR_TYPE_ORIENTATION;
   d6390:	2303      	movs	r3, #3
   d6392:	e006      	b.n	d63a2 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x56>

    event->orientation.x = vec.x();
    event->orientation.y = vec.y();
    event->orientation.z = vec.z();
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_GYROSCOPE)
   d6394:	2d14      	cmp	r5, #20
   d6396:	d101      	bne.n	d639c <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x50>
  {
    event->type = SENSOR_TYPE_ROTATION_VECTOR;
   d6398:	230b      	movs	r3, #11
   d639a:	e002      	b.n	d63a2 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x56>

    event->gyro.x = vec.x();
    event->gyro.y = vec.y();
    event->gyro.z = vec.z();
  }
  else if (vec_type == Adafruit_BNO055::VECTOR_MAGNETOMETER)
   d639c:	2d0e      	cmp	r5, #14
   d639e:	d119      	bne.n	d63d4 <_ZN15Adafruit_BNO0558getEventEP15sensors_event_tNS_22adafruit_vector_type_tE+0x88>
  {
    event->type = SENSOR_TYPE_MAGNETIC_FIELD;
   d63a0:	2302      	movs	r3, #2
   d63a2:	60a3      	str	r3, [r4, #8]
    vec = getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
   d63a4:	462a      	mov	r2, r5
   d63a6:	4631      	mov	r1, r6
   d63a8:	a806      	add	r0, sp, #24
   d63aa:	f7ff ff2d 	bl	d6208 <_ZN15Adafruit_BNO0559getVectorENS_22adafruit_vector_type_tE>
   d63ae:	a906      	add	r1, sp, #24
   d63b0:	4668      	mov	r0, sp
   d63b2:	f7ff ffc0 	bl	d6336 <_ZN3imu6VectorILh3EEaSERKS1_>

    event->magnetic.x = vec.x();
   d63b6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d63ba:	f004 f801 	bl	da3c0 <__aeabi_d2f>
   d63be:	6160      	str	r0, [r4, #20]
    event->magnetic.y = vec.y();
   d63c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d63c4:	f003 fffc 	bl	da3c0 <__aeabi_d2f>
   d63c8:	61a0      	str	r0, [r4, #24]
    event->magnetic.z = vec.z();
   d63ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d63ce:	f003 fff7 	bl	da3c0 <__aeabi_d2f>
   d63d2:	61e0      	str	r0, [r4, #28]
  }
  

  return true;
}
   d63d4:	2001      	movs	r0, #1
   d63d6:	b00d      	add	sp, #52	; 0x34
   d63d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d63da <_GLOBAL__sub_I__ZN15Adafruit_BNO055C2ElhP7TwoWire>:
   d63da:	f001 ba71 	b.w	d78c0 <HAL_Pin_Map>

000d63de <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d63de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d63e2:	b085      	sub	sp, #20
   d63e4:	461e      	mov	r6, r3
   d63e6:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d63ea:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d63ee:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d63f0:	1a9a      	subs	r2, r3, r2
   d63f2:	2a00      	cmp	r2, #0
   d63f4:	bfb8      	it	lt
   d63f6:	4252      	neglt	r2, r2
   d63f8:	9200      	str	r2, [sp, #0]
   d63fa:	1a72      	subs	r2, r6, r1
   d63fc:	2a00      	cmp	r2, #0
   d63fe:	bfb8      	it	lt
   d6400:	4252      	neglt	r2, r2
   d6402:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d6404:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d6406:	9a00      	ldr	r2, [sp, #0]
   d6408:	9901      	ldr	r1, [sp, #4]
   d640a:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d640c:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d640e:	dd05      	ble.n	d641c <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d6410:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d6412:	461e      	mov	r6, r3
   d6414:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d6416:	4622      	mov	r2, r4
    swap(x0, y0);
   d6418:	462c      	mov	r4, r5
   d641a:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d641c:	42b4      	cmp	r4, r6
   d641e:	dd05      	ble.n	d642c <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d6420:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d6422:	461d      	mov	r5, r3
   d6424:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d6426:	4622      	mov	r2, r4
   d6428:	4634      	mov	r4, r6
   d642a:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d642c:	1b5a      	subs	r2, r3, r5
   d642e:	2a00      	cmp	r2, #0
   d6430:	bfb8      	it	lt
   d6432:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d6434:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d6438:	429d      	cmp	r5, r3
   d643a:	bfb4      	ite	lt
   d643c:	2301      	movlt	r3, #1
   d643e:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d6442:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d6446:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d6448:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d644a:	fa0f f788 	sxth.w	r7, r8
   d644e:	2202      	movs	r2, #2
   d6450:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d6454:	42b4      	cmp	r4, r6
   d6456:	dc1f      	bgt.n	d6498 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d6458:	9a01      	ldr	r2, [sp, #4]
   d645a:	9b00      	ldr	r3, [sp, #0]
   d645c:	4293      	cmp	r3, r2
   d645e:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d6462:	bfc8      	it	gt
   d6464:	4622      	movgt	r2, r4
   d6466:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d646a:	bfc8      	it	gt
   d646c:	4629      	movgt	r1, r5
   d646e:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d6470:	bfdc      	itt	le
   d6472:	462a      	movle	r2, r5
   d6474:	4621      	movle	r1, r4
   d6476:	4648      	mov	r0, r9
   d6478:	47d8      	blx	fp
    }
    err -= dy;
   d647a:	9b03      	ldr	r3, [sp, #12]
   d647c:	1aff      	subs	r7, r7, r3
   d647e:	b2bb      	uxth	r3, r7
   d6480:	b21f      	sxth	r7, r3
    if (err < 0) {
   d6482:	2f00      	cmp	r7, #0
   d6484:	da05      	bge.n	d6492 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d6486:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d6488:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d648c:	4415      	add	r5, r2
   d648e:	b22d      	sxth	r5, r5
      err += dx;
   d6490:	b23f      	sxth	r7, r7
   d6492:	3401      	adds	r4, #1
   d6494:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d6496:	e7dd      	b.n	d6454 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d6498:	b005      	add	sp, #20
   d649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d649e <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d649e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d64a2:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d64a6:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d64a8:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d64ac:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d64ae:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d64b0:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d64b2:	4691      	mov	r9, r2
   d64b4:	460d      	mov	r5, r1
   d64b6:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d64b8:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d64ba:	6823      	ldr	r3, [r4, #0]
   d64bc:	9600      	str	r6, [sp, #0]
   d64be:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d64c2:	444a      	add	r2, r9
   d64c4:	69df      	ldr	r7, [r3, #28]
   d64c6:	4629      	mov	r1, r5
   d64c8:	4643      	mov	r3, r8
   d64ca:	4620      	mov	r0, r4
   d64cc:	b212      	sxth	r2, r2
   d64ce:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d64d0:	6823      	ldr	r3, [r4, #0]
   d64d2:	9600      	str	r6, [sp, #0]
   d64d4:	699f      	ldr	r7, [r3, #24]
   d64d6:	464a      	mov	r2, r9
   d64d8:	4653      	mov	r3, sl
   d64da:	4629      	mov	r1, r5
   d64dc:	4620      	mov	r0, r4
   d64de:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d64e0:	6823      	ldr	r3, [r4, #0]
   d64e2:	960a      	str	r6, [sp, #40]	; 0x28
   d64e4:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   d64e8:	4429      	add	r1, r5
   d64ea:	699d      	ldr	r5, [r3, #24]
   d64ec:	464a      	mov	r2, r9
   d64ee:	4653      	mov	r3, sl
   d64f0:	b209      	sxth	r1, r1
   d64f2:	4620      	mov	r0, r4
   d64f4:	46ac      	mov	ip, r5
}
   d64f6:	b002      	add	sp, #8
   d64f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d64fc:	4760      	bx	ip

000d64fe <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d64fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d6500:	3b01      	subs	r3, #1
   d6502:	4413      	add	r3, r2
   d6504:	6804      	ldr	r4, [r0, #0]
   d6506:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d650a:	9501      	str	r5, [sp, #4]
   d650c:	b21b      	sxth	r3, r3
   d650e:	9300      	str	r3, [sp, #0]
   d6510:	6964      	ldr	r4, [r4, #20]
   d6512:	460b      	mov	r3, r1
   d6514:	47a0      	blx	r4
}
   d6516:	b003      	add	sp, #12
   d6518:	bd30      	pop	{r4, r5, pc}

000d651a <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d651a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d651c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d6520:	6804      	ldr	r4, [r0, #0]
   d6522:	e88d 0024 	stmia.w	sp, {r2, r5}
   d6526:	3b01      	subs	r3, #1
   d6528:	440b      	add	r3, r1
   d652a:	6964      	ldr	r4, [r4, #20]
   d652c:	b21b      	sxth	r3, r3
   d652e:	47a0      	blx	r4
}
   d6530:	b003      	add	sp, #12
   d6532:	bd30      	pop	{r4, r5, pc}

000d6534 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d6534:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6538:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d653c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d6540:	4605      	mov	r5, r0
   d6542:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d6544:	460c      	mov	r4, r1
   d6546:	eb01 0a03 	add.w	sl, r1, r3
   d654a:	4554      	cmp	r4, sl
   d654c:	da0b      	bge.n	d6566 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d654e:	682b      	ldr	r3, [r5, #0]
   d6550:	f8cd 9000 	str.w	r9, [sp]
   d6554:	699e      	ldr	r6, [r3, #24]
   d6556:	4621      	mov	r1, r4
   d6558:	4643      	mov	r3, r8
   d655a:	463a      	mov	r2, r7
   d655c:	4628      	mov	r0, r5
   d655e:	3401      	adds	r4, #1
   d6560:	47b0      	blx	r6
   d6562:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d6564:	e7f1      	b.n	d654a <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d6566:	b002      	add	sp, #8
   d6568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d656c <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d656c:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d656e:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d6572:	6804      	ldr	r4, [r0, #0]
   d6574:	9101      	str	r1, [sp, #4]
   d6576:	9200      	str	r2, [sp, #0]
   d6578:	2200      	movs	r2, #0
   d657a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d657e:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d6580:	4611      	mov	r1, r2
   d6582:	47a0      	blx	r4
}
   d6584:	b002      	add	sp, #8
   d6586:	bd10      	pop	{r4, pc}

000d6588 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d6588:	4770      	bx	lr
	...

000d658c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d658c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d658e:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6590:	2400      	movs	r4, #0
   d6592:	4d08      	ldr	r5, [pc, #32]	; (d65b4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d6594:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d6596:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d6598:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d659a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d659e:	2201      	movs	r2, #1
   d65a0:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d65a2:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d65a4:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d65a6:	8204      	strh	r4, [r0, #16]
   d65a8:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d65aa:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d65ac:	82c1      	strh	r1, [r0, #22]
   d65ae:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d65b0:	7682      	strb	r2, [r0, #26]
}
   d65b2:	bd30      	pop	{r4, r5, pc}
   d65b4:	000db234 	.word	0x000db234

000d65b8 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d65b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d65bc:	b08f      	sub	sp, #60	; 0x3c
   d65be:	4605      	mov	r5, r0
   d65c0:	9106      	str	r1, [sp, #24]
   d65c2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d65c6:	9107      	str	r1, [sp, #28]
   d65c8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d65cc:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d65ce:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d65d2:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d65d4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d65d8:	4281      	cmp	r1, r0
   d65da:	dd7c      	ble.n	d66d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d65dc:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d65e0:	4291      	cmp	r1, r2
   d65e2:	dd78      	ble.n	d66d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d65e4:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d65e6:	fb11 0008 	smlabb	r0, r1, r8, r0
   d65ea:	2800      	cmp	r0, #0
   d65ec:	dd73      	ble.n	d66d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d65ee:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d65f2:	2800      	cmp	r0, #0
   d65f4:	dd6f      	ble.n	d66d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d65f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d65fa:	b296      	uxth	r6, r2
   d65fc:	930c      	str	r3, [sp, #48]	; 0x30
   d65fe:	f106 0308 	add.w	r3, r6, #8
   d6602:	b29b      	uxth	r3, r3
   d6604:	9109      	str	r1, [sp, #36]	; 0x24
   d6606:	2400      	movs	r4, #0
   d6608:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d660a:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d660c:	bf1c      	itt	ne
   d660e:	4b33      	ldrne	r3, [pc, #204]	; (d66dc <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d6610:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d6612:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d6614:	bf16      	itet	ne
   d6616:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d6618:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d661c:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d6620:	9604      	str	r6, [sp, #16]
   d6622:	fa1f f388 	uxth.w	r3, r8
   d6626:	9303      	str	r3, [sp, #12]
   d6628:	9a03      	ldr	r2, [sp, #12]
   d662a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d662e:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d6632:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d6636:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d6638:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d663a:	920a      	str	r2, [sp, #40]	; 0x28
   d663c:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d663e:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d6642:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d6644:	f019 0f01 	tst.w	r9, #1
   d6648:	d011      	beq.n	d666e <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d664a:	f1b8 0f01 	cmp.w	r8, #1
   d664e:	682b      	ldr	r3, [r5, #0]
   d6650:	d103      	bne.n	d665a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d6652:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d6656:	9b07      	ldr	r3, [sp, #28]
   d6658:	e014      	b.n	d6684 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d665a:	9a07      	ldr	r2, [sp, #28]
   d665c:	9201      	str	r2, [sp, #4]
   d665e:	f8cd a000 	str.w	sl, [sp]
   d6662:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d6666:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d666a:	4653      	mov	r3, sl
   d666c:	e018      	b.n	d66a0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d666e:	9b07      	ldr	r3, [sp, #28]
   d6670:	9a08      	ldr	r2, [sp, #32]
   d6672:	4293      	cmp	r3, r2
   d6674:	d017      	beq.n	d66a6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d6676:	f1b8 0f01 	cmp.w	r8, #1
   d667a:	682b      	ldr	r3, [r5, #0]
   d667c:	d107      	bne.n	d668e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d667e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d6682:	4613      	mov	r3, r2
   d6684:	b23a      	sxth	r2, r7
   d6686:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d6688:	4628      	mov	r0, r5
   d668a:	47d8      	blx	fp
   d668c:	e00b      	b.n	d66a6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d668e:	9a08      	ldr	r2, [sp, #32]
   d6690:	9201      	str	r2, [sp, #4]
   d6692:	f8cd a000 	str.w	sl, [sp]
   d6696:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d669a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d669e:	4653      	mov	r3, sl
   d66a0:	990a      	ldr	r1, [sp, #40]	; 0x28
   d66a2:	4628      	mov	r0, r5
   d66a4:	47d8      	blx	fp
   d66a6:	9b04      	ldr	r3, [sp, #16]
   d66a8:	9a03      	ldr	r2, [sp, #12]
   d66aa:	4413      	add	r3, r2
   d66ac:	b29b      	uxth	r3, r3
   d66ae:	9304      	str	r3, [sp, #16]
   d66b0:	9b05      	ldr	r3, [sp, #20]
   d66b2:	4413      	add	r3, r2
   d66b4:	b29b      	uxth	r3, r3
   d66b6:	3701      	adds	r7, #1
   d66b8:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d66ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d66bc:	b2bf      	uxth	r7, r7
   d66be:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d66c0:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d66c4:	d1be      	bne.n	d6644 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d66c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d66c8:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d66ca:	3401      	adds	r4, #1
   d66cc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d66d0:	b264      	sxtb	r4, r4
   d66d2:	9309      	str	r3, [sp, #36]	; 0x24
   d66d4:	d199      	bne.n	d660a <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d66d6:	b00f      	add	sp, #60	; 0x3c
   d66d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66dc:	000db264 	.word	0x000db264

000d66e0 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d66e0:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d66e2:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d66e4:	b085      	sub	sp, #20
   d66e6:	4604      	mov	r4, r0
   d66e8:	460b      	mov	r3, r1

  if (c == '\n') {
   d66ea:	d104      	bne.n	d66f6 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d66ec:	7e02      	ldrb	r2, [r0, #24]
   d66ee:	8a43      	ldrh	r3, [r0, #18]
   d66f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d66f4:	e023      	b.n	d673e <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d66f6:	290d      	cmp	r1, #13
   d66f8:	d024      	beq.n	d6744 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d66fa:	7e05      	ldrb	r5, [r0, #24]
   d66fc:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d6700:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d6704:	9502      	str	r5, [sp, #8]
   d6706:	8ac5      	ldrh	r5, [r0, #22]
   d6708:	9501      	str	r5, [sp, #4]
   d670a:	8a85      	ldrh	r5, [r0, #20]
   d670c:	9500      	str	r5, [sp, #0]
   d670e:	f7ff ff53 	bl	d65b8 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d6712:	7e22      	ldrb	r2, [r4, #24]
   d6714:	8a23      	ldrh	r3, [r4, #16]
   d6716:	b291      	uxth	r1, r2
   d6718:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d671c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d6720:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d6722:	b21b      	sxth	r3, r3
   d6724:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d6726:	b168      	cbz	r0, d6744 <_ZN12Adafruit_GFX5writeEh+0x64>
   d6728:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d672c:	f06f 0505 	mvn.w	r5, #5
   d6730:	fb05 0202 	mla	r2, r5, r2, r0
   d6734:	4293      	cmp	r3, r2
   d6736:	dd05      	ble.n	d6744 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d6738:	8a63      	ldrh	r3, [r4, #18]
   d673a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d673e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d6740:	2300      	movs	r3, #0
   d6742:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d6744:	2001      	movs	r0, #1
   d6746:	b005      	add	sp, #20
   d6748:	bd30      	pop	{r4, r5, pc}

000d674a <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d674a:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d674c:	8242      	strh	r2, [r0, #18]
   d674e:	4770      	bx	lr

000d6750 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d6750:	82c1      	strh	r1, [r0, #22]
   d6752:	8281      	strh	r1, [r0, #20]
   d6754:	4770      	bx	lr

000d6756 <_ZN12Adafruit_GFX11setTextWrapEb>:
  textcolor   = c;
  textbgcolor = b; 
}

void Adafruit_GFX::setTextWrap(boolean w) {
  wrap = w;
   d6756:	7681      	strb	r1, [r0, #26]
   d6758:	4770      	bx	lr

000d675a <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d675a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d675e:	4770      	bx	lr

000d6760 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d6760:	f001 b8ae 	b.w	d78c0 <HAL_Pin_Map>

000d6764 <_GLOBAL__sub_I_Adafruit_SensorRK.cpp>:
   d6764:	f001 b8ac 	b.w	d78c0 <HAL_Pin_Map>

000d6768 <_GLOBAL__sub_I_feedBufferLock>:
  spiwrite(0x00);
  digitalWrite(_dcs, HIGH);  
#ifdef SPI_HAS_TRANSACTION
  if (useHardwareSPI) SPI.endTransaction();
#endif
}
   d6768:	b508      	push	{r3, lr}
   d676a:	f001 f8a9 	bl	d78c0 <HAL_Pin_Map>
   d676e:	4b01      	ldr	r3, [pc, #4]	; (d6774 <_GLOBAL__sub_I_feedBufferLock+0xc>)
   d6770:	6018      	str	r0, [r3, #0]
   d6772:	bd08      	pop	{r3, pc}
   d6774:	2003e364 	.word	0x2003e364

000d6778 <_GLOBAL__sub_I_CellularHelper.cpp>:
   d6778:	f001 b8a2 	b.w	d78c0 <HAL_Pin_Map>

000d677c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d677c:	b510      	push	{r4, lr}
   d677e:	4b05      	ldr	r3, [pc, #20]	; (d6794 <_ZN10JsonBufferD1Ev+0x18>)
   d6780:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d6782:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d6784:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d6786:	b91b      	cbnz	r3, d6790 <_ZN10JsonBufferD1Ev+0x14>
   d6788:	6840      	ldr	r0, [r0, #4]
   d678a:	b108      	cbz	r0, d6790 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d678c:	f001 fb0c 	bl	d7da8 <free>
	}
}
   d6790:	4620      	mov	r0, r4
   d6792:	bd10      	pop	{r4, pc}
   d6794:	000db768 	.word	0x000db768

000d6798 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d6798:	b510      	push	{r4, lr}
   d679a:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d679c:	f7ff ffee 	bl	d677c <_ZN10JsonBufferD1Ev>
   d67a0:	4620      	mov	r0, r4
   d67a2:	2114      	movs	r1, #20
   d67a4:	f003 f8dd 	bl	d9962 <_ZdlPvj>
   d67a8:	4620      	mov	r0, r4
   d67aa:	bd10      	pop	{r4, pc}

000d67ac <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d67ac:	b510      	push	{r4, lr}
   d67ae:	4b07      	ldr	r3, [pc, #28]	; (d67cc <_ZN10JsonParserD1Ev+0x20>)
   d67b0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d67b2:	7c03      	ldrb	r3, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d67b4:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d67b6:	b91b      	cbnz	r3, d67c0 <_ZN10JsonParserD1Ev+0x14>
   d67b8:	6940      	ldr	r0, [r0, #20]
   d67ba:	b108      	cbz	r0, d67c0 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d67bc:	f001 faf4 	bl	d7da8 <free>
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d67c0:	4620      	mov	r0, r4
   d67c2:	f7ff ffdb 	bl	d677c <_ZN10JsonBufferD1Ev>
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
   d67c6:	4620      	mov	r0, r4
   d67c8:	bd10      	pop	{r4, pc}
   d67ca:	bf00      	nop
   d67cc:	000db7a8 	.word	0x000db7a8

000d67d0 <_ZN10JsonParserD0Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d67d0:	b510      	push	{r4, lr}
   d67d2:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
   d67d4:	f7ff ffea 	bl	d67ac <_ZN10JsonParserD1Ev>
   d67d8:	4620      	mov	r0, r4
   d67da:	212c      	movs	r1, #44	; 0x2c
   d67dc:	f003 f8c1 	bl	d9962 <_ZdlPvj>
   d67e0:	4620      	mov	r0, r4
   d67e2:	bd10      	pop	{r4, pc}

000d67e4 <_ZN10JsonBuffer8allocateEj>:

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
   d67e4:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   d67e6:	7c03      	ldrb	r3, [r0, #16]

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
   d67e8:	4604      	mov	r4, r0
   d67ea:	460d      	mov	r5, r1
	if (!staticBuffers) {
   d67ec:	b10b      	cbz	r3, d67f2 <_ZN10JsonBuffer8allocateEj+0xe>
		else {
			return false;
		}
	}
	else {
		return false;
   d67ee:	2000      	movs	r0, #0
   d67f0:	bd38      	pop	{r3, r4, r5, pc}
}

bool JsonBuffer::allocate(size_t len) {
	if (!staticBuffers) {
		char *newBuffer;
		if (buffer) {
   d67f2:	6840      	ldr	r0, [r0, #4]
   d67f4:	b110      	cbz	r0, d67fc <_ZN10JsonBuffer8allocateEj+0x18>
			newBuffer = (char *) realloc(buffer, len);
   d67f6:	f001 fadf 	bl	d7db8 <realloc>
   d67fa:	e002      	b.n	d6802 <_ZN10JsonBuffer8allocateEj+0x1e>
		}
		else {
			newBuffer = (char *) malloc(len);
   d67fc:	4608      	mov	r0, r1
   d67fe:	f001 facb 	bl	d7d98 <malloc>
		}
		if (newBuffer) {
   d6802:	2800      	cmp	r0, #0
   d6804:	d0f3      	beq.n	d67ee <_ZN10JsonBuffer8allocateEj+0xa>
			buffer = newBuffer;
   d6806:	6060      	str	r0, [r4, #4]
			bufferLen = len;
   d6808:	60a5      	str	r5, [r4, #8]
			return true;
   d680a:	2001      	movs	r0, #1
		}
	}
	else {
		return false;
	}
}
   d680c:	bd38      	pop	{r3, r4, r5, pc}

000d680e <_ZN10JsonBuffer7addDataEPKcj>:

bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d680e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   d6810:	6843      	ldr	r3, [r0, #4]
	else {
		return false;
	}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d6812:	460e      	mov	r6, r1
   d6814:	4604      	mov	r4, r0
   d6816:	4615      	mov	r5, r2
   d6818:	68c1      	ldr	r1, [r0, #12]
	if (!buffer || (offset + dataLen) > bufferLen) {
   d681a:	b17b      	cbz	r3, d683c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   d681c:	1853      	adds	r3, r2, r1
   d681e:	6882      	ldr	r2, [r0, #8]
   d6820:	4293      	cmp	r3, r2
   d6822:	d80b      	bhi.n	d683c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
		if (!allocate(offset + dataLen)) {
			return false;
		}
	}

	memcpy(&buffer[offset], data, dataLen);
   d6824:	68e3      	ldr	r3, [r4, #12]
   d6826:	6860      	ldr	r0, [r4, #4]
   d6828:	462a      	mov	r2, r5
   d682a:	4631      	mov	r1, r6
   d682c:	4418      	add	r0, r3
   d682e:	f003 ff25 	bl	da67c <memcpy>
	offset += dataLen;
   d6832:	68e3      	ldr	r3, [r4, #12]
   d6834:	441d      	add	r5, r3
   d6836:	60e5      	str	r5, [r4, #12]

	return true;
   d6838:	2001      	movs	r0, #1
   d683a:	bd70      	pop	{r4, r5, r6, pc}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
	if (!buffer || (offset + dataLen) > bufferLen) {
		// Need to allocate more space for data
		if (!allocate(offset + dataLen)) {
   d683c:	4429      	add	r1, r5
   d683e:	4620      	mov	r0, r4
   d6840:	f7ff ffd0 	bl	d67e4 <_ZN10JsonBuffer8allocateEj>
   d6844:	2800      	cmp	r0, #0
   d6846:	d1ed      	bne.n	d6824 <_ZN10JsonBuffer7addDataEPKcj+0x16>

	memcpy(&buffer[offset], data, dataLen);
	offset += dataLen;

	return true;
}
   d6848:	bd70      	pop	{r4, r5, r6, pc}

000d684a <_ZN10JsonBuffer5clearEv>:

void JsonBuffer::clear() {
	offset = 0;
   d684a:	2300      	movs	r3, #0
   d684c:	60c3      	str	r3, [r0, #12]
   d684e:	4770      	bx	lr

000d6850 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
//

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d6850:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d6852:	6082      	str	r2, [r0, #8]
   d6854:	2200      	movs	r2, #0
   d6856:	60c2      	str	r2, [r0, #12]
   d6858:	2201      	movs	r2, #1
   d685a:	7402      	strb	r2, [r0, #16]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d685c:	6143      	str	r3, [r0, #20]
   d685e:	4a03      	ldr	r2, [pc, #12]	; (d686c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d6860:	9b02      	ldr	r3, [sp, #8]
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d6862:	6041      	str	r1, [r0, #4]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d6864:	6002      	str	r2, [r0, #0]
   d6866:	61c3      	str	r3, [r0, #28]

}
   d6868:	bd10      	pop	{r4, pc}
   d686a:	bf00      	nop
   d686c:	000db7a8 	.word	0x000db7a8

000d6870 <_ZNK10JsonParser14getOuterObjectEv>:
	return 0;
}


const JsonParserGeneratorRK::jsmntok_t *JsonParser::getOuterObject() const {
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   d6870:	6943      	ldr	r3, [r0, #20]
   d6872:	6982      	ldr	r2, [r0, #24]
   d6874:	4293      	cmp	r3, r2
   d6876:	d205      	bcs.n	d6884 <_ZNK10JsonParser14getOuterObjectEv+0x14>
   d6878:	781a      	ldrb	r2, [r3, #0]
   d687a:	2a01      	cmp	r2, #1
   d687c:	bf0c      	ite	eq
   d687e:	4618      	moveq	r0, r3
   d6880:	2000      	movne	r0, #0
   d6882:	4770      	bx	lr
		return &tokens[0];
	}
	else {
		return 0;
   d6884:	2000      	movs	r0, #0
	}
}
   d6886:	4770      	bx	lr

000d6888 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
	}
	return 0;
}


bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   d6888:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   d688a:	6813      	ldr	r3, [r2, #0]
   d688c:	689d      	ldr	r5, [r3, #8]

	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   d688e:	6813      	ldr	r3, [r2, #0]
   d6890:	f103 0410 	add.w	r4, r3, #16
   d6894:	6014      	str	r4, [r2, #0]
   d6896:	6986      	ldr	r6, [r0, #24]
   d6898:	42b4      	cmp	r4, r6
   d689a:	d20a      	bcs.n	d68b2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   d689c:	699b      	ldr	r3, [r3, #24]
   d689e:	688c      	ldr	r4, [r1, #8]
   d68a0:	42a3      	cmp	r3, r4
   d68a2:	da01      	bge.n	d68a8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   d68a4:	429d      	cmp	r5, r3
   d68a6:	daf2      	bge.n	d688e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	}

	if (obj >= tokensEnd || obj->end > container->end) {
   d68a8:	42a3      	cmp	r3, r4
   d68aa:	bfcc      	ite	gt
   d68ac:	2000      	movgt	r0, #0
   d68ae:	2001      	movle	r0, #1
   d68b0:	bd70      	pop	{r4, r5, r6, pc}
		// No object after index
		return false;
   d68b2:	2000      	movs	r0, #0
	}
	return true;
}
   d68b4:	bd70      	pop	{r4, r5, r6, pc}

000d68b6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d68b6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d68ba:	ad02      	add	r5, sp, #8
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d68bc:	469a      	mov	sl, r3

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d68be:	f101 0310 	add.w	r3, r1, #16
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d68c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d68c4:	f845 3d04 	str.w	r3, [r5, #-4]!
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d68c8:	4607      	mov	r7, r0
   d68ca:	460c      	mov	r4, r1
   d68cc:	4691      	mov	r9, r2

	size_t index = 0;
   d68ce:	f04f 0800 	mov.w	r8, #0
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
   d68d2:	9b01      	ldr	r3, [sp, #4]
   d68d4:	69ba      	ldr	r2, [r7, #24]
   d68d6:	429a      	cmp	r2, r3
   d68d8:	d91e      	bls.n	d6918 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
   d68da:	6899      	ldr	r1, [r3, #8]
   d68dc:	68a2      	ldr	r2, [r4, #8]
   d68de:	4291      	cmp	r1, r2
   d68e0:	da1a      	bge.n	d6918 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
		if (desiredIndex == index) {
   d68e2:	45b0      	cmp	r8, r6
   d68e4:	d10b      	bne.n	d68fe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
			key = token;
   d68e6:	f8c9 3000 	str.w	r3, [r9]
			if (skipObject(container, token)) {
   d68ea:	462a      	mov	r2, r5
   d68ec:	4621      	mov	r1, r4
   d68ee:	4638      	mov	r0, r7
   d68f0:	f7ff ffca 	bl	d6888 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   d68f4:	b118      	cbz	r0, d68fe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
				value = token;
   d68f6:	9b01      	ldr	r3, [sp, #4]
   d68f8:	f8ca 3000 	str.w	r3, [sl]
				return true;
   d68fc:	e00d      	b.n	d691a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x64>
			}
		}
		index++;
		skipObject(container, token);
   d68fe:	462a      	mov	r2, r5
   d6900:	4621      	mov	r1, r4
   d6902:	4638      	mov	r0, r7
   d6904:	f7ff ffc0 	bl	d6888 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   d6908:	462a      	mov	r2, r5
   d690a:	4621      	mov	r1, r4
   d690c:	4638      	mov	r0, r7
			if (skipObject(container, token)) {
				value = token;
				return true;
			}
		}
		index++;
   d690e:	f108 0801 	add.w	r8, r8, #1
		skipObject(container, token);
		skipObject(container, token);
   d6912:	f7ff ffb9 	bl	d6888 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
   d6916:	e7dc      	b.n	d68d2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x1c>
		index++;
		skipObject(container, token);
		skipObject(container, token);
	}

	return false;
   d6918:	2000      	movs	r0, #0
}
   d691a:	b002      	add	sp, #8
   d691c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6920 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d6920:	b538      	push	{r3, r4, r5, lr}
   d6922:	4604      	mov	r4, r0
	if (str) {
   d6924:	6800      	ldr	r0, [r0, #0]
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d6926:	460d      	mov	r5, r1
	if (str) {
   d6928:	b110      	cbz	r0, d6930 <_ZN16JsonParserString6appendEc+0x10>
		str->concat(ch);
   d692a:	f002 f995 	bl	d8c58 <_ZN6String6concatEc>
   d692e:	e007      	b.n	d6940 <_ZN16JsonParserString6appendEc+0x20>
		length++;
	}
	else {
		if (buf && length < (bufLen - 1)) {
   d6930:	6861      	ldr	r1, [r4, #4]
   d6932:	b129      	cbz	r1, d6940 <_ZN16JsonParserString6appendEc+0x20>
   d6934:	68a3      	ldr	r3, [r4, #8]
   d6936:	68e2      	ldr	r2, [r4, #12]
   d6938:	3b01      	subs	r3, #1
   d693a:	429a      	cmp	r2, r3
			buf[length] = ch;
   d693c:	bf38      	it	cc
   d693e:	548d      	strbcc	r5, [r1, r2]
		}
		length++;
   d6940:	68e3      	ldr	r3, [r4, #12]
   d6942:	3301      	adds	r3, #1
   d6944:	60e3      	str	r3, [r4, #12]
   d6946:	bd38      	pop	{r3, r4, r5, pc}

000d6948 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {

	unsigned char value;

	if (unicode <= 0x007f) {
   d6948:	287f      	cmp	r0, #127	; 0x7f
	return true;
}


// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d694a:	b570      	push	{r4, r5, r6, lr}
   d694c:	460c      	mov	r4, r1

	unsigned char value;

	if (unicode <= 0x007f) {
   d694e:	d801      	bhi.n	d6954 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		// 0x00000000 - 0x0000007F:
		str.append((char)unicode);
   d6950:	b2c1      	uxtb	r1, r0
   d6952:	e019      	b.n	d6988 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x40>
	}
	else
	if (unicode <= 0x7ff) {
   d6954:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   d6958:	ea4f 15a0 	mov.w	r5, r0, asr #6
   d695c:	f000 063f 	and.w	r6, r0, #63	; 0x3f
   d6960:	d203      	bcs.n	d696a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x22>
		// 0x00000080 - 0x000007FF:
		// 110xxxxx 10xxxxxx

		value = (0b11000000 | ((unicode >> 6) & 0b11111));
		str.append((char)value);
   d6962:	f065 013f 	orn	r1, r5, #63	; 0x3f
   d6966:	b2c9      	uxtb	r1, r1
   d6968:	e009      	b.n	d697e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
	}
	else {
		// 0x00000800 - 0x0000FFFF:
		// 1110xxxx 10xxxxxx 10xxxxxx
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
		str.append((char)value);
   d696a:	0b01      	lsrs	r1, r0, #12
   d696c:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
   d6970:	4620      	mov	r0, r4
   d6972:	f7ff ffd5 	bl	d6920 <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);
   d6976:	f005 013f 	and.w	r1, r5, #63	; 0x3f
   d697a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   d697e:	4620      	mov	r0, r4
   d6980:	f7ff ffce 	bl	d6920 <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
   d6984:	f046 0180 	orr.w	r1, r6, #128	; 0x80
   d6988:	4620      	mov	r0, r4
	}
}
   d698a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
   d698e:	f7ff bfc7 	b.w	d6920 <_ZN16JsonParserString6appendEc>
	...

000d6994 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d6994:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
   d6998:	684d      	ldr	r5, [r1, #4]
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d699a:	4680      	mov	r8, r0
   d699c:	460f      	mov	r7, r1
   d699e:	4616      	mov	r6, r2

	int unicode;
	bool escape = false;
   d69a0:	2400      	movs	r4, #0

	for(int ii = token->start; ii < token->end; ii++) {
   d69a2:	68b8      	ldr	r0, [r7, #8]
   d69a4:	4285      	cmp	r5, r0
   d69a6:	da46      	bge.n	d6a36 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xa2>
   d69a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
		if (escape) {
   d69ac:	b3cc      	cbz	r4, d6a22 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x8e>
			escape = false;
			switch(buffer[ii]) {
   d69ae:	5d59      	ldrb	r1, [r3, r5]
   d69b0:	296e      	cmp	r1, #110	; 0x6e
   d69b2:	eb03 0205 	add.w	r2, r3, r5
   d69b6:	d00f      	beq.n	d69d8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
   d69b8:	d805      	bhi.n	d69c6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x32>
   d69ba:	2962      	cmp	r1, #98	; 0x62
   d69bc:	d00a      	beq.n	d69d4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x40>
   d69be:	2966      	cmp	r1, #102	; 0x66
   d69c0:	d10b      	bne.n	d69da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
   d69c2:	210c      	movs	r1, #12
   d69c4:	e009      	b.n	d69da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
			switch(buffer[ii]) {
   d69c6:	2974      	cmp	r1, #116	; 0x74
   d69c8:	d00e      	beq.n	d69e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x54>
   d69ca:	2975      	cmp	r1, #117	; 0x75
   d69cc:	d00e      	beq.n	d69ec <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x58>
   d69ce:	2972      	cmp	r1, #114	; 0x72
   d69d0:	d103      	bne.n	d69da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
   d69d2:	e007      	b.n	d69e4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x50>
			case 'b':
				str.append('\b');
   d69d4:	2108      	movs	r1, #8
   d69d6:	e000      	b.n	d69da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
			case 'f':
				str.append('\f');
				break;

			case 'n':
				str.append('\n');
   d69d8:	210a      	movs	r1, #10
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
   d69da:	4630      	mov	r0, r6
   d69dc:	f7ff ffa0 	bl	d6920 <_ZN16JsonParserString6appendEc>
	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
   d69e0:	2400      	movs	r4, #0
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
				break;
   d69e2:	e026      	b.n	d6a32 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9e>
			case 'n':
				str.append('\n');
				break;

			case 'r':
				str.append('\r');
   d69e4:	210d      	movs	r1, #13
   d69e6:	e7f8      	b.n	d69da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
				break;

			case 't':
				str.append('\t');
   d69e8:	2109      	movs	r1, #9
   d69ea:	e7f6      	b.n	d69da <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
				break;

			case 'u':
				if ((ii + 4) < token->end) {
   d69ec:	1d2b      	adds	r3, r5, #4
   d69ee:	4298      	cmp	r0, r3
   d69f0:	ddf6      	ble.n	d69e0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
   d69f2:	2300      	movs	r3, #0
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
   d69f4:	a802      	add	r0, sp, #8
   d69f6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   d69fa:	5419      	strb	r1, [r3, r0]
			case 'u':
				if ((ii + 4) < token->end) {
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
   d69fc:	3301      	adds	r3, #1
   d69fe:	2b04      	cmp	r3, #4
   d6a00:	d1f8      	bne.n	d69f4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x60>
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
   d6a02:	2300      	movs	r3, #0
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d6a04:	aa01      	add	r2, sp, #4
   d6a06:	490e      	ldr	r1, [pc, #56]	; (d6a40 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xac>)
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
   d6a08:	f88d 300c 	strb.w	r3, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d6a0c:	f001 f9e4 	bl	d7dd8 <sscanf>
   d6a10:	2801      	cmp	r0, #1
   d6a12:	d1e5      	bne.n	d69e0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
						appendUtf8((uint16_t)unicode, str);
   d6a14:	4631      	mov	r1, r6
   d6a16:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d6a1a:	f7ff ff95 	bl	d6948 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   d6a1e:	3505      	adds	r5, #5
   d6a20:	e7de      	b.n	d69e0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
				str.append(buffer[ii]);
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
   d6a22:	5d59      	ldrb	r1, [r3, r5]
   d6a24:	295c      	cmp	r1, #92	; 0x5c
   d6a26:	d003      	beq.n	d6a30 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9c>
			escape = true;
		}
		else {
			str.append(buffer[ii]);
   d6a28:	4630      	mov	r0, r6
   d6a2a:	f7ff ff79 	bl	d6920 <_ZN16JsonParserString6appendEc>
   d6a2e:	e000      	b.n	d6a32 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9e>
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
			escape = true;
   d6a30:	2401      	movs	r4, #1
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
   d6a32:	3501      	adds	r5, #1
   d6a34:	e7b5      	b.n	d69a2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xe>
			str.append(buffer[ii]);
		}
	}

	return true;
}
   d6a36:	2001      	movs	r0, #1
   d6a38:	b004      	add	sp, #16
   d6a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a3e:	bf00      	nop
   d6a40:	000db774 	.word	0x000db774

000d6a44 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d6a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6a46:	460c      	mov	r4, r1
   d6a48:	4606      	mov	r6, r0

	result = "";
   d6a4a:	490c      	ldr	r1, [pc, #48]	; (d6a7c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   d6a4c:	4610      	mov	r0, r2
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d6a4e:	4615      	mov	r5, r2

	result = "";
   d6a50:	f002 f8da 	bl	d8c08 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   d6a54:	68a3      	ldr	r3, [r4, #8]
   d6a56:	6861      	ldr	r1, [r4, #4]
   d6a58:	1a59      	subs	r1, r3, r1
   d6a5a:	3101      	adds	r1, #1
   d6a5c:	4628      	mov	r0, r5
   d6a5e:	f002 f858 	bl	d8b12 <_ZN6String7reserveEj>


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d6a62:	2300      	movs	r3, #0

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
   d6a64:	466a      	mov	r2, sp
   d6a66:	4621      	mov	r1, r4
   d6a68:	4630      	mov	r0, r6


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d6a6a:	9500      	str	r5, [sp, #0]
   d6a6c:	9301      	str	r3, [sp, #4]
   d6a6e:	9302      	str	r3, [sp, #8]
   d6a70:	9303      	str	r3, [sp, #12]

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
   d6a72:	f7ff ff8f 	bl	d6994 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   d6a76:	b004      	add	sp, #16
   d6a78:	bd70      	pop	{r4, r5, r6, pc}
   d6a7a:	bf00      	nop
   d6a7c:	000dbd08 	.word	0x000dbd08

000d6a80 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d6a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6a84:	b089      	sub	sp, #36	; 0x24
   d6a86:	4606      	mov	r6, r0
   d6a88:	460f      	mov	r7, r1

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d6a8a:	a804      	add	r0, sp, #16
   d6a8c:	4911      	ldr	r1, [pc, #68]	; (d6ad4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x54>)

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d6a8e:	4690      	mov	r8, r2
   d6a90:	4699      	mov	r9, r3

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d6a92:	f002 f867 	bl	d8b64 <_ZN6StringC1EPK19__FlashStringHelper>

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d6a96:	2500      	movs	r5, #0
   d6a98:	9500      	str	r5, [sp, #0]
   d6a9a:	464b      	mov	r3, r9
   d6a9c:	aa03      	add	r2, sp, #12
   d6a9e:	4639      	mov	r1, r7
   d6aa0:	4630      	mov	r0, r6
   d6aa2:	f7ff ff08 	bl	d68b6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   d6aa6:	4604      	mov	r4, r0
   d6aa8:	b168      	cbz	r0, d6ac6 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
		if (getTokenValue(key, keyName) && keyName == name) {
   d6aaa:	aa04      	add	r2, sp, #16
   d6aac:	9903      	ldr	r1, [sp, #12]
   d6aae:	4630      	mov	r0, r6
   d6ab0:	f7ff ffc8 	bl	d6a44 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   d6ab4:	4604      	mov	r4, r0
   d6ab6:	b120      	cbz	r0, d6ac2 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x42>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d6ab8:	4641      	mov	r1, r8
   d6aba:	a804      	add	r0, sp, #16
   d6abc:	f002 f8f7 	bl	d8cae <_ZNK6String6equalsEPKc>
   d6ac0:	b908      	cbnz	r0, d6ac6 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d6ac2:	3501      	adds	r5, #1
   d6ac4:	e7e8      	b.n	d6a98 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d6ac6:	a804      	add	r0, sp, #16
   d6ac8:	f002 f805 	bl	d8ad6 <_ZN6StringD1Ev>
		if (getTokenValue(key, keyName) && keyName == name) {
			return true;
		}
	}
	return false;
}
   d6acc:	4620      	mov	r0, r4
   d6ace:	b009      	add	sp, #36	; 0x24
   d6ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6ad4:	000dbd08 	.word	0x000dbd08

000d6ad8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   d6ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   d6adc:	6844      	ldr	r4, [r0, #4]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d6ade:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d6ae2:	f04f 0e03 	mov.w	lr, #3
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d6ae6:	f8d0 c000 	ldr.w	ip, [r0]
   d6aea:	4594      	cmp	ip, r2
   d6aec:	f080 819e 	bcs.w	d6e2c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
   d6af0:	f811 800c 	ldrb.w	r8, [r1, ip]
   d6af4:	f1b8 0f00 	cmp.w	r8, #0
   d6af8:	f000 8198 	beq.w	d6e2c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d6afc:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d6b00:	f000 8116 	beq.w	d6d30 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x258>
   d6b04:	d818      	bhi.n	d6b38 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x60>
   d6b06:	f1b8 0f0d 	cmp.w	r8, #13
   d6b0a:	f000 818b 	beq.w	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d6b0e:	d806      	bhi.n	d6b1e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x46>
   d6b10:	f1a8 0809 	sub.w	r8, r8, #9
   d6b14:	f1b8 0f01 	cmp.w	r8, #1
   d6b18:	f240 8184 	bls.w	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d6b1c:	e13d      	b.n	d6d9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
   d6b1e:	f1b8 0f20 	cmp.w	r8, #32
   d6b22:	f000 817f 	beq.w	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d6b26:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   d6b2a:	f040 8136 	bne.w	d6d9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
   d6b2e:	f10c 0901 	add.w	r9, ip, #1
   d6b32:	f8c0 9000 	str.w	r9, [r0]
   d6b36:	e092      	b.n	d6c5e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x186>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d6b38:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   d6b3c:	d03c      	beq.n	d6bb8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
   d6b3e:	d807      	bhi.n	d6b50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x78>
   d6b40:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   d6b44:	f000 80f0 	beq.w	d6d28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
   d6b48:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   d6b4c:	d007      	beq.n	d6b5e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
   d6b4e:	e124      	b.n	d6d9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
   d6b50:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d6b54:	d003      	beq.n	d6b5e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
   d6b56:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d6b5a:	d02d      	beq.n	d6bb8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
   d6b5c:	e11d      	b.n	d6d9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
			case '{': case '[':
				count++;
   d6b5e:	3401      	adds	r4, #1
				if (tokens == NULL) {
   d6b60:	2b00      	cmp	r3, #0
   d6b62:	f000 815f 	beq.w	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d6b66:	6847      	ldr	r7, [r0, #4]
   d6b68:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6b6a:	42be      	cmp	r6, r7
   d6b6c:	f240 817d 	bls.w	d6e6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x392>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d6b70:	f107 0c01 	add.w	ip, r7, #1
   d6b74:	f8c0 c004 	str.w	ip, [r0, #4]
   d6b78:	ea4f 1c07 	mov.w	ip, r7, lsl #4
   d6b7c:	eb03 0a0c 	add.w	sl, r3, ip
	tok->start = tok->end = -1;
	tok->size = 0;
   d6b80:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d6b82:	f8ca 5004 	str.w	r5, [sl, #4]
	tok->size = 0;
   d6b86:	f8ca 600c 	str.w	r6, [sl, #12]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d6b8a:	f8ca 5008 	str.w	r5, [sl, #8]
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
   d6b8e:	6887      	ldr	r7, [r0, #8]
   d6b90:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
   d6b92:	bf1f      	itttt	ne
   d6b94:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
   d6b98:	f8d9 700c 	ldrne.w	r7, [r9, #12]
   d6b9c:	3701      	addne	r7, #1
   d6b9e:	f8c9 700c 	strne.w	r7, [r9, #12]
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   d6ba2:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d6ba6:	bf14      	ite	ne
   d6ba8:	2702      	movne	r7, #2
   d6baa:	2701      	moveq	r7, #1
   d6bac:	f803 700c 	strb.w	r7, [r3, ip]
				token->start = parser->pos;
   d6bb0:	6807      	ldr	r7, [r0, #0]
   d6bb2:	f8ca 7004 	str.w	r7, [sl, #4]
   d6bb6:	e0b7      	b.n	d6d28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   d6bb8:	2b00      	cmp	r3, #0
   d6bba:	f000 8133 	beq.w	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d6bbe:	6847      	ldr	r7, [r0, #4]
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d6bc0:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d6bc4:	f107 5880 	add.w	r8, r7, #268435456	; 0x10000000
   d6bc8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d6bcc:	bf14      	ite	ne
   d6bce:	f04f 0a02 	movne.w	sl, #2
   d6bd2:	f04f 0a01 	moveq.w	sl, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d6bd6:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
   d6bda:	eb03 1808 	add.w	r8, r3, r8, lsl #4
   d6bde:	f1b9 0f00 	cmp.w	r9, #0
   d6be2:	db19      	blt.n	d6c18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x140>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d6be4:	f8d8 7004 	ldr.w	r7, [r8, #4]
   d6be8:	3701      	adds	r7, #1
   d6bea:	d010      	beq.n	d6c0e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
   d6bec:	f8d8 7008 	ldr.w	r7, [r8, #8]
   d6bf0:	1c7e      	adds	r6, r7, #1
   d6bf2:	d10c      	bne.n	d6c0e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
						if (token->type != type) {
   d6bf4:	f898 b000 	ldrb.w	fp, [r8]
   d6bf8:	45d3      	cmp	fp, sl
   d6bfa:	f040 8129 	bne.w	d6e50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
   d6bfe:	6087      	str	r7, [r0, #8]
						token->end = parser->pos + 1;
   d6c00:	f10c 0701 	add.w	r7, ip, #1
   d6c04:	f8c8 7008 	str.w	r7, [r8, #8]
   d6c08:	eb03 1c09 	add.w	ip, r3, r9, lsl #4
   d6c0c:	e011      	b.n	d6c32 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15a>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d6c0e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   d6c12:	f1a8 0810 	sub.w	r8, r8, #16
   d6c16:	e7e2      	b.n	d6bde <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x106>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   d6c18:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d6c1c:	f040 8102 	bne.w	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d6c20:	e116      	b.n	d6e50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
				for (; i >= 0; i--) {
   d6c22:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   d6c26:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d6c2a:	f1ac 0c10 	sub.w	ip, ip, #16
   d6c2e:	f000 80f9 	beq.w	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d6c32:	f8dc 7004 	ldr.w	r7, [ip, #4]
   d6c36:	3701      	adds	r7, #1
   d6c38:	d0f3      	beq.n	d6c22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
   d6c3a:	f8dc 7008 	ldr.w	r7, [ip, #8]
   d6c3e:	3701      	adds	r7, #1
   d6c40:	d1ef      	bne.n	d6c22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
						parser->toksuper = i;
   d6c42:	f8c0 9008 	str.w	r9, [r0, #8]
						break;
   d6c46:	e0ed      	b.n	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d6c48:	f811 7008 	ldrb.w	r7, [r1, r8]
   d6c4c:	2f00      	cmp	r7, #0
   d6c4e:	d068      	beq.n	d6d22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
   d6c50:	2f22      	cmp	r7, #34	; 0x22
   d6c52:	d009      	beq.n	d6c68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
   d6c54:	2f5c      	cmp	r7, #92	; 0x5c
   d6c56:	d026      	beq.n	d6ca6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ce>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d6c58:	6807      	ldr	r7, [r0, #0]
   d6c5a:	3701      	adds	r7, #1
   d6c5c:	6007      	str	r7, [r0, #0]
   d6c5e:	f8d0 8000 	ldr.w	r8, [r0]
   d6c62:	4542      	cmp	r2, r8
   d6c64:	d8f0      	bhi.n	d6c48 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
   d6c66:	e05c      	b.n	d6d22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
   d6c68:	2b00      	cmp	r3, #0
   d6c6a:	f000 80ce 	beq.w	d6e0a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d6c6e:	6847      	ldr	r7, [r0, #4]
   d6c70:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6c72:	42be      	cmp	r6, r7
   d6c74:	f240 80f7 	bls.w	d6e66 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d6c78:	f107 0c01 	add.w	ip, r7, #1
   d6c7c:	013f      	lsls	r7, r7, #4
   d6c7e:	f8c0 c004 	str.w	ip, [r0, #4]
   d6c82:	eb03 0c07 	add.w	ip, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
   d6c86:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d6c88:	f8cc 5008 	str.w	r5, [ip, #8]
   d6c8c:	f8cc 5004 	str.w	r5, [ip, #4]
	tok->size = 0;
   d6c90:	f8cc 600c 	str.w	r6, [ip, #12]
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   d6c94:	f8d0 8000 	ldr.w	r8, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d6c98:	f803 e007 	strb.w	lr, [r3, r7]
	token->start = start;
   d6c9c:	f8cc 9004 	str.w	r9, [ip, #4]
	token->end = end;
   d6ca0:	f8cc 8008 	str.w	r8, [ip, #8]
   d6ca4:	e0b1      	b.n	d6e0a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
   d6ca6:	f108 0701 	add.w	r7, r8, #1
   d6caa:	42ba      	cmp	r2, r7
   d6cac:	d9d4      	bls.n	d6c58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
			int i;
			parser->pos++;
   d6cae:	6007      	str	r7, [r0, #0]
			switch (js[parser->pos]) {
   d6cb0:	5dcf      	ldrb	r7, [r1, r7]
   d6cb2:	2f66      	cmp	r7, #102	; 0x66
   d6cb4:	d0d0      	beq.n	d6c58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d6cb6:	d808      	bhi.n	d6cca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f2>
   d6cb8:	2f2f      	cmp	r7, #47	; 0x2f
   d6cba:	d0cd      	beq.n	d6c58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d6cbc:	d801      	bhi.n	d6cc2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ea>
   d6cbe:	2f22      	cmp	r7, #34	; 0x22
   d6cc0:	e007      	b.n	d6cd2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
   d6cc2:	2f5c      	cmp	r7, #92	; 0x5c
   d6cc4:	d0c8      	beq.n	d6c58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d6cc6:	2f62      	cmp	r7, #98	; 0x62
   d6cc8:	e003      	b.n	d6cd2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
   d6cca:	2f72      	cmp	r7, #114	; 0x72
   d6ccc:	d0c4      	beq.n	d6c58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d6cce:	d802      	bhi.n	d6cd6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fe>
   d6cd0:	2f6e      	cmp	r7, #110	; 0x6e
   d6cd2:	d175      	bne.n	d6dc0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
   d6cd4:	e7c0      	b.n	d6c58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d6cd6:	2f74      	cmp	r7, #116	; 0x74
   d6cd8:	d0be      	beq.n	d6c58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d6cda:	2f75      	cmp	r7, #117	; 0x75
   d6cdc:	d170      	bne.n	d6dc0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
   d6cde:	f108 0702 	add.w	r7, r8, #2
   d6ce2:	6007      	str	r7, [r0, #0]
   d6ce4:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d6ce8:	f8d0 8000 	ldr.w	r8, [r0]
   d6cec:	4542      	cmp	r2, r8
   d6cee:	d803      	bhi.n	d6cf8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x220>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
   d6cf0:	6807      	ldr	r7, [r0, #0]
   d6cf2:	3f01      	subs	r7, #1
   d6cf4:	6007      	str	r7, [r0, #0]
   d6cf6:	e7af      	b.n	d6c58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d6cf8:	f811 7008 	ldrb.w	r7, [r1, r8]
   d6cfc:	2f00      	cmp	r7, #0
   d6cfe:	d0f7      	beq.n	d6cf0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   d6d00:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
   d6d04:	f1bb 0f09 	cmp.w	fp, #9
   d6d08:	d904      	bls.n	d6d14 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23c>
   d6d0a:	f027 0720 	bic.w	r7, r7, #32
   d6d0e:	3f41      	subs	r7, #65	; 0x41
   d6d10:	2f05      	cmp	r7, #5
   d6d12:	d855      	bhi.n	d6dc0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
   d6d14:	f108 0701 	add.w	r7, r8, #1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d6d18:	f1ba 0a01 	subs.w	sl, sl, #1
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
   d6d1c:	6007      	str	r7, [r0, #0]
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d6d1e:	d1e3      	bne.n	d6ce8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
   d6d20:	e7e6      	b.n	d6cf0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
   d6d22:	f8c0 c000 	str.w	ip, [r0]
   d6d26:	e09a      	b.n	d6e5e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x386>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   d6d28:	6847      	ldr	r7, [r0, #4]
   d6d2a:	3f01      	subs	r7, #1
   d6d2c:	6087      	str	r7, [r0, #8]
				break;
   d6d2e:	e079      	b.n	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
   d6d30:	2b00      	cmp	r3, #0
   d6d32:	d077      	beq.n	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d6d34:	6887      	ldr	r7, [r0, #8]
   d6d36:	1c7e      	adds	r6, r7, #1
   d6d38:	d074      	beq.n	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   d6d3a:	013f      	lsls	r7, r7, #4
   d6d3c:	5ddf      	ldrb	r7, [r3, r7]
   d6d3e:	3f01      	subs	r7, #1
   d6d40:	2f01      	cmp	r7, #1
   d6d42:	d96f      	bls.n	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
   d6d44:	6847      	ldr	r7, [r0, #4]
   d6d46:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
   d6d4a:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
   d6d4e:	f1b8 0f00 	cmp.w	r8, #0
   d6d52:	db67      	blt.n	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   d6d54:	f81c 7c10 	ldrb.w	r7, [ip, #-16]
   d6d58:	3f01      	subs	r7, #1
   d6d5a:	2f01      	cmp	r7, #1
   d6d5c:	d80a      	bhi.n	d6d74 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   d6d5e:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
   d6d62:	3701      	adds	r7, #1
   d6d64:	d006      	beq.n	d6d74 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
   d6d66:	f85c 7c08 	ldr.w	r7, [ip, #-8]
   d6d6a:	3701      	adds	r7, #1
   d6d6c:	d102      	bne.n	d6d74 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
								parser->toksuper = i;
   d6d6e:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   d6d72:	e057      	b.n	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
   d6d74:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d6d78:	f1ac 0c10 	sub.w	ip, ip, #16
   d6d7c:	e7e7      	b.n	d6d4e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x276>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d6d7e:	f811 7008 	ldrb.w	r7, [r1, r8]
   d6d82:	b307      	cbz	r7, d6dc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
   d6d84:	2f20      	cmp	r7, #32
   d6d86:	d01e      	beq.n	d6dc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d6d88:	d810      	bhi.n	d6dac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d4>
   d6d8a:	2f09      	cmp	r7, #9
   d6d8c:	d20a      	bcs.n	d6da4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2cc>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   d6d8e:	3f20      	subs	r7, #32
   d6d90:	2f5e      	cmp	r7, #94	; 0x5e
   d6d92:	d815      	bhi.n	d6dc0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d6d94:	f108 0701 	add.w	r7, r8, #1
   d6d98:	6007      	str	r7, [r0, #0]
   d6d9a:	f8d0 8000 	ldr.w	r8, [r0]
   d6d9e:	4542      	cmp	r2, r8
   d6da0:	d8ed      	bhi.n	d6d7e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a6>
   d6da2:	e010      	b.n	d6dc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
   d6da4:	2f0a      	cmp	r7, #10
   d6da6:	d90e      	bls.n	d6dc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d6da8:	2f0d      	cmp	r7, #13
   d6daa:	e007      	b.n	d6dbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
   d6dac:	2f3a      	cmp	r7, #58	; 0x3a
   d6dae:	d00a      	beq.n	d6dc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d6db0:	d801      	bhi.n	d6db6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2de>
   d6db2:	2f2c      	cmp	r7, #44	; 0x2c
   d6db4:	e002      	b.n	d6dbc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
   d6db6:	2f5d      	cmp	r7, #93	; 0x5d
   d6db8:	d005      	beq.n	d6dc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d6dba:	2f7d      	cmp	r7, #125	; 0x7d
   d6dbc:	d1e7      	bne.n	d6d8e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b6>
   d6dbe:	e002      	b.n	d6dc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
   d6dc0:	f8c0 c000 	str.w	ip, [r0]
   d6dc4:	e044      	b.n	d6e50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
   d6dc6:	b913      	cbnz	r3, d6dce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f6>
		parser->pos--;
   d6dc8:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   d6dcc:	e01c      	b.n	d6e08 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x330>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d6dce:	6847      	ldr	r7, [r0, #4]
   d6dd0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6dd2:	42be      	cmp	r6, r7
   d6dd4:	d947      	bls.n	d6e66 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d6dd6:	f107 0801 	add.w	r8, r7, #1
   d6dda:	013f      	lsls	r7, r7, #4
   d6ddc:	f8c0 8004 	str.w	r8, [r0, #4]
   d6de0:	eb03 0807 	add.w	r8, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
   d6de4:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d6de6:	f8c8 5008 	str.w	r5, [r8, #8]
   d6dea:	f8c8 5004 	str.w	r5, [r8, #4]
	tok->size = 0;
   d6dee:	f8c8 600c 	str.w	r6, [r8, #12]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d6df2:	f04f 0604 	mov.w	r6, #4
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
		return JSMN_ERROR_NOMEM;
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   d6df6:	f8d0 9000 	ldr.w	r9, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d6dfa:	55de      	strb	r6, [r3, r7]
	token->start = start;
   d6dfc:	f8c8 c004 	str.w	ip, [r8, #4]
	token->end = end;
   d6e00:	f8c8 9008 	str.w	r9, [r8, #8]
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
   d6e04:	6807      	ldr	r7, [r0, #0]
   d6e06:	3f01      	subs	r7, #1
   d6e08:	6007      	str	r7, [r0, #0]
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
   d6e0a:	6887      	ldr	r7, [r0, #8]
   d6e0c:	1c7e      	adds	r6, r7, #1
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
   d6e0e:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   d6e12:	d007      	beq.n	d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d6e14:	b133      	cbz	r3, d6e24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
					tokens[parser->toksuper].size++;
   d6e16:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
   d6e1a:	f8dc 700c 	ldr.w	r7, [ip, #12]
   d6e1e:	3701      	adds	r7, #1
   d6e20:	f8cc 700c 	str.w	r7, [ip, #12]
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d6e24:	6807      	ldr	r7, [r0, #0]
   d6e26:	3701      	adds	r7, #1
   d6e28:	6007      	str	r7, [r0, #0]
   d6e2a:	e65c      	b.n	d6ae6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
   d6e2c:	b1a3      	cbz	r3, d6e58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x380>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d6e2e:	6842      	ldr	r2, [r0, #4]
   d6e30:	1e51      	subs	r1, r2, #1
   d6e32:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d6e36:	2900      	cmp	r1, #0
   d6e38:	db0e      	blt.n	d6e58 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x380>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   d6e3a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   d6e3e:	3201      	adds	r2, #1
   d6e40:	d003      	beq.n	d6e4a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x372>
   d6e42:	f853 2c08 	ldr.w	r2, [r3, #-8]
   d6e46:	3201      	adds	r2, #1
   d6e48:	d009      	beq.n	d6e5e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x386>
#endif
		}
	}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
   d6e4a:	3901      	subs	r1, #1
   d6e4c:	3b10      	subs	r3, #16
   d6e4e:	e7f2      	b.n	d6e36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
   d6e50:	f06f 0001 	mvn.w	r0, #1
   d6e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e58:	4620      	mov	r0, r4
   d6e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
				return JSMN_ERROR_PART;
   d6e5e:	f06f 0002 	mvn.w	r0, #2
   d6e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
   d6e66:	f8c0 c000 	str.w	ip, [r0]
		return JSMN_ERROR_NOMEM;
   d6e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6e72 <_ZN10JsonParser5parseEv>:
	else {
		return false;
	}
}

bool JsonParser::parse() {
   d6e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (tokens) {
   d6e74:	6943      	ldr	r3, [r0, #20]
	else {
		return false;
	}
}

bool JsonParser::parse() {
   d6e76:	4604      	mov	r4, r0
   d6e78:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   d6e7c:	b1f3      	cbz	r3, d6ebc <_ZN10JsonParser5parseEv+0x4a>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d6e7e:	2200      	movs	r2, #0
   d6e80:	6202      	str	r2, [r0, #32]
	parser->toknext = 0;
   d6e82:	6242      	str	r2, [r0, #36]	; 0x24
	parser->toksuper = -1;
   d6e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6e88:	6282      	str	r2, [r0, #40]	; 0x28

bool JsonParser::parse() {
	if (tokens) {
		// Try to use the existing token buffer if possible
		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d6e8a:	69c2      	ldr	r2, [r0, #28]
   d6e8c:	9200      	str	r2, [sp, #0]
   d6e8e:	68c2      	ldr	r2, [r0, #12]
   d6e90:	6841      	ldr	r1, [r0, #4]
   d6e92:	4630      	mov	r0, r6
   d6e94:	f7ff fe20 	bl	d6ad8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   d6e98:	1c43      	adds	r3, r0, #1
   d6e9a:	d109      	bne.n	d6eb0 <_ZN10JsonParser5parseEv+0x3e>
			if (staticBuffers) {
   d6e9c:	7c25      	ldrb	r5, [r4, #16]
   d6e9e:	b10d      	cbz	r5, d6ea4 <_ZN10JsonParser5parseEv+0x32>
				// If using static buffers and there is not enough space, fail
				return false;
   d6ea0:	2000      	movs	r0, #0
   d6ea2:	e033      	b.n	d6f0c <_ZN10JsonParser5parseEv+0x9a>
			}
			free(tokens);
   d6ea4:	6960      	ldr	r0, [r4, #20]
   d6ea6:	f000 ff7f 	bl	d7da8 <free>
			tokens = 0;
   d6eaa:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   d6eac:	61e5      	str	r5, [r4, #28]
   d6eae:	e005      	b.n	d6ebc <_ZN10JsonParser5parseEv+0x4a>
		}
		else
		if (result < 0) {
   d6eb0:	2800      	cmp	r0, #0
   d6eb2:	dbf5      	blt.n	d6ea0 <_ZN10JsonParser5parseEv+0x2e>
			// Failed to parse: JSMN_ERROR_INVAL or JSMN_ERROR_PART
			return false;
		}
		else {
			tokensEnd = &tokens[result];
   d6eb4:	6963      	ldr	r3, [r4, #20]
   d6eb6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   d6eba:	e025      	b.n	d6f08 <_ZN10JsonParser5parseEv+0x96>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d6ebc:	2500      	movs	r5, #0
	parser->toknext = 0;
	parser->toksuper = -1;
   d6ebe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d6ec2:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
   d6ec4:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
   d6ec6:	62a7      	str	r7, [r4, #40]	; 0x28
		}
	}

	// Pass 1: determine now many tokens we need
	JsonParserGeneratorRK::jsmn_init(&parser);
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d6ec8:	9500      	str	r5, [sp, #0]
   d6eca:	462b      	mov	r3, r5
   d6ecc:	68e2      	ldr	r2, [r4, #12]
   d6ece:	6861      	ldr	r1, [r4, #4]
   d6ed0:	4630      	mov	r0, r6
   d6ed2:	f7ff fe01 	bl	d6ad8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   d6ed6:	2800      	cmp	r0, #0
   d6ed8:	dbe2      	blt.n	d6ea0 <_ZN10JsonParser5parseEv+0x2e>
	}

	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
   d6eda:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   d6edc:	d013      	beq.n	d6f06 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d6ede:	0100      	lsls	r0, r0, #4
   d6ee0:	f000 ff5a 	bl	d7d98 <malloc>

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d6ee4:	69e2      	ldr	r2, [r4, #28]
	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d6ee6:	6160      	str	r0, [r4, #20]
   d6ee8:	4603      	mov	r3, r0

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d6eea:	9200      	str	r2, [sp, #0]
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d6eec:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
   d6eee:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
   d6ef0:	62a7      	str	r7, [r4, #40]	; 0x28
	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d6ef2:	68e2      	ldr	r2, [r4, #12]
   d6ef4:	6861      	ldr	r1, [r4, #4]
   d6ef6:	4630      	mov	r0, r6
   d6ef8:	f7ff fdee 	bl	d6ad8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>

		tokensEnd = &tokens[result];
   d6efc:	6963      	ldr	r3, [r4, #20]
   d6efe:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   d6f02:	61a0      	str	r0, [r4, #24]
   d6f04:	e001      	b.n	d6f0a <_ZN10JsonParser5parseEv+0x98>
	}
	else {
		tokensEnd = tokens;
   d6f06:	6963      	ldr	r3, [r4, #20]
   d6f08:	61a3      	str	r3, [r4, #24]
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
		printf("%d, %d, %d, %d\n", token->type, token->start, token->end, token->size);
	}
	*/

	return true;
   d6f0a:	2001      	movs	r0, #1
}
   d6f0c:	b003      	add	sp, #12
   d6f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6f10 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d6f10:	f000 bcd6 	b.w	d78c0 <HAL_Pin_Map>

000d6f14 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d6f14:	f000 bcd4 	b.w	d78c0 <HAL_Pin_Map>

000d6f18 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d6f18:	f000 bcd2 	b.w	d78c0 <HAL_Pin_Map>

000d6f1c <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d6f1c:	f000 bcd0 	b.w	d78c0 <HAL_Pin_Map>

000d6f20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6f20:	b570      	push	{r4, r5, r6, lr}
   d6f22:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6f24:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6f26:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6f28:	b149      	cbz	r1, d6f3e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6f2a:	f003 fc10 	bl	da74e <strlen>
   d6f2e:	682b      	ldr	r3, [r5, #0]
   d6f30:	4602      	mov	r2, r0
   d6f32:	4621      	mov	r1, r4
   d6f34:	4628      	mov	r0, r5
   d6f36:	68db      	ldr	r3, [r3, #12]
    }
   d6f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6f3c:	4718      	bx	r3
    }
   d6f3e:	bd70      	pop	{r4, r5, r6, pc}

000d6f40 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d6f40:	f000 bcbe 	b.w	d78c0 <HAL_Pin_Map>

000d6f44 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d6f44:	f000 bcbc 	b.w	d78c0 <HAL_Pin_Map>

000d6f48 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d6f48:	f000 bcba 	b.w	d78c0 <HAL_Pin_Map>

000d6f4c <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d6f4c:	f000 bcb8 	b.w	d78c0 <HAL_Pin_Map>

000d6f50 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d6f50:	f000 bcb6 	b.w	d78c0 <HAL_Pin_Map>

000d6f54 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d6f54:	f000 bcb4 	b.w	d78c0 <HAL_Pin_Map>

000d6f58 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d6f58:	f000 bcb2 	b.w	d78c0 <HAL_Pin_Map>

000d6f5c <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6f5c:	f000 bcb0 	b.w	d78c0 <HAL_Pin_Map>

000d6f60 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6f60:	f000 bcae 	b.w	d78c0 <HAL_Pin_Map>

000d6f64 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d6f64:	f000 bcac 	b.w	d78c0 <HAL_Pin_Map>

000d6f68 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6f68:	f000 bcaa 	b.w	d78c0 <HAL_Pin_Map>

000d6f6c <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6f6c:	f000 bca8 	b.w	d78c0 <HAL_Pin_Map>

000d6f70 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6f70:	f000 bca6 	b.w	d78c0 <HAL_Pin_Map>

000d6f74 <_ZN20SparkCorePolledTimer5ResetEv>:

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
}

void SparkCorePolledTimer::Reset(void){
   d6f74:	b510      	push	{r4, lr}
   d6f76:	4604      	mov	r4, r0
   d6f78:	f000 fc8a 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
    timeMark=millis();
   d6f7c:	6020      	str	r0, [r4, #0]
   d6f7e:	bd10      	pop	{r4, pc}

000d6f80 <_ZN20SparkCorePolledTimerC1Em>:
//Check header file for detials on use...
//#include "application.h"
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
   d6f80:	b538      	push	{r3, r4, r5, lr}
   d6f82:	4604      	mov	r4, r0
   d6f84:	460d      	mov	r5, r1
    Reset();
   d6f86:	f7ff fff5 	bl	d6f74 <_ZN20SparkCorePolledTimer5ResetEv>
    SetTimeout(timeoutMS);
    callback=NULL;
   d6f8a:	2300      	movs	r3, #0
}

void SparkCorePolledTimer::SetTimeout(unsigned long timeoutMS){
    intervalMS=timeoutMS;
   d6f8c:	6065      	str	r5, [r4, #4]
#include "SparkCorePolledTimer.h"

SparkCorePolledTimer::SparkCorePolledTimer(unsigned long timeoutMS){
    Reset();
    SetTimeout(timeoutMS);
    callback=NULL;
   d6f8e:	60a3      	str	r3, [r4, #8]
}
   d6f90:	4620      	mov	r0, r4
   d6f92:	bd38      	pop	{r3, r4, r5, pc}

000d6f94 <_ZN20SparkCorePolledTimer10HasElapsedEv>:

void SparkCorePolledTimer::Reset(void){
    timeMark=millis();
}

int SparkCorePolledTimer::HasElapsed(){
   d6f94:	b510      	push	{r4, lr}
   d6f96:	4604      	mov	r4, r0
   d6f98:	f000 fc7a 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
  
    timeCurrent=millis();
    timeElapsed=timeCurrent-timeMark;  


    if(timeElapsed>=intervalMS) {
   d6f9c:	6823      	ldr	r3, [r4, #0]
   d6f9e:	1ac0      	subs	r0, r0, r3
   d6fa0:	6863      	ldr	r3, [r4, #4]
   d6fa2:	4298      	cmp	r0, r3
   d6fa4:	d304      	bcc.n	d6fb0 <_ZN20SparkCorePolledTimer10HasElapsedEv+0x1c>
        Reset();
   d6fa6:	4620      	mov	r0, r4
   d6fa8:	f7ff ffe4 	bl	d6f74 <_ZN20SparkCorePolledTimer5ResetEv>
        result=true;
   d6fac:	2001      	movs	r0, #1
   d6fae:	bd10      	pop	{r4, pc}
}

int SparkCorePolledTimer::HasElapsed(){
    unsigned long timeCurrent;
    unsigned long timeElapsed;
    int result=false;
   d6fb0:	2000      	movs	r0, #0
    if(timeElapsed>=intervalMS) {
        Reset();
        result=true;
    }
    return(result);  
}
   d6fb2:	bd10      	pop	{r4, pc}

000d6fb4 <_ZN20SparkCorePolledTimer6UpdateEv>:

void SparkCorePolledTimer::Update(void){
   d6fb4:	b510      	push	{r4, lr}
    if (callback!=NULL) {
   d6fb6:	6883      	ldr	r3, [r0, #8]
        result=true;
    }
    return(result);  
}

void SparkCorePolledTimer::Update(void){
   d6fb8:	4604      	mov	r4, r0
    if (callback!=NULL) {
   d6fba:	b133      	cbz	r3, d6fca <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
        if(HasElapsed()) {
   d6fbc:	f7ff ffea 	bl	d6f94 <_ZN20SparkCorePolledTimer10HasElapsedEv>
   d6fc0:	b118      	cbz	r0, d6fca <_ZN20SparkCorePolledTimer6UpdateEv+0x16>
            callback();
   d6fc2:	68a3      	ldr	r3, [r4, #8]
        }
    }
}
   d6fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void SparkCorePolledTimer::Update(void){
    if (callback!=NULL) {
        if(HasElapsed()) {
            callback();
   d6fc8:	4718      	bx	r3
   d6fca:	bd10      	pop	{r4, pc}

000d6fcc <_ZN20SparkCorePolledTimer11SetCallbackEPFvvE>:
        }
    }
}

void SparkCorePolledTimer::SetCallback(void (*callbackFunction)(void)){
    callback=callbackFunction;
   d6fcc:	6081      	str	r1, [r0, #8]
   d6fce:	4770      	bx	lr

000d6fd0 <_GLOBAL__sub_I__ZN20SparkCorePolledTimerC2Em>:
   d6fd0:	f000 bc76 	b.w	d78c0 <HAL_Pin_Map>

000d6fd4 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d6fd4:	f000 bf38 	b.w	d7e48 <delay>

000d6fd8 <_Z11BlynkMillisv>:
   d6fd8:	f000 bc5a 	b.w	d7890 <HAL_Timer_Get_Milli_Seconds>

000d6fdc <_GLOBAL__sub_I__Z10BlynkResetv>:
   d6fdc:	f000 bc70 	b.w	d78c0 <HAL_Pin_Map>

000d6fe0 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   d6fe0:	4770      	bx	lr

000d6fe2 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   d6fe2:	4770      	bx	lr

000d6fe4 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   d6fe4:	4770      	bx	lr
	...

000d6fe8 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d6fe8:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d6fea:	bf9a      	itte	ls
   d6fec:	4b02      	ldrls	r3, [pc, #8]	; (d6ff8 <GetReadHandler+0x10>)
   d6fee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   d6ff2:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   d6ff4:	4770      	bx	lr
   d6ff6:	bf00      	nop
   d6ff8:	000db9b0 	.word	0x000db9b0

000d6ffc <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d6ffc:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d6ffe:	bf9a      	itte	ls
   d7000:	4b02      	ldrls	r3, [pc, #8]	; (d700c <GetWriteHandler+0x10>)
   d7002:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   d7006:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   d7008:	4770      	bx	lr
   d700a:	bf00      	nop
   d700c:	000db7b0 	.word	0x000db7b0

000d7010 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d7010:	f000 bc56 	b.w	d78c0 <HAL_Pin_Map>

000d7014 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d7014:	f000 bc54 	b.w	d78c0 <HAL_Pin_Map>

000d7018 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d7018:	4b02      	ldr	r3, [pc, #8]	; (d7024 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d701a:	2201      	movs	r2, #1
   d701c:	701a      	strb	r2, [r3, #0]
   d701e:	f000 bc4f 	b.w	d78c0 <HAL_Pin_Map>
   d7022:	bf00      	nop
   d7024:	2003e368 	.word	0x2003e368

000d7028 <_ZL11expandColort>:
  tilesY(tY), remapFn(NULL) { }

// Expand 16-bit input color (Adafruit_GFX colorspace) to 24-bit (NeoPixel)
// (w/gamma adjustment)
static uint32_t expandColor(uint16_t color) {
  return ((uint32_t)pgm_read_byte(&gamma5[ color >> 11       ]) << 16) |
   d7028:	4a07      	ldr	r2, [pc, #28]	; (d7048 <_ZL11expandColort+0x20>)
   d702a:	12c3      	asrs	r3, r0, #11
         ((uint32_t)pgm_read_byte(&gamma6[(color >> 5) & 0x3F]) <<  8) |
                    pgm_read_byte(&gamma5[ color       & 0x1F]);
   d702c:	5cd1      	ldrb	r1, [r2, r3]

// Expand 16-bit input color (Adafruit_GFX colorspace) to 24-bit (NeoPixel)
// (w/gamma adjustment)
static uint32_t expandColor(uint16_t color) {
  return ((uint32_t)pgm_read_byte(&gamma5[ color >> 11       ]) << 16) |
         ((uint32_t)pgm_read_byte(&gamma6[(color >> 5) & 0x3F]) <<  8) |
   d702e:	f000 031f 	and.w	r3, r0, #31
   d7032:	f3c0 1045 	ubfx	r0, r0, #5, #6
                    pgm_read_byte(&gamma5[ color       & 0x1F]);
   d7036:	5cd3      	ldrb	r3, [r2, r3]
   d7038:	4a04      	ldr	r2, [pc, #16]	; (d704c <_ZL11expandColort+0x24>)
   d703a:	5c10      	ldrb	r0, [r2, r0]
   d703c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
}
   d7040:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d7044:	4770      	bx	lr
   d7046:	bf00      	nop
   d7048:	000dbbe8 	.word	0x000dbbe8
   d704c:	000dbc08 	.word	0x000dbc08

000d7050 <_ZN18Adafruit_NeoMatrix10fillScreenEt>:
  }

  setPixelColor(tileOffset + pixelOffset, passThruFlag ? passThruColor : expandColor(color));
}

void Adafruit_NeoMatrix::fillScreen(uint16_t color) {
   d7050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t i, n;
  uint32_t c;

  c = passThruFlag ? passThruColor : expandColor(color);
   d7052:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  }

  setPixelColor(tileOffset + pixelOffset, passThruFlag ? passThruColor : expandColor(color));
}

void Adafruit_NeoMatrix::fillScreen(uint16_t color) {
   d7056:	4604      	mov	r4, r0
  uint16_t i, n;
  uint32_t c;

  c = passThruFlag ? passThruColor : expandColor(color);
   d7058:	b10b      	cbz	r3, d705e <_ZN18Adafruit_NeoMatrix10fillScreenEt+0xe>
   d705a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
   d705c:	e003      	b.n	d7066 <_ZN18Adafruit_NeoMatrix10fillScreenEt+0x16>
   d705e:	4608      	mov	r0, r1
   d7060:	f7ff ffe2 	bl	d7028 <_ZL11expandColort>
   d7064:	4606      	mov	r6, r0
  n   = numPixels();
   d7066:	341c      	adds	r4, #28
   d7068:	4620      	mov	r0, r4
   d706a:	f000 fb61 	bl	d7730 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   d706e:	2500      	movs	r5, #0
   d7070:	4607      	mov	r7, r0
   d7072:	b2a9      	uxth	r1, r5
  for(i=0; i<n; i++) setPixelColor(i, c);
   d7074:	42b9      	cmp	r1, r7
   d7076:	d205      	bcs.n	d7084 <_ZN18Adafruit_NeoMatrix10fillScreenEt+0x34>
   d7078:	4632      	mov	r2, r6
   d707a:	4620      	mov	r0, r4
   d707c:	f000 fb08 	bl	d7690 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
   d7080:	3501      	adds	r5, #1
   d7082:	e7f6      	b.n	d7072 <_ZN18Adafruit_NeoMatrix10fillScreenEt+0x22>
   d7084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7086 <_ZN18Adafruit_NeoMatrix9drawPixelEsst>:
// Call without a value to reset (disable passthrough)
void Adafruit_NeoMatrix::setPassThruColor(void) {
  passThruFlag = false;
}

void Adafruit_NeoMatrix::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d7086:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d708a:	4606      	mov	r6, r0

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
   d708c:	1e08      	subs	r0, r1, #0
// Call without a value to reset (disable passthrough)
void Adafruit_NeoMatrix::setPassThruColor(void) {
  passThruFlag = false;
}

void Adafruit_NeoMatrix::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d708e:	461f      	mov	r7, r3

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
   d7090:	f2c0 80be 	blt.w	d7210 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x18a>
   d7094:	2a00      	cmp	r2, #0
   d7096:	f2c0 80bb 	blt.w	d7210 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x18a>
   d709a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   d709e:	4283      	cmp	r3, r0
   d70a0:	f340 80b6 	ble.w	d7210 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x18a>
   d70a4:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
   d70a8:	4293      	cmp	r3, r2
   d70aa:	f340 80b1 	ble.w	d7210 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x18a>

  int16_t t;
  switch(rotation) {
   d70ae:	7e73      	ldrb	r3, [r6, #25]
   d70b0:	2b02      	cmp	r3, #2
   d70b2:	d009      	beq.n	d70c8 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x42>
   d70b4:	2b03      	cmp	r3, #3
   d70b6:	d010      	beq.n	d70da <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x54>
   d70b8:	2b01      	cmp	r3, #1
   d70ba:	d113      	bne.n	d70e4 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x5e>
   case 1:
    t = x;
    x = WIDTH  - 1 - y;
   d70bc:	8933      	ldrh	r3, [r6, #8]
   d70be:	3b01      	subs	r3, #1
   d70c0:	1a9b      	subs	r3, r3, r2
   d70c2:	4602      	mov	r2, r0
   d70c4:	b218      	sxth	r0, r3
   d70c6:	e00d      	b.n	d70e4 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x5e>
    y = t;
    break;
   case 2:
    x = WIDTH  - 1 - x;
   d70c8:	8933      	ldrh	r3, [r6, #8]
   d70ca:	3b01      	subs	r3, #1
   d70cc:	1a18      	subs	r0, r3, r0
    y = HEIGHT - 1 - y;
   d70ce:	8973      	ldrh	r3, [r6, #10]
   d70d0:	3b01      	subs	r3, #1
   d70d2:	1a9a      	subs	r2, r3, r2
    t = x;
    x = WIDTH  - 1 - y;
    y = t;
    break;
   case 2:
    x = WIDTH  - 1 - x;
   d70d4:	b200      	sxth	r0, r0
    y = HEIGHT - 1 - y;
   d70d6:	b212      	sxth	r2, r2
   d70d8:	e004      	b.n	d70e4 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x5e>
    break;
   case 3:
    t = x;
    x = y;
    y = HEIGHT - 1 - t;
   d70da:	8973      	ldrh	r3, [r6, #10]
   d70dc:	3b01      	subs	r3, #1
   d70de:	1a1b      	subs	r3, r3, r0
   d70e0:	4610      	mov	r0, r2
   d70e2:	b21a      	sxth	r2, r3
    break;
  }

  int tileOffset = 0, pixelOffset;

  if(remapFn) { // Custom X/Y remapping function
   d70e4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   d70e6:	b123      	cbz	r3, d70f2 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x6c>
    pixelOffset = (*remapFn)(x, y);
   d70e8:	b291      	uxth	r1, r2
   d70ea:	b280      	uxth	r0, r0
   d70ec:	4798      	blx	r3
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
   d70ee:	2100      	movs	r1, #0
   d70f0:	e07b      	b.n	d71ea <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x164>

  if(remapFn) { // Custom X/Y remapping function
    pixelOffset = (*remapFn)(x, y);
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
   d70f2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
   d70f6:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33

  if(remapFn) { // Custom X/Y remapping function
    pixelOffset = (*remapFn)(x, y);
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
   d70fa:	f003 0c03 	and.w	ip, r3, #3
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
   d70fe:	2900      	cmp	r1, #0
   d7100:	d048      	beq.n	d7194 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x10e>
      uint16_t tile;

      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
   d7102:	f896 e031 	ldrb.w	lr, [r6, #49]	; 0x31
      major = y / matrixHeight,           // start (will swap later if needed)
   d7106:	f896 8032 	ldrb.w	r8, [r6, #50]	; 0x32
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
      uint16_t tile;

      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
   d710a:	fb90 f5fe 	sdiv	r5, r0, lr
   d710e:	b2ad      	uxth	r5, r5
      major = y / matrixHeight,           // start (will swap later if needed)
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
   d7110:	fb92 f4f8 	sdiv	r4, r2, r8
   d7114:	fa1f f984 	uxth.w	r9, r4
   d7118:	fb1e f405 	smulbb	r4, lr, r5
   d711c:	1b00      	subs	r0, r0, r4
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
   d711e:	fb18 f409 	smulbb	r4, r8, r9
   d7122:	1b12      	subs	r2, r2, r4

      // Determine corner of entry, flip axes if needed
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
   d7124:	069c      	lsls	r4, r3, #26
   d7126:	bf42      	ittt	mi
   d7128:	f101 34ff 	addmi.w	r4, r1, #4294967295	; 0xffffffff
   d712c:	1b65      	submi	r5, r4, r5
   d712e:	b2ad      	uxthmi	r5, r5
      if(type & NEO_TILE_BOTTOM) major = tilesY - 1 - major;
   d7130:	06dc      	lsls	r4, r3, #27
   d7132:	bf41      	itttt	mi
   d7134:	f896 4034 	ldrbmi.w	r4, [r6, #52]	; 0x34
   d7138:	f104 34ff 	addmi.w	r4, r4, #4294967295	; 0xffffffff
   d713c:	ebc9 0404 	rsbmi	r4, r9, r4
   d7140:	fa1f f984 	uxthmi.w	r9, r4

      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
   d7144:	065c      	lsls	r4, r3, #25
        majorScale = tilesX;
   d7146:	bf5d      	ittte	pl
   d7148:	464c      	movpl	r4, r9
   d714a:	b289      	uxthpl	r1, r1
   d714c:	46a9      	movpl	r9, r5
      } else {
        swap(major, minor);
        majorScale = tilesY;
   d714e:	f896 1034 	ldrbmi.w	r1, [r6, #52]	; 0x34
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
      if(type & NEO_TILE_BOTTOM) major = tilesY - 1 - major;

      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
        majorScale = tilesX;
   d7152:	bf58      	it	pl
   d7154:	4625      	movpl	r5, r4
        swap(major, minor);
        majorScale = tilesY;
      }

      // Determine tile number
      if((type & NEO_TILE_SEQUENCE) == NEO_TILE_PROGRESSIVE) {
   d7156:	061c      	lsls	r4, r3, #24
    if(tilesX) { // Tiled display, multiple matrices
      uint16_t tile;

      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
      major = y / matrixHeight,           // start (will swap later if needed)
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
   d7158:	b200      	sxth	r0, r0
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
   d715a:	b212      	sxth	r2, r2
        swap(major, minor);
        majorScale = tilesY;
      }

      // Determine tile number
      if((type & NEO_TILE_SEQUENCE) == NEO_TILE_PROGRESSIVE) {
   d715c:	d405      	bmi.n	d716a <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0xe4>
        // All tiles in same order
        tile = major * majorScale + minor;
   d715e:	fb15 f101 	smulbb	r1, r5, r1
   d7162:	eb09 0401 	add.w	r4, r9, r1
   d7166:	b2a4      	uxth	r4, r4
   d7168:	e010      	b.n	d718c <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x106>
      } else {
        // Zigzag; alternate rows change direction.  On these rows,
        // this also flips the starting corner of the matrix for the
        // pixel math later.
        if(major & 1) {
   d716a:	07ec      	lsls	r4, r5, #31
   d716c:	d509      	bpl.n	d7182 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0xfc>
          corner ^= NEO_MATRIX_CORNER;
          tile = (major + 1) * majorScale - 1 - minor;
   d716e:	3501      	adds	r5, #1
   d7170:	ea6f 0409 	mvn.w	r4, r9
   d7174:	fb15 f501 	smulbb	r5, r5, r1
   d7178:	1929      	adds	r1, r5, r4
      } else {
        // Zigzag; alternate rows change direction.  On these rows,
        // this also flips the starting corner of the matrix for the
        // pixel math later.
        if(major & 1) {
          corner ^= NEO_MATRIX_CORNER;
   d717a:	f08c 0c03 	eor.w	ip, ip, #3
          tile = (major + 1) * majorScale - 1 - minor;
   d717e:	b28c      	uxth	r4, r1
   d7180:	e004      	b.n	d718c <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x106>
        } else {
          tile =  major      * majorScale     + minor;
   d7182:	fb15 f501 	smulbb	r5, r5, r1
   d7186:	eb09 0405 	add.w	r4, r9, r5
   d718a:	b2a4      	uxth	r4, r4
        }
      }

      // Index of first pixel in tile
      tileOffset = tile * matrixWidth * matrixHeight;
   d718c:	fb0e f104 	mul.w	r1, lr, r4
   d7190:	fb08 f101 	mul.w	r1, r8, r1
    // Find pixel number within tile
    minor = x; // Presume row major to start (will swap later if needed)
    major = y;

    // Determine corner of entry, flip axes if needed
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
   d7194:	f01c 0f02 	tst.w	ip, #2
   d7198:	bf18      	it	ne
   d719a:	f896 4031 	ldrbne.w	r4, [r6, #49]	; 0x31
      tileOffset = tile * matrixWidth * matrixHeight;

    } // else no tiling (handle as single tile)

    // Find pixel number within tile
    minor = x; // Presume row major to start (will swap later if needed)
   d719e:	b280      	uxth	r0, r0
    major = y;

    // Determine corner of entry, flip axes if needed
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
   d71a0:	bf1e      	ittt	ne
   d71a2:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
   d71a6:	1a20      	subne	r0, r4, r0
   d71a8:	b280      	uxthne	r0, r0
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;
   d71aa:	f01c 0f01 	tst.w	ip, #1
   d71ae:	bf18      	it	ne
   d71b0:	f896 4032 	ldrbne.w	r4, [r6, #50]	; 0x32

    } // else no tiling (handle as single tile)

    // Find pixel number within tile
    minor = x; // Presume row major to start (will swap later if needed)
    major = y;
   d71b4:	b292      	uxth	r2, r2

    // Determine corner of entry, flip axes if needed
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;
   d71b6:	bf1e      	ittt	ne
   d71b8:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
   d71bc:	1aa2      	subne	r2, r4, r2
   d71be:	b292      	uxthne	r2, r2

    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
   d71c0:	075c      	lsls	r4, r3, #29
      majorScale = matrixWidth;
   d71c2:	bf5b      	ittet	pl
   d71c4:	4615      	movpl	r5, r2
   d71c6:	f896 4031 	ldrbpl.w	r4, [r6, #49]	; 0x31
    } else {
      swap(major, minor);
      majorScale = matrixHeight;
   d71ca:	f896 4032 	ldrbmi.w	r4, [r6, #50]	; 0x32
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;

    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
      majorScale = matrixWidth;
   d71ce:	4602      	movpl	r2, r0
   d71d0:	bf58      	it	pl
   d71d2:	4628      	movpl	r0, r5
      swap(major, minor);
      majorScale = matrixHeight;
    }

    // Determine pixel number within tile/matrix
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
   d71d4:	071d      	lsls	r5, r3, #28
   d71d6:	d506      	bpl.n	d71e6 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x160>
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
   d71d8:	07c3      	lsls	r3, r0, #31
   d71da:	d504      	bpl.n	d71e6 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x160>
   d71dc:	fb00 4004 	mla	r0, r0, r4, r4
   d71e0:	3801      	subs	r0, #1
   d71e2:	1a80      	subs	r0, r0, r2
   d71e4:	e001      	b.n	d71ea <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x164>
      else          pixelOffset =  major      * majorScale     + minor;
   d71e6:	fb04 2000 	mla	r0, r4, r0, r2
    }
  }

  setPixelColor(tileOffset + pixelOffset, passThruFlag ? passThruColor : expandColor(color));
   d71ea:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
   d71ee:	4401      	add	r1, r0
   d71f0:	f106 051c 	add.w	r5, r6, #28
   d71f4:	b28c      	uxth	r4, r1
   d71f6:	b10b      	cbz	r3, d71fc <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x176>
   d71f8:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
   d71fa:	e003      	b.n	d7204 <_ZN18Adafruit_NeoMatrix9drawPixelEsst+0x17e>
   d71fc:	4638      	mov	r0, r7
   d71fe:	f7ff ff13 	bl	d7028 <_ZL11expandColort>
   d7202:	4602      	mov	r2, r0
   d7204:	4621      	mov	r1, r4
   d7206:	4628      	mov	r0, r5
}
   d7208:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
      else          pixelOffset =  major      * majorScale     + minor;
    }
  }

  setPixelColor(tileOffset + pixelOffset, passThruFlag ? passThruColor : expandColor(color));
   d720c:	f000 ba40 	b.w	d7690 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
   d7210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d7214 <_ZN18Adafruit_NeoMatrixC1Eiihhh>:
#include "gamma.h"

#define pgm_read_byte(addr) (*(const unsigned char *)(addr))

// Constructor for single matrix:
Adafruit_NeoMatrix::Adafruit_NeoMatrix(int w, int h, uint8_t pin,
   d7214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7216:	460e      	mov	r6, r1
   d7218:	4615      	mov	r5, r2
  uint8_t matrixType, uint8_t ledType) : Adafruit_GFX(w, h),
  Adafruit_NeoPixel(w * h, pin, ledType), type(matrixType), matrixWidth(w),
  matrixHeight(h), tilesX(0), tilesY(0), remapFn(NULL) { }
   d721a:	b209      	sxth	r1, r1
   d721c:	b212      	sxth	r2, r2
#include "gamma.h"

#define pgm_read_byte(addr) (*(const unsigned char *)(addr))

// Constructor for single matrix:
Adafruit_NeoMatrix::Adafruit_NeoMatrix(int w, int h, uint8_t pin,
   d721e:	4604      	mov	r4, r0
   d7220:	461f      	mov	r7, r3
  uint8_t matrixType, uint8_t ledType) : Adafruit_GFX(w, h),
  Adafruit_NeoPixel(w * h, pin, ledType), type(matrixType), matrixWidth(w),
  matrixHeight(h), tilesX(0), tilesY(0), remapFn(NULL) { }
   d7222:	f7ff f9b3 	bl	d658c <_ZN12Adafruit_GFXC1Ess>
   d7226:	fb16 f105 	smulbb	r1, r6, r5
   d722a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d722e:	463a      	mov	r2, r7
   d7230:	b289      	uxth	r1, r1
   d7232:	f104 001c 	add.w	r0, r4, #28
   d7236:	f000 f877 	bl	d7328 <_ZN17Adafruit_NeoPixelC1Ethh>
   d723a:	4b0a      	ldr	r3, [pc, #40]	; (d7264 <_ZN18Adafruit_NeoMatrixC1Eiihhh+0x50>)
   d723c:	6023      	str	r3, [r4, #0]
   d723e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d7242:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   d7246:	2300      	movs	r3, #0
   d7248:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
   d724c:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
   d7250:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d7254:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
   d7258:	63a3      	str	r3, [r4, #56]	; 0x38
   d725a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   d725e:	4620      	mov	r0, r4
   d7260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d7262:	bf00      	nop
   d7264:	000dbbb8 	.word	0x000dbbb8

000d7268 <_ZN18Adafruit_NeoMatrix5ColorEhhh>:

// Downgrade 24-bit color to 16-bit (add reverse gamma lookup here?)
uint16_t Adafruit_NeoMatrix::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint16_t)(r & 0xF8) << 8) |
         ((uint16_t)(g & 0xFC) << 3) |
                    (b         >> 3);
   d7268:	00c9      	lsls	r1, r1, #3
   d726a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
   d726e:	0200      	lsls	r0, r0, #8
   d7270:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
   d7274:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
}
   d7278:	4310      	orrs	r0, r2
   d727a:	4770      	bx	lr

000d727c <_GLOBAL__sub_I__ZN18Adafruit_NeoMatrixC2Eiihhh>:
   d727c:	f000 bb20 	b.w	d78c0 <HAL_Pin_Map>

000d7280 <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d7280:	f000 bafe 	b.w	d7880 <HAL_Timer_Get_Micro_Seconds>

000d7284 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d7284:	f000 baf4 	b.w	d7870 <HAL_Delay_Microseconds>

000d7288 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   d7288:	b510      	push	{r4, lr}
   d728a:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   d728c:	68c0      	ldr	r0, [r0, #12]
   d728e:	b108      	cbz	r0, d7294 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   d7290:	f000 fd8a 	bl	d7da8 <free>
  if (begun) pinMode(pin, INPUT);
   d7294:	7823      	ldrb	r3, [r4, #0]
   d7296:	b11b      	cbz	r3, d72a0 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   d7298:	2100      	movs	r1, #0
   d729a:	79e0      	ldrb	r0, [r4, #7]
   d729c:	f002 faa0 	bl	d97e0 <pinMode>
}
   d72a0:	4620      	mov	r0, r4
   d72a2:	bd10      	pop	{r4, pc}

000d72a4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d72a4:	b538      	push	{r3, r4, r5, lr}
   d72a6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   d72a8:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   d72aa:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   d72ac:	b108      	cbz	r0, d72b2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   d72ae:	f000 fd7b 	bl	d7da8 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   d72b2:	79a3      	ldrb	r3, [r4, #6]
   d72b4:	2b06      	cmp	r3, #6
   d72b6:	bf0c      	ite	eq
   d72b8:	2004      	moveq	r0, #4
   d72ba:	2003      	movne	r0, #3
   d72bc:	fb10 f005 	smulbb	r0, r0, r5
   d72c0:	b280      	uxth	r0, r0
   d72c2:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   d72c4:	f000 fd68 	bl	d7d98 <malloc>
   d72c8:	60e0      	str	r0, [r4, #12]
   d72ca:	b128      	cbz	r0, d72d8 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   d72cc:	88a2      	ldrh	r2, [r4, #4]
   d72ce:	2100      	movs	r1, #0
   d72d0:	f003 f9df 	bl	da692 <memset>
    numLEDs = n;
   d72d4:	8065      	strh	r5, [r4, #2]
   d72d6:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   d72d8:	80a0      	strh	r0, [r4, #4]
   d72da:	8060      	strh	r0, [r4, #2]
   d72dc:	bd38      	pop	{r3, r4, r5, pc}

000d72de <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   d72de:	b510      	push	{r4, lr}
   d72e0:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   d72e2:	2101      	movs	r1, #1
   d72e4:	79c0      	ldrb	r0, [r0, #7]
   d72e6:	f002 fa7b 	bl	d97e0 <pinMode>
  digitalWrite(pin, LOW);
   d72ea:	2100      	movs	r1, #0
   d72ec:	79e0      	ldrb	r0, [r4, #7]
   d72ee:	f002 fa88 	bl	d9802 <digitalWrite>
  begun = true;
   d72f2:	2301      	movs	r3, #1
   d72f4:	7023      	strb	r3, [r4, #0]
   d72f6:	bd10      	pop	{r4, pc}

000d72f8 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d72f8:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   d72fa:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   d72fc:	4605      	mov	r5, r0
   d72fe:	460c      	mov	r4, r1
    if (begun) {
   d7300:	b11b      	cbz	r3, d730a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   d7302:	2100      	movs	r1, #0
   d7304:	79c0      	ldrb	r0, [r0, #7]
   d7306:	f002 fa6b 	bl	d97e0 <pinMode>
    }
    pin = p;
    if (begun) {
   d730a:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   d730c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   d730e:	b153      	cbz	r3, d7326 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   d7310:	b2a4      	uxth	r4, r4
   d7312:	4620      	mov	r0, r4
   d7314:	2101      	movs	r1, #1
   d7316:	f002 fa63 	bl	d97e0 <pinMode>
        digitalWrite(p, LOW);
   d731a:	4620      	mov	r0, r4
   d731c:	2100      	movs	r1, #0
    }
}
   d731e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   d7322:	f002 ba6e 	b.w	d9802 <digitalWrite>
   d7326:	bd38      	pop	{r3, r4, r5, pc}

000d7328 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d7328:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d732a:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   d732c:	4604      	mov	r4, r0
   d732e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   d7330:	7183      	strb	r3, [r0, #6]
   d7332:	7005      	strb	r5, [r0, #0]
   d7334:	7205      	strb	r5, [r0, #8]
   d7336:	60c5      	str	r5, [r0, #12]
   d7338:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   d733a:	f7ff ffb3 	bl	d72a4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   d733e:	4620      	mov	r0, r4
   d7340:	4631      	mov	r1, r6
   d7342:	f7ff ffd9 	bl	d72f8 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   d7346:	4620      	mov	r0, r4
   d7348:	bd70      	pop	{r4, r5, r6, pc}
	...

000d734c <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   d734c:	68c3      	ldr	r3, [r0, #12]
   d734e:	2b00      	cmp	r3, #0
   d7350:	f000 818b 	beq.w	d766a <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   d7354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7358:	7983      	ldrb	r3, [r0, #6]
   d735a:	3b02      	subs	r3, #2
   d735c:	b2db      	uxtb	r3, r3
   d735e:	2b04      	cmp	r3, #4
   d7360:	bf9c      	itt	ls
   d7362:	4ac4      	ldrls	r2, [pc, #784]	; (d7674 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   d7364:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   d7368:	b087      	sub	sp, #28
   d736a:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   d736c:	bf88      	it	hi
   d736e:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   d7370:	f7ff ff86 	bl	d7280 <micros>
   d7374:	692b      	ldr	r3, [r5, #16]
   d7376:	1ac0      	subs	r0, r0, r3
   d7378:	42a0      	cmp	r0, r4
   d737a:	d3f9      	bcc.n	d7370 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d737c:	4abe      	ldr	r2, [pc, #760]	; (d7678 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d737e:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   d7380:	ca07      	ldmia	r2, {r0, r1, r2}
   d7382:	ac06      	add	r4, sp, #24
   d7384:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d7388:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d738a:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d738c:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   d7390:	3304      	adds	r3, #4
   d7392:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d7394:	b922      	cbnz	r2, d73a0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d7396:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d739a:	2b00      	cmp	r3, #0
   d739c:	f2c0 8155 	blt.w	d764a <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   d73a0:	9c04      	ldr	r4, [sp, #16]
   d73a2:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d73a6:	b923      	cbnz	r3, d73b2 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d73a8:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d73ac:	2b00      	cmp	r3, #0
   d73ae:	f2c0 813c 	blt.w	d762a <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   d73b2:	9c05      	ldr	r4, [sp, #20]
   d73b4:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d73b8:	b91b      	cbnz	r3, d73c2 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d73ba:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   d73be:	2b00      	cmp	r3, #0
   d73c0:	db6e      	blt.n	d74a0 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d73c2:	4bae      	ldr	r3, [pc, #696]	; (d767c <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   d73c4:	79ea      	ldrb	r2, [r5, #7]
   d73c6:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d73c8:	4cad      	ldr	r4, [pc, #692]	; (d7680 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d73ca:	49ae      	ldr	r1, [pc, #696]	; (d7684 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d73cc:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d73ce:	0112      	lsls	r2, r2, #4
   d73d0:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d73d2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d73d6:	785b      	ldrb	r3, [r3, #1]
   d73d8:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   d73da:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d73dc:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d73de:	f003 031f 	and.w	r3, r3, #31
   d73e2:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   d73e6:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   d73e8:	433a      	orrs	r2, r7
   d73ea:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   d73ec:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d73ee:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d73f0:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d73f4:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d73f8:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d73fa:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d73fc:	2800      	cmp	r0, #0
   d73fe:	d044      	beq.n	d748a <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   d7400:	46cc      	mov	ip, r9
   d7402:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d7404:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   d7408:	f81c eb01 	ldrb.w	lr, [ip], #1
   d740c:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d740e:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   d7410:	6863      	ldr	r3, [r4, #4]
   d7412:	1a9b      	subs	r3, r3, r2
   d7414:	2b46      	cmp	r3, #70	; 0x46
   d7416:	d9fb      	bls.n	d7410 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   d7418:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   d741c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d7420:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   d7424:	ea43 0307 	orr.w	r3, r3, r7
   d7428:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   d742c:	d02f      	beq.n	d748e <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   d742e:	6863      	ldr	r3, [r4, #4]
   d7430:	1a9b      	subs	r3, r3, r2
   d7432:	2b28      	cmp	r3, #40	; 0x28
   d7434:	d9fb      	bls.n	d742e <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d7436:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d743a:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d743c:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d7440:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   d7444:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   d7448:	d1e2      	bne.n	d7410 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d744a:	ebc9 030c 	rsb	r3, r9, ip
   d744e:	88a8      	ldrh	r0, [r5, #4]
   d7450:	b29b      	uxth	r3, r3
   d7452:	4298      	cmp	r0, r3
   d7454:	d8d8      	bhi.n	d7408 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   d7456:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   d745a:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   d745e:	6863      	ldr	r3, [r4, #4]
   d7460:	1a9b      	subs	r3, r3, r2
   d7462:	2b46      	cmp	r3, #70	; 0x46
   d7464:	d9fb      	bls.n	d745e <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   d7466:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d746a:	ebca 0a03 	rsb	sl, sl, r3
   d746e:	4582      	cmp	sl, r0
   d7470:	f0c0 80d5 	bcc.w	d761e <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   d7474:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d7478:	f7ff ff04 	bl	d7284 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d747c:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   d747e:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   d7482:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   d7486:	2800      	cmp	r0, #0
   d7488:	d1ba      	bne.n	d7400 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   d748a:	4602      	mov	r2, r0
   d748c:	e7e7      	b.n	d745e <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   d748e:	6863      	ldr	r3, [r4, #4]
   d7490:	1a9b      	subs	r3, r3, r2
   d7492:	2b11      	cmp	r3, #17
   d7494:	d8cf      	bhi.n	d7436 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   d7496:	6863      	ldr	r3, [r4, #4]
   d7498:	1a9b      	subs	r3, r3, r2
   d749a:	2b11      	cmp	r3, #17
   d749c:	d9f7      	bls.n	d748e <_ZN17Adafruit_NeoPixel4showEv+0x142>
   d749e:	e7ca      	b.n	d7436 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d74a0:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d74a4:	2b00      	cmp	r3, #0
   d74a6:	da8c      	bge.n	d73c2 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d74a8:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d74ac:	2b00      	cmp	r3, #0
   d74ae:	da88      	bge.n	d73c2 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d74b0:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d74b4:	2b00      	cmp	r3, #0
   d74b6:	da84      	bge.n	d73c2 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   d74b8:	9801      	ldr	r0, [sp, #4]
   d74ba:	f000 fc6d 	bl	d7d98 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   d74be:	2800      	cmp	r0, #0
   d74c0:	f43f af7f 	beq.w	d73c2 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d74c4:	88ab      	ldrh	r3, [r5, #4]
   d74c6:	2b00      	cmp	r3, #0
   d74c8:	f000 80d0 	beq.w	d766c <_ZN17Adafruit_NeoPixel4showEv+0x320>
   d74cc:	2700      	movs	r7, #0
   d74ce:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d74d0:	4e6d      	ldr	r6, [pc, #436]	; (d7688 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   d74d2:	496e      	ldr	r1, [pc, #440]	; (d768c <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   d74d4:	e000      	b.n	d74d8 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   d74d6:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   d74d8:	68ea      	ldr	r2, [r5, #12]
   d74da:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   d74dc:	f103 0e01 	add.w	lr, r3, #1
   d74e0:	f012 0f80 	tst.w	r2, #128	; 0x80
   d74e4:	bf14      	ite	ne
   d74e6:	46b0      	movne	r8, r6
   d74e8:	4688      	moveq	r8, r1
   d74ea:	fa1f fe8e 	uxth.w	lr, lr
   d74ee:	f012 0f40 	tst.w	r2, #64	; 0x40
   d74f2:	bf14      	ite	ne
   d74f4:	46b1      	movne	r9, r6
   d74f6:	4689      	moveq	r9, r1
   d74f8:	f012 0f20 	tst.w	r2, #32
   d74fc:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   d7500:	bf18      	it	ne
   d7502:	46b2      	movne	sl, r6
   d7504:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   d7508:	bf08      	it	eq
   d750a:	468a      	moveq	sl, r1
   d750c:	f103 0802 	add.w	r8, r3, #2
   d7510:	f012 0f10 	tst.w	r2, #16
   d7514:	f103 0e03 	add.w	lr, r3, #3
   d7518:	bf14      	ite	ne
   d751a:	46b4      	movne	ip, r6
   d751c:	468c      	moveq	ip, r1
   d751e:	fa1f f888 	uxth.w	r8, r8
   d7522:	f012 0f08 	tst.w	r2, #8
   d7526:	fa1f fe8e 	uxth.w	lr, lr
   d752a:	f103 0904 	add.w	r9, r3, #4
   d752e:	fa1f f989 	uxth.w	r9, r9
   d7532:	bf14      	ite	ne
   d7534:	46b3      	movne	fp, r6
   d7536:	468b      	moveq	fp, r1
   d7538:	f012 0f04 	tst.w	r2, #4
   d753c:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d7540:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   d7544:	bf14      	ite	ne
   d7546:	46b2      	movne	sl, r6
   d7548:	468a      	moveq	sl, r1
   d754a:	f103 0805 	add.w	r8, r3, #5
   d754e:	f012 0f02 	tst.w	r2, #2
   d7552:	f103 0c06 	add.w	ip, r3, #6
   d7556:	f103 0e07 	add.w	lr, r3, #7
   d755a:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   d755e:	fa1f fe8e 	uxth.w	lr, lr
   d7562:	bf14      	ite	ne
   d7564:	46b1      	movne	r9, r6
   d7566:	4689      	moveq	r9, r1
   d7568:	fa1f f888 	uxth.w	r8, r8
   d756c:	f012 0f01 	tst.w	r2, #1
   d7570:	fa1f fc8c 	uxth.w	ip, ip
   d7574:	bf14      	ite	ne
   d7576:	4632      	movne	r2, r6
   d7578:	460a      	moveq	r2, r1
   d757a:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   d757e:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   d7582:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d7586:	3701      	adds	r7, #1
   d7588:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   d758c:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d758e:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d7592:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   d7594:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d7596:	d89e      	bhi.n	d74d6 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   d7598:	f103 0209 	add.w	r2, r3, #9
   d759c:	330a      	adds	r3, #10
   d759e:	b292      	uxth	r2, r2
   d75a0:	b29b      	uxth	r3, r3
   d75a2:	0052      	lsls	r2, r2, #1
   d75a4:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d75a6:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d75a8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   d75ac:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d75ae:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   d75b0:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d75b2:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d75b4:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   d75b6:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d75ba:	4e30      	ldr	r6, [pc, #192]	; (d767c <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   d75bc:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   d75c0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   d75c4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   d75c8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   d75cc:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   d75d0:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   d75d4:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   d75d8:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d75dc:	79eb      	ldrb	r3, [r5, #7]
   d75de:	6831      	ldr	r1, [r6, #0]
   d75e0:	011b      	lsls	r3, r3, #4
   d75e2:	18ce      	adds	r6, r1, r3
   d75e4:	5cc9      	ldrb	r1, [r1, r3]
   d75e6:	7873      	ldrb	r3, [r6, #1]
   d75e8:	f003 031f 	and.w	r3, r3, #31
   d75ec:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   d75f0:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   d75f2:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   d75f6:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   d75fa:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   d75fe:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   d7600:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   d7604:	2b00      	cmp	r3, #0
   d7606:	d0fb      	beq.n	d7600 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d7608:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d760a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   d760e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   d7612:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   d7616:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   d761a:	f000 fbc5 	bl	d7da8 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   d761e:	f7ff fe2f 	bl	d7280 <micros>
   d7622:	6128      	str	r0, [r5, #16]
}
   d7624:	b007      	add	sp, #28
   d7626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d762a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d762e:	2b00      	cmp	r3, #0
   d7630:	f6bf aebf 	bge.w	d73b2 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d7634:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d7638:	2b00      	cmp	r3, #0
   d763a:	f6bf aeba 	bge.w	d73b2 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d763e:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d7642:	2b00      	cmp	r3, #0
   d7644:	f6bf aeb5 	bge.w	d73b2 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   d7648:	e736      	b.n	d74b8 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d764a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d764e:	2b00      	cmp	r3, #0
   d7650:	f6bf aea6 	bge.w	d73a0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d7654:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d7658:	2b00      	cmp	r3, #0
   d765a:	f6bf aea1 	bge.w	d73a0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   d765e:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   d7662:	2b00      	cmp	r3, #0
   d7664:	f6bf ae9c 	bge.w	d73a0 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   d7668:	e726      	b.n	d74b8 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   d766a:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   d766c:	2304      	movs	r3, #4
   d766e:	2202      	movs	r2, #2
   d7670:	e799      	b.n	d75a6 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   d7672:	bf00      	nop
   d7674:	000dbc54 	.word	0x000dbc54
   d7678:	000dbc48 	.word	0x000dbc48
   d767c:	2003e36c 	.word	0x2003e36c
   d7680:	e000edf0 	.word	0xe000edf0
   d7684:	e0001000 	.word	0xe0001000
   d7688:	ffff800d 	.word	0xffff800d
   d768c:	ffff8006 	.word	0xffff8006

000d7690 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d7690:	8843      	ldrh	r3, [r0, #2]
   d7692:	428b      	cmp	r3, r1
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   d7694:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   d7696:	d945      	bls.n	d7724 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   d7698:	7a05      	ldrb	r5, [r0, #8]
   d769a:	f3c2 4307 	ubfx	r3, r2, #16, #8
   d769e:	f3c2 2407 	ubfx	r4, r2, #8, #8
   d76a2:	b2d6      	uxtb	r6, r2
   d76a4:	b145      	cbz	r5, d76b8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
   d76a6:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
   d76a8:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
   d76aa:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   d76ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   d76b0:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   d76b4:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   d76b8:	f890 c006 	ldrb.w	ip, [r0, #6]
   d76bc:	68c7      	ldr	r7, [r0, #12]
   d76be:	f1bc 0f06 	cmp.w	ip, #6
   d76c2:	bf0c      	ite	eq
   d76c4:	2504      	moveq	r5, #4
   d76c6:	2503      	movne	r5, #3
   d76c8:	4369      	muls	r1, r5
   d76ca:	f1bc 0f08 	cmp.w	ip, #8
   d76ce:	eb07 0501 	add.w	r5, r7, r1
   d76d2:	d824      	bhi.n	d771e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
   d76d4:	f04f 0e01 	mov.w	lr, #1
   d76d8:	fa0e fe0c 	lsl.w	lr, lr, ip
   d76dc:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
   d76e0:	d10c      	bne.n	d76fc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
   d76e2:	f01e 0f40 	tst.w	lr, #64	; 0x40
   d76e6:	d10d      	bne.n	d7704 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
   d76e8:	f01e 0f10 	tst.w	lr, #16
   d76ec:	d017      	beq.n	d771e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   d76ee:	2bff      	cmp	r3, #255	; 0xff
   d76f0:	bf08      	it	eq
   d76f2:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
   d76f4:	547b      	strb	r3, [r7, r1]
          *p++ = b;
   d76f6:	706e      	strb	r6, [r5, #1]
          *p = g;
   d76f8:	70ac      	strb	r4, [r5, #2]
        } break;
   d76fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   d76fc:	547c      	strb	r4, [r7, r1]
          *p++ = r;
   d76fe:	706b      	strb	r3, [r5, #1]
          *p = b;
   d7700:	70ae      	strb	r6, [r5, #2]
        } break;
   d7702:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
   d7704:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d7706:	706c      	strb	r4, [r5, #1]
          *p++ = b;
   d7708:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   d770a:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d770c:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d770e:	b90b      	cbnz	r3, d7714 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
   d7710:	b2d2      	uxtb	r2, r2
   d7712:	e002      	b.n	d771a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
   d7714:	435a      	muls	r2, r3
   d7716:	f3c2 2207 	ubfx	r2, r2, #8, #8
   d771a:	70ea      	strb	r2, [r5, #3]
        } break;
   d771c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   d771e:	547b      	strb	r3, [r7, r1]
          *p++ = g;
   d7720:	706c      	strb	r4, [r5, #1]
          *p = b;
   d7722:	70ae      	strb	r6, [r5, #2]
   d7724:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7726 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   d7726:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
   d772a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
   d772e:	4770      	bx	lr

000d7730 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
   d7730:	8840      	ldrh	r0, [r0, #2]
   d7732:	4770      	bx	lr

000d7734 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d7734:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
   d7736:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
   d7738:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   d773a:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   d773c:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   d773e:	d01e      	beq.n	d777e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   d7740:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d7742:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d7746:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   d7748:	d00c      	beq.n	d7764 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   d774a:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   d774c:	bf1f      	itttt	ne
   d774e:	0211      	lslne	r1, r2, #8
   d7750:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   d7754:	fb91 f3f3 	sdivne	r3, r1, r3
   d7758:	b29b      	uxthne	r3, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
   d775a:	bf04      	itt	eq
   d775c:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   d7760:	fb91 f3f3 	sdiveq	r3, r1, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
   d7764:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d7766:	1b29      	subs	r1, r5, r4
   d7768:	8886      	ldrh	r6, [r0, #4]
   d776a:	b289      	uxth	r1, r1
   d776c:	428e      	cmp	r6, r1
   d776e:	d905      	bls.n	d777c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
   d7770:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
   d7772:	4359      	muls	r1, r3
   d7774:	1209      	asrs	r1, r1, #8
   d7776:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
   d777a:	e7f4      	b.n	d7766 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
   d777c:	7202      	strb	r2, [r0, #8]
   d777e:	bd70      	pop	{r4, r5, r6, pc}

000d7780 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   d7780:	8882      	ldrh	r2, [r0, #4]
   d7782:	68c0      	ldr	r0, [r0, #12]
   d7784:	2100      	movs	r1, #0
   d7786:	f002 bf84 	b.w	da692 <memset>
	...

000d778c <_GLOBAL__sub_I_PIN_MAP2>:
}
   d778c:	b508      	push	{r3, lr}
   d778e:	f000 f897 	bl	d78c0 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d7792:	f000 f895 	bl	d78c0 <HAL_Pin_Map>
   d7796:	4b01      	ldr	r3, [pc, #4]	; (d779c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   d7798:	6018      	str	r0, [r3, #0]
   d779a:	bd08      	pop	{r3, pc}
   d779c:	2003e36c 	.word	0x2003e36c

000d77a0 <_ZN7NtpTime9nowMillisEP11epochMillis>:

/*
 * Return the current time to the millisecond.
 */
void NtpTime::nowMillis(epochMillis* _now)
{
   d77a0:	b570      	push	{r4, r5, r6, lr}
  if(!synced)
   d77a2:	f890 6052 	ldrb.w	r6, [r0, #82]	; 0x52

/*
 * Return the current time to the millisecond.
 */
void NtpTime::nowMillis(epochMillis* _now)
{
   d77a6:	4604      	mov	r4, r0
   d77a8:	460d      	mov	r5, r1
  if(!synced)
   d77aa:	b926      	cbnz	r6, d77b6 <_ZN7NtpTime9nowMillisEP11epochMillis+0x16>
  {
    _now->seconds = Time.now();  //We haven't had a successful time request, so do the best we can.
   d77ac:	f001 fe1b 	bl	d93e6 <_ZN9TimeClass3nowEv>
    _now->millis = 0;
   d77b0:	e885 0041 	stmia.w	r5, {r0, r6}
   d77b4:	bd70      	pop	{r4, r5, r6, pc}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d77b6:	f000 f86b 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
  }
  else
  {
    int nowMillis = (millis() - updateSystemMillis + NTPMillis);
   d77ba:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d77bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
   d77be:	1a9b      	subs	r3, r3, r2
   d77c0:	4418      	add	r0, r3
    _now->seconds =  NTPTime - ntpTimeEpochStart + (nowMillis / 1000);
   d77c2:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d77c4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   d77c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d77ca:	1a9b      	subs	r3, r3, r2
   d77cc:	fb90 f2f1 	sdiv	r2, r0, r1
   d77d0:	4413      	add	r3, r2
    _now->millis = nowMillis % 1000;
   d77d2:	fb01 0012 	mls	r0, r1, r2, r0
    _now->millis = 0;
  }
  else
  {
    int nowMillis = (millis() - updateSystemMillis + NTPMillis);
    _now->seconds =  NTPTime - ntpTimeEpochStart + (nowMillis / 1000);
   d77d6:	602b      	str	r3, [r5, #0]
    _now->millis = nowMillis % 1000;
   d77d8:	6068      	str	r0, [r5, #4]
   d77da:	bd70      	pop	{r4, r5, r6, pc}

000d77dc <_GLOBAL__sub_I__ZN7NtpTimeC2Ev>:
   d77dc:	f000 b870 	b.w	d78c0 <HAL_Pin_Map>

000d77e0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d77e0:	b508      	push	{r3, lr}
   d77e2:	4b02      	ldr	r3, [pc, #8]	; (d77ec <os_thread_create+0xc>)
   d77e4:	681b      	ldr	r3, [r3, #0]
   d77e6:	685b      	ldr	r3, [r3, #4]
   d77e8:	9301      	str	r3, [sp, #4]
   d77ea:	bd08      	pop	{r3, pc}
   d77ec:	00030248 	.word	0x00030248

000d77f0 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d77f0:	b508      	push	{r3, lr}
   d77f2:	4b02      	ldr	r3, [pc, #8]	; (d77fc <os_thread_is_current+0xc>)
   d77f4:	681b      	ldr	r3, [r3, #0]
   d77f6:	689b      	ldr	r3, [r3, #8]
   d77f8:	9301      	str	r3, [sp, #4]
   d77fa:	bd08      	pop	{r3, pc}
   d77fc:	00030248 	.word	0x00030248

000d7800 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d7800:	b508      	push	{r3, lr}
   d7802:	4b02      	ldr	r3, [pc, #8]	; (d780c <os_thread_yield+0xc>)
   d7804:	681b      	ldr	r3, [r3, #0]
   d7806:	68db      	ldr	r3, [r3, #12]
   d7808:	9301      	str	r3, [sp, #4]
   d780a:	bd08      	pop	{r3, pc}
   d780c:	00030248 	.word	0x00030248

000d7810 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d7810:	b508      	push	{r3, lr}
   d7812:	4b02      	ldr	r3, [pc, #8]	; (d781c <os_thread_join+0xc>)
   d7814:	681b      	ldr	r3, [r3, #0]
   d7816:	691b      	ldr	r3, [r3, #16]
   d7818:	9301      	str	r3, [sp, #4]
   d781a:	bd08      	pop	{r3, pc}
   d781c:	00030248 	.word	0x00030248

000d7820 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d7820:	b508      	push	{r3, lr}
   d7822:	4b02      	ldr	r3, [pc, #8]	; (d782c <os_thread_cleanup+0xc>)
   d7824:	681b      	ldr	r3, [r3, #0]
   d7826:	695b      	ldr	r3, [r3, #20]
   d7828:	9301      	str	r3, [sp, #4]
   d782a:	bd08      	pop	{r3, pc}
   d782c:	00030248 	.word	0x00030248

000d7830 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d7830:	b508      	push	{r3, lr}
   d7832:	4b02      	ldr	r3, [pc, #8]	; (d783c <os_mutex_create+0xc>)
   d7834:	681b      	ldr	r3, [r3, #0]
   d7836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7838:	9301      	str	r3, [sp, #4]
   d783a:	bd08      	pop	{r3, pc}
   d783c:	00030248 	.word	0x00030248

000d7840 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7840:	b508      	push	{r3, lr}
   d7842:	4b02      	ldr	r3, [pc, #8]	; (d784c <os_mutex_recursive_create+0xc>)
   d7844:	681b      	ldr	r3, [r3, #0]
   d7846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7848:	9301      	str	r3, [sp, #4]
   d784a:	bd08      	pop	{r3, pc}
   d784c:	00030248 	.word	0x00030248

000d7850 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d7850:	b508      	push	{r3, lr}
   d7852:	4b02      	ldr	r3, [pc, #8]	; (d785c <os_thread_exit+0xc>)
   d7854:	681b      	ldr	r3, [r3, #0]
   d7856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d7858:	9301      	str	r3, [sp, #4]
   d785a:	bd08      	pop	{r3, pc}
   d785c:	00030248 	.word	0x00030248

000d7860 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7860:	b508      	push	{r3, lr}
   d7862:	4b02      	ldr	r3, [pc, #8]	; (d786c <HAL_RNG_GetRandomNumber+0xc>)
   d7864:	681b      	ldr	r3, [r3, #0]
   d7866:	685b      	ldr	r3, [r3, #4]
   d7868:	9301      	str	r3, [sp, #4]
   d786a:	bd08      	pop	{r3, pc}
   d786c:	00030218 	.word	0x00030218

000d7870 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7870:	b508      	push	{r3, lr}
   d7872:	4b02      	ldr	r3, [pc, #8]	; (d787c <HAL_Delay_Microseconds+0xc>)
   d7874:	681b      	ldr	r3, [r3, #0]
   d7876:	68db      	ldr	r3, [r3, #12]
   d7878:	9301      	str	r3, [sp, #4]
   d787a:	bd08      	pop	{r3, pc}
   d787c:	00030218 	.word	0x00030218

000d7880 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7880:	b508      	push	{r3, lr}
   d7882:	4b02      	ldr	r3, [pc, #8]	; (d788c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7884:	681b      	ldr	r3, [r3, #0]
   d7886:	691b      	ldr	r3, [r3, #16]
   d7888:	9301      	str	r3, [sp, #4]
   d788a:	bd08      	pop	{r3, pc}
   d788c:	00030218 	.word	0x00030218

000d7890 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7890:	b508      	push	{r3, lr}
   d7892:	4b02      	ldr	r3, [pc, #8]	; (d789c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7894:	681b      	ldr	r3, [r3, #0]
   d7896:	695b      	ldr	r3, [r3, #20]
   d7898:	9301      	str	r3, [sp, #4]
   d789a:	bd08      	pop	{r3, pc}
   d789c:	00030218 	.word	0x00030218

000d78a0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d78a0:	b508      	push	{r3, lr}
   d78a2:	4b02      	ldr	r3, [pc, #8]	; (d78ac <HAL_RTC_Get_UnixTime+0xc>)
   d78a4:	681b      	ldr	r3, [r3, #0]
   d78a6:	69db      	ldr	r3, [r3, #28]
   d78a8:	9301      	str	r3, [sp, #4]
   d78aa:	bd08      	pop	{r3, pc}
   d78ac:	00030218 	.word	0x00030218

000d78b0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d78b0:	b508      	push	{r3, lr}
   d78b2:	4b02      	ldr	r3, [pc, #8]	; (d78bc <HAL_RTC_Time_Is_Valid+0xc>)
   d78b4:	681b      	ldr	r3, [r3, #0]
   d78b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d78b8:	9301      	str	r3, [sp, #4]
   d78ba:	bd08      	pop	{r3, pc}
   d78bc:	00030218 	.word	0x00030218

000d78c0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d78c0:	b508      	push	{r3, lr}
   d78c2:	4b02      	ldr	r3, [pc, #8]	; (d78cc <HAL_Pin_Map+0xc>)
   d78c4:	681b      	ldr	r3, [r3, #0]
   d78c6:	681b      	ldr	r3, [r3, #0]
   d78c8:	9301      	str	r3, [sp, #4]
   d78ca:	bd08      	pop	{r3, pc}
   d78cc:	0003022c 	.word	0x0003022c

000d78d0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d78d0:	b508      	push	{r3, lr}
   d78d2:	4b02      	ldr	r3, [pc, #8]	; (d78dc <HAL_Validate_Pin_Function+0xc>)
   d78d4:	681b      	ldr	r3, [r3, #0]
   d78d6:	685b      	ldr	r3, [r3, #4]
   d78d8:	9301      	str	r3, [sp, #4]
   d78da:	bd08      	pop	{r3, pc}
   d78dc:	0003022c 	.word	0x0003022c

000d78e0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d78e0:	b508      	push	{r3, lr}
   d78e2:	4b02      	ldr	r3, [pc, #8]	; (d78ec <HAL_Pin_Mode+0xc>)
   d78e4:	681b      	ldr	r3, [r3, #0]
   d78e6:	689b      	ldr	r3, [r3, #8]
   d78e8:	9301      	str	r3, [sp, #4]
   d78ea:	bd08      	pop	{r3, pc}
   d78ec:	0003022c 	.word	0x0003022c

000d78f0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d78f0:	b508      	push	{r3, lr}
   d78f2:	4b02      	ldr	r3, [pc, #8]	; (d78fc <HAL_Get_Pin_Mode+0xc>)
   d78f4:	681b      	ldr	r3, [r3, #0]
   d78f6:	68db      	ldr	r3, [r3, #12]
   d78f8:	9301      	str	r3, [sp, #4]
   d78fa:	bd08      	pop	{r3, pc}
   d78fc:	0003022c 	.word	0x0003022c

000d7900 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7900:	b508      	push	{r3, lr}
   d7902:	4b02      	ldr	r3, [pc, #8]	; (d790c <HAL_GPIO_Write+0xc>)
   d7904:	681b      	ldr	r3, [r3, #0]
   d7906:	691b      	ldr	r3, [r3, #16]
   d7908:	9301      	str	r3, [sp, #4]
   d790a:	bd08      	pop	{r3, pc}
   d790c:	0003022c 	.word	0x0003022c

000d7910 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d7910:	b508      	push	{r3, lr}
   d7912:	4b02      	ldr	r3, [pc, #8]	; (d791c <HAL_GPIO_Read+0xc>)
   d7914:	681b      	ldr	r3, [r3, #0]
   d7916:	695b      	ldr	r3, [r3, #20]
   d7918:	9301      	str	r3, [sp, #4]
   d791a:	bd08      	pop	{r3, pc}
   d791c:	0003022c 	.word	0x0003022c

000d7920 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d7920:	b508      	push	{r3, lr}
   d7922:	4b02      	ldr	r3, [pc, #8]	; (d792c <HAL_DAC_Write+0xc>)
   d7924:	681b      	ldr	r3, [r3, #0]
   d7926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7928:	9301      	str	r3, [sp, #4]
   d792a:	bd08      	pop	{r3, pc}
   d792c:	0003022c 	.word	0x0003022c

000d7930 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d7930:	b508      	push	{r3, lr}
   d7932:	4b02      	ldr	r3, [pc, #8]	; (d793c <HAL_ADC_Read+0xc>)
   d7934:	681b      	ldr	r3, [r3, #0]
   d7936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7938:	9301      	str	r3, [sp, #4]
   d793a:	bd08      	pop	{r3, pc}
   d793c:	0003022c 	.word	0x0003022c

000d7940 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d7940:	b508      	push	{r3, lr}
   d7942:	4b02      	ldr	r3, [pc, #8]	; (d794c <HAL_PWM_Write_Ext+0xc>)
   d7944:	681b      	ldr	r3, [r3, #0]
   d7946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d7948:	9301      	str	r3, [sp, #4]
   d794a:	bd08      	pop	{r3, pc}
   d794c:	0003022c 	.word	0x0003022c

000d7950 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d7950:	b508      	push	{r3, lr}
   d7952:	4b02      	ldr	r3, [pc, #8]	; (d795c <HAL_I2C_Begin+0xc>)
   d7954:	681b      	ldr	r3, [r3, #0]
   d7956:	68db      	ldr	r3, [r3, #12]
   d7958:	9301      	str	r3, [sp, #4]
   d795a:	bd08      	pop	{r3, pc}
   d795c:	00030228 	.word	0x00030228

000d7960 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d7960:	b508      	push	{r3, lr}
   d7962:	4b02      	ldr	r3, [pc, #8]	; (d796c <HAL_I2C_Request_Data+0xc>)
   d7964:	681b      	ldr	r3, [r3, #0]
   d7966:	695b      	ldr	r3, [r3, #20]
   d7968:	9301      	str	r3, [sp, #4]
   d796a:	bd08      	pop	{r3, pc}
   d796c:	00030228 	.word	0x00030228

000d7970 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d7970:	b508      	push	{r3, lr}
   d7972:	4b02      	ldr	r3, [pc, #8]	; (d797c <HAL_I2C_Begin_Transmission+0xc>)
   d7974:	681b      	ldr	r3, [r3, #0]
   d7976:	699b      	ldr	r3, [r3, #24]
   d7978:	9301      	str	r3, [sp, #4]
   d797a:	bd08      	pop	{r3, pc}
   d797c:	00030228 	.word	0x00030228

000d7980 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d7980:	b508      	push	{r3, lr}
   d7982:	4b02      	ldr	r3, [pc, #8]	; (d798c <HAL_I2C_End_Transmission+0xc>)
   d7984:	681b      	ldr	r3, [r3, #0]
   d7986:	69db      	ldr	r3, [r3, #28]
   d7988:	9301      	str	r3, [sp, #4]
   d798a:	bd08      	pop	{r3, pc}
   d798c:	00030228 	.word	0x00030228

000d7990 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d7990:	b508      	push	{r3, lr}
   d7992:	4b02      	ldr	r3, [pc, #8]	; (d799c <HAL_I2C_Write_Data+0xc>)
   d7994:	681b      	ldr	r3, [r3, #0]
   d7996:	6a1b      	ldr	r3, [r3, #32]
   d7998:	9301      	str	r3, [sp, #4]
   d799a:	bd08      	pop	{r3, pc}
   d799c:	00030228 	.word	0x00030228

000d79a0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d79a0:	b508      	push	{r3, lr}
   d79a2:	4b02      	ldr	r3, [pc, #8]	; (d79ac <HAL_I2C_Available_Data+0xc>)
   d79a4:	681b      	ldr	r3, [r3, #0]
   d79a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d79a8:	9301      	str	r3, [sp, #4]
   d79aa:	bd08      	pop	{r3, pc}
   d79ac:	00030228 	.word	0x00030228

000d79b0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d79b0:	b508      	push	{r3, lr}
   d79b2:	4b02      	ldr	r3, [pc, #8]	; (d79bc <HAL_I2C_Read_Data+0xc>)
   d79b4:	681b      	ldr	r3, [r3, #0]
   d79b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d79b8:	9301      	str	r3, [sp, #4]
   d79ba:	bd08      	pop	{r3, pc}
   d79bc:	00030228 	.word	0x00030228

000d79c0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d79c0:	b508      	push	{r3, lr}
   d79c2:	4b02      	ldr	r3, [pc, #8]	; (d79cc <HAL_I2C_Peek_Data+0xc>)
   d79c4:	681b      	ldr	r3, [r3, #0]
   d79c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d79c8:	9301      	str	r3, [sp, #4]
   d79ca:	bd08      	pop	{r3, pc}
   d79cc:	00030228 	.word	0x00030228

000d79d0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d79d0:	b508      	push	{r3, lr}
   d79d2:	4b02      	ldr	r3, [pc, #8]	; (d79dc <HAL_I2C_Flush_Data+0xc>)
   d79d4:	681b      	ldr	r3, [r3, #0]
   d79d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d79d8:	9301      	str	r3, [sp, #4]
   d79da:	bd08      	pop	{r3, pc}
   d79dc:	00030228 	.word	0x00030228

000d79e0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d79e0:	b508      	push	{r3, lr}
   d79e2:	4b02      	ldr	r3, [pc, #8]	; (d79ec <HAL_I2C_Is_Enabled+0xc>)
   d79e4:	681b      	ldr	r3, [r3, #0]
   d79e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d79e8:	9301      	str	r3, [sp, #4]
   d79ea:	bd08      	pop	{r3, pc}
   d79ec:	00030228 	.word	0x00030228

000d79f0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d79f0:	b508      	push	{r3, lr}
   d79f2:	4b02      	ldr	r3, [pc, #8]	; (d79fc <HAL_I2C_Init+0xc>)
   d79f4:	681b      	ldr	r3, [r3, #0]
   d79f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d79f8:	9301      	str	r3, [sp, #4]
   d79fa:	bd08      	pop	{r3, pc}
   d79fc:	00030228 	.word	0x00030228

000d7a00 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d7a00:	b508      	push	{r3, lr}
   d7a02:	4b02      	ldr	r3, [pc, #8]	; (d7a0c <if_index_to_name+0xc>)
   d7a04:	681b      	ldr	r3, [r3, #0]
   d7a06:	695b      	ldr	r3, [r3, #20]
   d7a08:	9301      	str	r3, [sp, #4]
   d7a0a:	bd08      	pop	{r3, pc}
   d7a0c:	0003026c 	.word	0x0003026c

000d7a10 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7a10:	b508      	push	{r3, lr}
   d7a12:	4b02      	ldr	r3, [pc, #8]	; (d7a1c <inet_inet_ntop+0xc>)
   d7a14:	681b      	ldr	r3, [r3, #0]
   d7a16:	695b      	ldr	r3, [r3, #20]
   d7a18:	9301      	str	r3, [sp, #4]
   d7a1a:	bd08      	pop	{r3, pc}
   d7a1c:	00030264 	.word	0x00030264

000d7a20 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d7a20:	b508      	push	{r3, lr}
   d7a22:	4b02      	ldr	r3, [pc, #8]	; (d7a2c <inet_htonl+0xc>)
   d7a24:	681b      	ldr	r3, [r3, #0]
   d7a26:	6a1b      	ldr	r3, [r3, #32]
   d7a28:	9301      	str	r3, [sp, #4]
   d7a2a:	bd08      	pop	{r3, pc}
   d7a2c:	00030264 	.word	0x00030264

000d7a30 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d7a30:	b508      	push	{r3, lr}
   d7a32:	4b02      	ldr	r3, [pc, #8]	; (d7a3c <inet_htons+0xc>)
   d7a34:	681b      	ldr	r3, [r3, #0]
   d7a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7a38:	9301      	str	r3, [sp, #4]
   d7a3a:	bd08      	pop	{r3, pc}
   d7a3c:	00030264 	.word	0x00030264

000d7a40 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7a40:	b508      	push	{r3, lr}
   d7a42:	4b02      	ldr	r3, [pc, #8]	; (d7a4c <netdb_freeaddrinfo+0xc>)
   d7a44:	681b      	ldr	r3, [r3, #0]
   d7a46:	689b      	ldr	r3, [r3, #8]
   d7a48:	9301      	str	r3, [sp, #4]
   d7a4a:	bd08      	pop	{r3, pc}
   d7a4c:	00030268 	.word	0x00030268

000d7a50 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7a50:	b508      	push	{r3, lr}
   d7a52:	4b02      	ldr	r3, [pc, #8]	; (d7a5c <netdb_getaddrinfo+0xc>)
   d7a54:	681b      	ldr	r3, [r3, #0]
   d7a56:	68db      	ldr	r3, [r3, #12]
   d7a58:	9301      	str	r3, [sp, #4]
   d7a5a:	bd08      	pop	{r3, pc}
   d7a5c:	00030268 	.word	0x00030268

000d7a60 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   d7a60:	b508      	push	{r3, lr}
   d7a62:	4b02      	ldr	r3, [pc, #8]	; (d7a6c <HAL_Tone_Start+0xc>)
   d7a64:	681b      	ldr	r3, [r3, #0]
   d7a66:	681b      	ldr	r3, [r3, #0]
   d7a68:	9301      	str	r3, [sp, #4]
   d7a6a:	bd08      	pop	{r3, pc}
   d7a6c:	00030224 	.word	0x00030224

000d7a70 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d7a70:	b508      	push	{r3, lr}
   d7a72:	4b02      	ldr	r3, [pc, #8]	; (d7a7c <sock_setsockopt+0xc>)
   d7a74:	681b      	ldr	r3, [r3, #0]
   d7a76:	699b      	ldr	r3, [r3, #24]
   d7a78:	9301      	str	r3, [sp, #4]
   d7a7a:	bd08      	pop	{r3, pc}
   d7a7c:	00030238 	.word	0x00030238

000d7a80 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d7a80:	b508      	push	{r3, lr}
   d7a82:	4b02      	ldr	r3, [pc, #8]	; (d7a8c <sock_close+0xc>)
   d7a84:	681b      	ldr	r3, [r3, #0]
   d7a86:	69db      	ldr	r3, [r3, #28]
   d7a88:	9301      	str	r3, [sp, #4]
   d7a8a:	bd08      	pop	{r3, pc}
   d7a8c:	00030238 	.word	0x00030238

000d7a90 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d7a90:	b508      	push	{r3, lr}
   d7a92:	4b02      	ldr	r3, [pc, #8]	; (d7a9c <sock_connect+0xc>)
   d7a94:	681b      	ldr	r3, [r3, #0]
   d7a96:	6a1b      	ldr	r3, [r3, #32]
   d7a98:	9301      	str	r3, [sp, #4]
   d7a9a:	bd08      	pop	{r3, pc}
   d7a9c:	00030238 	.word	0x00030238

000d7aa0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d7aa0:	b508      	push	{r3, lr}
   d7aa2:	4b02      	ldr	r3, [pc, #8]	; (d7aac <sock_recv+0xc>)
   d7aa4:	681b      	ldr	r3, [r3, #0]
   d7aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7aa8:	9301      	str	r3, [sp, #4]
   d7aaa:	bd08      	pop	{r3, pc}
   d7aac:	00030238 	.word	0x00030238

000d7ab0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d7ab0:	b508      	push	{r3, lr}
   d7ab2:	4b02      	ldr	r3, [pc, #8]	; (d7abc <sock_send+0xc>)
   d7ab4:	681b      	ldr	r3, [r3, #0]
   d7ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7ab8:	9301      	str	r3, [sp, #4]
   d7aba:	bd08      	pop	{r3, pc}
   d7abc:	00030238 	.word	0x00030238

000d7ac0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d7ac0:	b508      	push	{r3, lr}
   d7ac2:	4b02      	ldr	r3, [pc, #8]	; (d7acc <sock_socket+0xc>)
   d7ac4:	681b      	ldr	r3, [r3, #0]
   d7ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7ac8:	9301      	str	r3, [sp, #4]
   d7aca:	bd08      	pop	{r3, pc}
   d7acc:	00030238 	.word	0x00030238

000d7ad0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d7ad0:	b508      	push	{r3, lr}
   d7ad2:	4b02      	ldr	r3, [pc, #8]	; (d7adc <HAL_SPI_Init+0xc>)
   d7ad4:	681b      	ldr	r3, [r3, #0]
   d7ad6:	69db      	ldr	r3, [r3, #28]
   d7ad8:	9301      	str	r3, [sp, #4]
   d7ada:	bd08      	pop	{r3, pc}
   d7adc:	00030230 	.word	0x00030230

000d7ae0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d7ae0:	b508      	push	{r3, lr}
   d7ae2:	4b02      	ldr	r3, [pc, #8]	; (d7aec <HAL_SPI_Is_Enabled+0xc>)
   d7ae4:	681b      	ldr	r3, [r3, #0]
   d7ae6:	6a1b      	ldr	r3, [r3, #32]
   d7ae8:	9301      	str	r3, [sp, #4]
   d7aea:	bd08      	pop	{r3, pc}
   d7aec:	00030230 	.word	0x00030230

000d7af0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d7af0:	b508      	push	{r3, lr}
   d7af2:	4b02      	ldr	r3, [pc, #8]	; (d7afc <HAL_USART_Init+0xc>)
   d7af4:	681b      	ldr	r3, [r3, #0]
   d7af6:	681b      	ldr	r3, [r3, #0]
   d7af8:	9301      	str	r3, [sp, #4]
   d7afa:	bd08      	pop	{r3, pc}
   d7afc:	0003023c 	.word	0x0003023c

000d7b00 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d7b00:	b508      	push	{r3, lr}
   d7b02:	4b02      	ldr	r3, [pc, #8]	; (d7b0c <HAL_USART_Write_Data+0xc>)
   d7b04:	681b      	ldr	r3, [r3, #0]
   d7b06:	68db      	ldr	r3, [r3, #12]
   d7b08:	9301      	str	r3, [sp, #4]
   d7b0a:	bd08      	pop	{r3, pc}
   d7b0c:	0003023c 	.word	0x0003023c

000d7b10 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d7b10:	b508      	push	{r3, lr}
   d7b12:	4b02      	ldr	r3, [pc, #8]	; (d7b1c <HAL_USART_Available_Data+0xc>)
   d7b14:	681b      	ldr	r3, [r3, #0]
   d7b16:	691b      	ldr	r3, [r3, #16]
   d7b18:	9301      	str	r3, [sp, #4]
   d7b1a:	bd08      	pop	{r3, pc}
   d7b1c:	0003023c 	.word	0x0003023c

000d7b20 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d7b20:	b508      	push	{r3, lr}
   d7b22:	4b02      	ldr	r3, [pc, #8]	; (d7b2c <HAL_USART_Read_Data+0xc>)
   d7b24:	681b      	ldr	r3, [r3, #0]
   d7b26:	695b      	ldr	r3, [r3, #20]
   d7b28:	9301      	str	r3, [sp, #4]
   d7b2a:	bd08      	pop	{r3, pc}
   d7b2c:	0003023c 	.word	0x0003023c

000d7b30 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d7b30:	b508      	push	{r3, lr}
   d7b32:	4b02      	ldr	r3, [pc, #8]	; (d7b3c <HAL_USART_Peek_Data+0xc>)
   d7b34:	681b      	ldr	r3, [r3, #0]
   d7b36:	699b      	ldr	r3, [r3, #24]
   d7b38:	9301      	str	r3, [sp, #4]
   d7b3a:	bd08      	pop	{r3, pc}
   d7b3c:	0003023c 	.word	0x0003023c

000d7b40 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d7b40:	b508      	push	{r3, lr}
   d7b42:	4b02      	ldr	r3, [pc, #8]	; (d7b4c <HAL_USART_Flush_Data+0xc>)
   d7b44:	681b      	ldr	r3, [r3, #0]
   d7b46:	69db      	ldr	r3, [r3, #28]
   d7b48:	9301      	str	r3, [sp, #4]
   d7b4a:	bd08      	pop	{r3, pc}
   d7b4c:	0003023c 	.word	0x0003023c

000d7b50 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d7b50:	b508      	push	{r3, lr}
   d7b52:	4b02      	ldr	r3, [pc, #8]	; (d7b5c <HAL_USART_Is_Enabled+0xc>)
   d7b54:	681b      	ldr	r3, [r3, #0]
   d7b56:	6a1b      	ldr	r3, [r3, #32]
   d7b58:	9301      	str	r3, [sp, #4]
   d7b5a:	bd08      	pop	{r3, pc}
   d7b5c:	0003023c 	.word	0x0003023c

000d7b60 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d7b60:	b508      	push	{r3, lr}
   d7b62:	4b02      	ldr	r3, [pc, #8]	; (d7b6c <HAL_USART_Available_Data_For_Write+0xc>)
   d7b64:	681b      	ldr	r3, [r3, #0]
   d7b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7b68:	9301      	str	r3, [sp, #4]
   d7b6a:	bd08      	pop	{r3, pc}
   d7b6c:	0003023c 	.word	0x0003023c

000d7b70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7b70:	b508      	push	{r3, lr}
   d7b72:	4b02      	ldr	r3, [pc, #8]	; (d7b7c <HAL_USB_USART_Init+0xc>)
   d7b74:	681b      	ldr	r3, [r3, #0]
   d7b76:	681b      	ldr	r3, [r3, #0]
   d7b78:	9301      	str	r3, [sp, #4]
   d7b7a:	bd08      	pop	{r3, pc}
   d7b7c:	0003024c 	.word	0x0003024c

000d7b80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7b80:	b508      	push	{r3, lr}
   d7b82:	4b02      	ldr	r3, [pc, #8]	; (d7b8c <HAL_USB_USART_Begin+0xc>)
   d7b84:	681b      	ldr	r3, [r3, #0]
   d7b86:	685b      	ldr	r3, [r3, #4]
   d7b88:	9301      	str	r3, [sp, #4]
   d7b8a:	bd08      	pop	{r3, pc}
   d7b8c:	0003024c 	.word	0x0003024c

000d7b90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7b90:	b508      	push	{r3, lr}
   d7b92:	4b02      	ldr	r3, [pc, #8]	; (d7b9c <HAL_USB_USART_Available_Data+0xc>)
   d7b94:	681b      	ldr	r3, [r3, #0]
   d7b96:	691b      	ldr	r3, [r3, #16]
   d7b98:	9301      	str	r3, [sp, #4]
   d7b9a:	bd08      	pop	{r3, pc}
   d7b9c:	0003024c 	.word	0x0003024c

000d7ba0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7ba0:	b508      	push	{r3, lr}
   d7ba2:	4b02      	ldr	r3, [pc, #8]	; (d7bac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7ba4:	681b      	ldr	r3, [r3, #0]
   d7ba6:	695b      	ldr	r3, [r3, #20]
   d7ba8:	9301      	str	r3, [sp, #4]
   d7baa:	bd08      	pop	{r3, pc}
   d7bac:	0003024c 	.word	0x0003024c

000d7bb0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7bb0:	b508      	push	{r3, lr}
   d7bb2:	4b02      	ldr	r3, [pc, #8]	; (d7bbc <HAL_USB_USART_Receive_Data+0xc>)
   d7bb4:	681b      	ldr	r3, [r3, #0]
   d7bb6:	699b      	ldr	r3, [r3, #24]
   d7bb8:	9301      	str	r3, [sp, #4]
   d7bba:	bd08      	pop	{r3, pc}
   d7bbc:	0003024c 	.word	0x0003024c

000d7bc0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7bc0:	b508      	push	{r3, lr}
   d7bc2:	4b02      	ldr	r3, [pc, #8]	; (d7bcc <HAL_USB_USART_Send_Data+0xc>)
   d7bc4:	681b      	ldr	r3, [r3, #0]
   d7bc6:	69db      	ldr	r3, [r3, #28]
   d7bc8:	9301      	str	r3, [sp, #4]
   d7bca:	bd08      	pop	{r3, pc}
   d7bcc:	0003024c 	.word	0x0003024c

000d7bd0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7bd0:	b508      	push	{r3, lr}
   d7bd2:	4b02      	ldr	r3, [pc, #8]	; (d7bdc <HAL_USB_USART_Flush_Data+0xc>)
   d7bd4:	681b      	ldr	r3, [r3, #0]
   d7bd6:	6a1b      	ldr	r3, [r3, #32]
   d7bd8:	9301      	str	r3, [sp, #4]
   d7bda:	bd08      	pop	{r3, pc}
   d7bdc:	0003024c 	.word	0x0003024c

000d7be0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d7be0:	b508      	push	{r3, lr}
   d7be2:	4b02      	ldr	r3, [pc, #8]	; (d7bec <panic_+0xc>)
   d7be4:	681b      	ldr	r3, [r3, #0]
   d7be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7be8:	9301      	str	r3, [sp, #4]
   d7bea:	bd08      	pop	{r3, pc}
   d7bec:	00030260 	.word	0x00030260

000d7bf0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d7bf0:	b508      	push	{r3, lr}
   d7bf2:	4b02      	ldr	r3, [pc, #8]	; (d7bfc <log_message+0xc>)
   d7bf4:	681b      	ldr	r3, [r3, #0]
   d7bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7bf8:	9301      	str	r3, [sp, #4]
   d7bfa:	bd08      	pop	{r3, pc}
   d7bfc:	00030260 	.word	0x00030260

000d7c00 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7c00:	b508      	push	{r3, lr}
   d7c02:	4b02      	ldr	r3, [pc, #8]	; (d7c0c <system_mode+0xc>)
   d7c04:	681b      	ldr	r3, [r3, #0]
   d7c06:	681b      	ldr	r3, [r3, #0]
   d7c08:	9301      	str	r3, [sp, #4]
   d7c0a:	bd08      	pop	{r3, pc}
   d7c0c:	00030220 	.word	0x00030220

000d7c10 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7c10:	b508      	push	{r3, lr}
   d7c12:	4b02      	ldr	r3, [pc, #8]	; (d7c1c <set_system_mode+0xc>)
   d7c14:	681b      	ldr	r3, [r3, #0]
   d7c16:	685b      	ldr	r3, [r3, #4]
   d7c18:	9301      	str	r3, [sp, #4]
   d7c1a:	bd08      	pop	{r3, pc}
   d7c1c:	00030220 	.word	0x00030220

000d7c20 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7c20:	b508      	push	{r3, lr}
   d7c22:	4b02      	ldr	r3, [pc, #8]	; (d7c2c <system_delay_ms+0xc>)
   d7c24:	681b      	ldr	r3, [r3, #0]
   d7c26:	695b      	ldr	r3, [r3, #20]
   d7c28:	9301      	str	r3, [sp, #4]
   d7c2a:	bd08      	pop	{r3, pc}
   d7c2c:	00030220 	.word	0x00030220

000d7c30 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7c30:	b508      	push	{r3, lr}
   d7c32:	4b02      	ldr	r3, [pc, #8]	; (d7c3c <system_thread_set_state+0xc>)
   d7c34:	681b      	ldr	r3, [r3, #0]
   d7c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c38:	9301      	str	r3, [sp, #4]
   d7c3a:	bd08      	pop	{r3, pc}
   d7c3c:	00030220 	.word	0x00030220

000d7c40 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7c40:	b508      	push	{r3, lr}
   d7c42:	4b02      	ldr	r3, [pc, #8]	; (d7c4c <application_thread_current+0xc>)
   d7c44:	681b      	ldr	r3, [r3, #0]
   d7c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7c48:	9301      	str	r3, [sp, #4]
   d7c4a:	bd08      	pop	{r3, pc}
   d7c4c:	00030220 	.word	0x00030220

000d7c50 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7c50:	b508      	push	{r3, lr}
   d7c52:	4b02      	ldr	r3, [pc, #8]	; (d7c5c <application_thread_invoke+0xc>)
   d7c54:	681b      	ldr	r3, [r3, #0]
   d7c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7c58:	9301      	str	r3, [sp, #4]
   d7c5a:	bd08      	pop	{r3, pc}
   d7c5c:	00030220 	.word	0x00030220

000d7c60 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7c60:	b508      	push	{r3, lr}
   d7c62:	4b02      	ldr	r3, [pc, #8]	; (d7c6c <system_thread_get_state+0xc>)
   d7c64:	681b      	ldr	r3, [r3, #0]
   d7c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7c68:	9301      	str	r3, [sp, #4]
   d7c6a:	bd08      	pop	{r3, pc}
   d7c6c:	00030220 	.word	0x00030220

000d7c70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7c70:	b508      	push	{r3, lr}
   d7c72:	4b03      	ldr	r3, [pc, #12]	; (d7c80 <system_ctrl_set_app_request_handler+0x10>)
   d7c74:	681b      	ldr	r3, [r3, #0]
   d7c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7c7a:	9301      	str	r3, [sp, #4]
   d7c7c:	bd08      	pop	{r3, pc}
   d7c7e:	0000      	.short	0x0000
   d7c80:	00030220 	.word	0x00030220

000d7c84 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7c84:	b508      	push	{r3, lr}
   d7c86:	4b03      	ldr	r3, [pc, #12]	; (d7c94 <system_ctrl_set_result+0x10>)
   d7c88:	681b      	ldr	r3, [r3, #0]
   d7c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7c8e:	9301      	str	r3, [sp, #4]
   d7c90:	bd08      	pop	{r3, pc}
   d7c92:	0000      	.short	0x0000
   d7c94:	00030220 	.word	0x00030220

000d7c98 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7c98:	b508      	push	{r3, lr}
   d7c9a:	4b02      	ldr	r3, [pc, #8]	; (d7ca4 <spark_process+0xc>)
   d7c9c:	681b      	ldr	r3, [r3, #0]
   d7c9e:	689b      	ldr	r3, [r3, #8]
   d7ca0:	9301      	str	r3, [sp, #4]
   d7ca2:	bd08      	pop	{r3, pc}
   d7ca4:	00030244 	.word	0x00030244

000d7ca8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7ca8:	b508      	push	{r3, lr}
   d7caa:	4b02      	ldr	r3, [pc, #8]	; (d7cb4 <spark_cloud_flag_connected+0xc>)
   d7cac:	681b      	ldr	r3, [r3, #0]
   d7cae:	695b      	ldr	r3, [r3, #20]
   d7cb0:	9301      	str	r3, [sp, #4]
   d7cb2:	bd08      	pop	{r3, pc}
   d7cb4:	00030244 	.word	0x00030244

000d7cb8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7cb8:	b508      	push	{r3, lr}
   d7cba:	4b02      	ldr	r3, [pc, #8]	; (d7cc4 <spark_send_event+0xc>)
   d7cbc:	681b      	ldr	r3, [r3, #0]
   d7cbe:	6a1b      	ldr	r3, [r3, #32]
   d7cc0:	9301      	str	r3, [sp, #4]
   d7cc2:	bd08      	pop	{r3, pc}
   d7cc4:	00030244 	.word	0x00030244

000d7cc8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d7cc8:	b508      	push	{r3, lr}
   d7cca:	4b02      	ldr	r3, [pc, #8]	; (d7cd4 <spark_subscribe+0xc>)
   d7ccc:	681b      	ldr	r3, [r3, #0]
   d7cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7cd0:	9301      	str	r3, [sp, #4]
   d7cd2:	bd08      	pop	{r3, pc}
   d7cd4:	00030244 	.word	0x00030244

000d7cd8 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7cd8:	b508      	push	{r3, lr}
   d7cda:	4b02      	ldr	r3, [pc, #8]	; (d7ce4 <spark_sync_time_pending+0xc>)
   d7cdc:	681b      	ldr	r3, [r3, #0]
   d7cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7ce0:	9301      	str	r3, [sp, #4]
   d7ce2:	bd08      	pop	{r3, pc}
   d7ce4:	00030244 	.word	0x00030244

000d7ce8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7ce8:	b508      	push	{r3, lr}
   d7cea:	4b02      	ldr	r3, [pc, #8]	; (d7cf4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7cec:	681b      	ldr	r3, [r3, #0]
   d7cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7cf0:	9301      	str	r3, [sp, #4]
   d7cf2:	bd08      	pop	{r3, pc}
   d7cf4:	00030244 	.word	0x00030244

000d7cf8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7cf8:	b508      	push	{r3, lr}
   d7cfa:	4b02      	ldr	r3, [pc, #8]	; (d7d04 <network_connect+0xc>)
   d7cfc:	681b      	ldr	r3, [r3, #0]
   d7cfe:	685b      	ldr	r3, [r3, #4]
   d7d00:	9301      	str	r3, [sp, #4]
   d7d02:	bd08      	pop	{r3, pc}
   d7d04:	00030240 	.word	0x00030240

000d7d08 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7d08:	b508      	push	{r3, lr}
   d7d0a:	4b02      	ldr	r3, [pc, #8]	; (d7d14 <network_connecting+0xc>)
   d7d0c:	681b      	ldr	r3, [r3, #0]
   d7d0e:	689b      	ldr	r3, [r3, #8]
   d7d10:	9301      	str	r3, [sp, #4]
   d7d12:	bd08      	pop	{r3, pc}
   d7d14:	00030240 	.word	0x00030240

000d7d18 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7d18:	b508      	push	{r3, lr}
   d7d1a:	4b02      	ldr	r3, [pc, #8]	; (d7d24 <network_disconnect+0xc>)
   d7d1c:	681b      	ldr	r3, [r3, #0]
   d7d1e:	68db      	ldr	r3, [r3, #12]
   d7d20:	9301      	str	r3, [sp, #4]
   d7d22:	bd08      	pop	{r3, pc}
   d7d24:	00030240 	.word	0x00030240

000d7d28 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7d28:	b508      	push	{r3, lr}
   d7d2a:	4b02      	ldr	r3, [pc, #8]	; (d7d34 <network_ready+0xc>)
   d7d2c:	681b      	ldr	r3, [r3, #0]
   d7d2e:	691b      	ldr	r3, [r3, #16]
   d7d30:	9301      	str	r3, [sp, #4]
   d7d32:	bd08      	pop	{r3, pc}
   d7d34:	00030240 	.word	0x00030240

000d7d38 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7d38:	b508      	push	{r3, lr}
   d7d3a:	4b02      	ldr	r3, [pc, #8]	; (d7d44 <network_on+0xc>)
   d7d3c:	681b      	ldr	r3, [r3, #0]
   d7d3e:	695b      	ldr	r3, [r3, #20]
   d7d40:	9301      	str	r3, [sp, #4]
   d7d42:	bd08      	pop	{r3, pc}
   d7d44:	00030240 	.word	0x00030240

000d7d48 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7d48:	b508      	push	{r3, lr}
   d7d4a:	4b02      	ldr	r3, [pc, #8]	; (d7d54 <network_off+0xc>)
   d7d4c:	681b      	ldr	r3, [r3, #0]
   d7d4e:	699b      	ldr	r3, [r3, #24]
   d7d50:	9301      	str	r3, [sp, #4]
   d7d52:	bd08      	pop	{r3, pc}
   d7d54:	00030240 	.word	0x00030240

000d7d58 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7d58:	b508      	push	{r3, lr}
   d7d5a:	4b02      	ldr	r3, [pc, #8]	; (d7d64 <network_listen+0xc>)
   d7d5c:	681b      	ldr	r3, [r3, #0]
   d7d5e:	69db      	ldr	r3, [r3, #28]
   d7d60:	9301      	str	r3, [sp, #4]
   d7d62:	bd08      	pop	{r3, pc}
   d7d64:	00030240 	.word	0x00030240

000d7d68 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7d68:	b508      	push	{r3, lr}
   d7d6a:	4b02      	ldr	r3, [pc, #8]	; (d7d74 <network_listening+0xc>)
   d7d6c:	681b      	ldr	r3, [r3, #0]
   d7d6e:	6a1b      	ldr	r3, [r3, #32]
   d7d70:	9301      	str	r3, [sp, #4]
   d7d72:	bd08      	pop	{r3, pc}
   d7d74:	00030240 	.word	0x00030240

000d7d78 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7d78:	b508      	push	{r3, lr}
   d7d7a:	4b02      	ldr	r3, [pc, #8]	; (d7d84 <network_set_listen_timeout+0xc>)
   d7d7c:	681b      	ldr	r3, [r3, #0]
   d7d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7d80:	9301      	str	r3, [sp, #4]
   d7d82:	bd08      	pop	{r3, pc}
   d7d84:	00030240 	.word	0x00030240

000d7d88 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d7d88:	b508      	push	{r3, lr}
   d7d8a:	4b02      	ldr	r3, [pc, #8]	; (d7d94 <network_get_listen_timeout+0xc>)
   d7d8c:	681b      	ldr	r3, [r3, #0]
   d7d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7d90:	9301      	str	r3, [sp, #4]
   d7d92:	bd08      	pop	{r3, pc}
   d7d94:	00030240 	.word	0x00030240

000d7d98 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7d98:	b508      	push	{r3, lr}
   d7d9a:	4b02      	ldr	r3, [pc, #8]	; (d7da4 <malloc+0xc>)
   d7d9c:	681b      	ldr	r3, [r3, #0]
   d7d9e:	681b      	ldr	r3, [r3, #0]
   d7da0:	9301      	str	r3, [sp, #4]
   d7da2:	bd08      	pop	{r3, pc}
   d7da4:	0003021c 	.word	0x0003021c

000d7da8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7da8:	b508      	push	{r3, lr}
   d7daa:	4b02      	ldr	r3, [pc, #8]	; (d7db4 <free+0xc>)
   d7dac:	681b      	ldr	r3, [r3, #0]
   d7dae:	685b      	ldr	r3, [r3, #4]
   d7db0:	9301      	str	r3, [sp, #4]
   d7db2:	bd08      	pop	{r3, pc}
   d7db4:	0003021c 	.word	0x0003021c

000d7db8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7db8:	b508      	push	{r3, lr}
   d7dba:	4b02      	ldr	r3, [pc, #8]	; (d7dc4 <realloc+0xc>)
   d7dbc:	681b      	ldr	r3, [r3, #0]
   d7dbe:	689b      	ldr	r3, [r3, #8]
   d7dc0:	9301      	str	r3, [sp, #4]
   d7dc2:	bd08      	pop	{r3, pc}
   d7dc4:	0003021c 	.word	0x0003021c

000d7dc8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d7dc8:	b508      	push	{r3, lr}
   d7dca:	4b02      	ldr	r3, [pc, #8]	; (d7dd4 <sprintf+0xc>)
   d7dcc:	681b      	ldr	r3, [r3, #0]
   d7dce:	68db      	ldr	r3, [r3, #12]
   d7dd0:	9301      	str	r3, [sp, #4]
   d7dd2:	bd08      	pop	{r3, pc}
   d7dd4:	0003021c 	.word	0x0003021c

000d7dd8 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d7dd8:	b508      	push	{r3, lr}
   d7dda:	4b02      	ldr	r3, [pc, #8]	; (d7de4 <sscanf+0xc>)
   d7ddc:	681b      	ldr	r3, [r3, #0]
   d7dde:	695b      	ldr	r3, [r3, #20]
   d7de0:	9301      	str	r3, [sp, #4]
   d7de2:	bd08      	pop	{r3, pc}
   d7de4:	0003021c 	.word	0x0003021c

000d7de8 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d7de8:	b508      	push	{r3, lr}
   d7dea:	4b02      	ldr	r3, [pc, #8]	; (d7df4 <siscanf+0xc>)
   d7dec:	681b      	ldr	r3, [r3, #0]
   d7dee:	699b      	ldr	r3, [r3, #24]
   d7df0:	9301      	str	r3, [sp, #4]
   d7df2:	bd08      	pop	{r3, pc}
   d7df4:	0003021c 	.word	0x0003021c

000d7df8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7df8:	b508      	push	{r3, lr}
   d7dfa:	4b02      	ldr	r3, [pc, #8]	; (d7e04 <snprintf+0xc>)
   d7dfc:	681b      	ldr	r3, [r3, #0]
   d7dfe:	69db      	ldr	r3, [r3, #28]
   d7e00:	9301      	str	r3, [sp, #4]
   d7e02:	bd08      	pop	{r3, pc}
   d7e04:	0003021c 	.word	0x0003021c

000d7e08 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7e08:	b508      	push	{r3, lr}
   d7e0a:	4b02      	ldr	r3, [pc, #8]	; (d7e14 <vsnprintf+0xc>)
   d7e0c:	681b      	ldr	r3, [r3, #0]
   d7e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7e10:	9301      	str	r3, [sp, #4]
   d7e12:	bd08      	pop	{r3, pc}
   d7e14:	0003021c 	.word	0x0003021c

000d7e18 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7e18:	b508      	push	{r3, lr}
   d7e1a:	4b02      	ldr	r3, [pc, #8]	; (d7e24 <abort+0xc>)
   d7e1c:	681b      	ldr	r3, [r3, #0]
   d7e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e20:	9301      	str	r3, [sp, #4]
   d7e22:	bd08      	pop	{r3, pc}
   d7e24:	0003021c 	.word	0x0003021c

000d7e28 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7e28:	b508      	push	{r3, lr}
   d7e2a:	4b02      	ldr	r3, [pc, #8]	; (d7e34 <_malloc_r+0xc>)
   d7e2c:	681b      	ldr	r3, [r3, #0]
   d7e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7e30:	9301      	str	r3, [sp, #4]
   d7e32:	bd08      	pop	{r3, pc}
   d7e34:	0003021c 	.word	0x0003021c

000d7e38 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7e38:	b508      	push	{r3, lr}
   d7e3a:	4b02      	ldr	r3, [pc, #8]	; (d7e44 <__errno+0xc>)
   d7e3c:	681b      	ldr	r3, [r3, #0]
   d7e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7e40:	9301      	str	r3, [sp, #4]
   d7e42:	bd08      	pop	{r3, pc}
   d7e44:	0003021c 	.word	0x0003021c

000d7e48 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7e48:	2100      	movs	r1, #0
   d7e4a:	f7ff bee9 	b.w	d7c20 <system_delay_ms>

000d7e4e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7e4e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7e50:	6883      	ldr	r3, [r0, #8]
   d7e52:	4604      	mov	r4, r0
   d7e54:	b90b      	cbnz	r3, d7e5a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7e56:	f001 fd9e 	bl	d9996 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7e5a:	68c3      	ldr	r3, [r0, #12]
   d7e5c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7e5e:	68a3      	ldr	r3, [r4, #8]
   d7e60:	b11b      	cbz	r3, d7e6a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7e62:	2203      	movs	r2, #3
   d7e64:	4621      	mov	r1, r4
   d7e66:	4620      	mov	r0, r4
   d7e68:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7e6a:	4620      	mov	r0, r4
   d7e6c:	2110      	movs	r1, #16
}
   d7e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7e72:	f001 bd76 	b.w	d9962 <_ZdlPvj>

000d7e76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7e76:	680b      	ldr	r3, [r1, #0]
   d7e78:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7e7a:	b113      	cbz	r3, d7e82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7e7c:	685a      	ldr	r2, [r3, #4]
   d7e7e:	3201      	adds	r2, #1
   d7e80:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d7e82:	4770      	bx	lr

000d7e84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7e84:	4802      	ldr	r0, [pc, #8]	; (d7e90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7e86:	2300      	movs	r3, #0
   d7e88:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7e8a:	f7ff bcd9 	b.w	d7840 <os_mutex_recursive_create>
   d7e8e:	bf00      	nop
   d7e90:	2003e370 	.word	0x2003e370

000d7e94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7e94:	4770      	bx	lr

000d7e96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7e96:	2000      	movs	r0, #0
   d7e98:	4770      	bx	lr

000d7e9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7e9a:	b510      	push	{r4, lr}
   d7e9c:	2110      	movs	r1, #16
   d7e9e:	4604      	mov	r4, r0
   d7ea0:	f001 fd5f 	bl	d9962 <_ZdlPvj>
   d7ea4:	4620      	mov	r0, r4
   d7ea6:	bd10      	pop	{r4, pc}

000d7ea8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7ea8:	b508      	push	{r3, lr}
      { delete this; }
   d7eaa:	b108      	cbz	r0, d7eb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7eac:	f7ff fff5 	bl	d7e9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7eb0:	bd08      	pop	{r3, pc}

000d7eb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d7eb2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7eb4:	68c4      	ldr	r4, [r0, #12]
   d7eb6:	b1ec      	cbz	r4, d7ef4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7eb8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7eba:	2b02      	cmp	r3, #2
   d7ebc:	d102      	bne.n	d7ec4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7ebe:	68e0      	ldr	r0, [r4, #12]
   d7ec0:	f7ff ff72 	bl	d7da8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7ec4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7ec6:	b135      	cbz	r5, d7ed6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7ec8:	4628      	mov	r0, r5
   d7eca:	f7fc f966 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d7ece:	2110      	movs	r1, #16
   d7ed0:	4628      	mov	r0, r5
   d7ed2:	f001 fd46 	bl	d9962 <_ZdlPvj>
   d7ed6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7ed8:	b135      	cbz	r5, d7ee8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d7eda:	4628      	mov	r0, r5
   d7edc:	f7fc f95d 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d7ee0:	2110      	movs	r1, #16
   d7ee2:	4628      	mov	r0, r5
   d7ee4:	f001 fd3d 	bl	d9962 <_ZdlPvj>
   d7ee8:	4620      	mov	r0, r4
   d7eea:	2114      	movs	r1, #20
   d7eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7ef0:	f001 bd37 	b.w	d9962 <_ZdlPvj>
   d7ef4:	bd38      	pop	{r3, r4, r5, pc}

000d7ef6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7ef6:	b513      	push	{r0, r1, r4, lr}
   d7ef8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7efa:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7efe:	2300      	movs	r3, #0
   d7f00:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7f02:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7f04:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7f06:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7f08:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7f0a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7f0c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7f0e:	f7fc fd1d 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f12:	4620      	mov	r0, r4
   d7f14:	b002      	add	sp, #8
   d7f16:	bd10      	pop	{r4, pc}

000d7f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7f1a:	460c      	mov	r4, r1
   d7f1c:	ad02      	add	r5, sp, #8
   d7f1e:	f854 3b04 	ldr.w	r3, [r4], #4
   d7f22:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7f26:	4606      	mov	r6, r0
   d7f28:	460f      	mov	r7, r1
   d7f2a:	a801      	add	r0, sp, #4
   d7f2c:	4621      	mov	r1, r4
   d7f2e:	f7ff ffa2 	bl	d7e76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d7f32:	4629      	mov	r1, r5
   d7f34:	4630      	mov	r0, r6
   d7f36:	f7ff ffde 	bl	d7ef6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7f3a:	a801      	add	r0, sp, #4
   d7f3c:	f7fc fd06 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f40:	4620      	mov	r0, r4
   d7f42:	f7fc fd03 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d7f46:	4638      	mov	r0, r7
   d7f48:	2108      	movs	r1, #8
   d7f4a:	f001 fd0a 	bl	d9962 <_ZdlPvj>
        return p;
    }
   d7f4e:	4630      	mov	r0, r6
   d7f50:	b003      	add	sp, #12
   d7f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7f54 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7f54:	b513      	push	{r0, r1, r4, lr}
   d7f56:	460b      	mov	r3, r1
   d7f58:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f5a:	c803      	ldmia	r0, {r0, r1}
   d7f5c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7f60:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7f64:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7f68:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d7f6c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7f70:	b002      	add	sp, #8
   d7f72:	bd10      	pop	{r4, pc}

000d7f74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7f74:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7f76:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7f78:	b90a      	cbnz	r2, d7f7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7f7a:	f001 fd0c 	bl	d9996 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f7e:	68c3      	ldr	r3, [r0, #12]
    }
   d7f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f84:	4718      	bx	r3

000d7f86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7f86:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7f88:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7f8a:	f100 0110 	add.w	r1, r0, #16
   d7f8e:	f7ff fff1 	bl	d7f74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d7f92:	bd08      	pop	{r3, pc}

000d7f94 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7f94:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7f96:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7f98:	b90a      	cbnz	r2, d7f9e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7f9a:	f001 fcfc 	bl	d9996 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f9e:	68c3      	ldr	r3, [r0, #12]
    }
   d7fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7fa4:	4718      	bx	r3

000d7fa6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7fa6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7fa8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7faa:	f100 0110 	add.w	r1, r0, #16
   d7fae:	f7ff fff1 	bl	d7f94 <_ZNKSt8functionIFvRKbEEclES1_>
   d7fb2:	bd08      	pop	{r3, pc}

000d7fb4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7fb4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7fb6:	2300      	movs	r3, #0
   d7fb8:	6083      	str	r3, [r0, #8]
   d7fba:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7fbc:	4604      	mov	r4, r0
   d7fbe:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7fc0:	b12b      	cbz	r3, d7fce <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7fc2:	2202      	movs	r2, #2
   d7fc4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7fc6:	68eb      	ldr	r3, [r5, #12]
   d7fc8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7fca:	68ab      	ldr	r3, [r5, #8]
   d7fcc:	60a3      	str	r3, [r4, #8]
	}
    }
   d7fce:	4620      	mov	r0, r4
   d7fd0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7fd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d7fd8:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d7fdc:	b086      	sub	sp, #24
   d7fde:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7fe0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7fe4:	808b      	strh	r3, [r1, #4]
   d7fe6:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7fe8:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7fea:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d7fee:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7ff0:	f04f 0002 	mov.w	r0, #2
   d7ff4:	e8d4 1f4f 	ldrexb	r1, [r4]
   d7ff8:	4299      	cmp	r1, r3
   d7ffa:	d103      	bne.n	d8004 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d7ffc:	e8c4 0f45 	strexb	r5, r0, [r4]
   d8000:	2d00      	cmp	r5, #0
   d8002:	d1f7      	bne.n	d7ff4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d8004:	d002      	beq.n	d800c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d8006:	f88d 1000 	strb.w	r1, [sp]
   d800a:	e06b      	b.n	d80e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d800c:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8010:	bf1e      	ittt	ne
   d8012:	60e7      	strne	r7, [r4, #12]
   d8014:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d8016:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8018:	2301      	movs	r3, #1
   d801a:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d801e:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8020:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d8022:	f104 0308 	add.w	r3, r4, #8
   d8026:	f3bf 8f5f 	dmb	sy
   d802a:	e853 6f00 	ldrex	r6, [r3]
   d802e:	e843 0200 	strex	r2, r0, [r3]
   d8032:	2a00      	cmp	r2, #0
   d8034:	d1f9      	bne.n	d802a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d8036:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d803a:	2e00      	cmp	r6, #0
   d803c:	d052      	beq.n	d80e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d803e:	f7ff fdff 	bl	d7c40 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d8042:	b120      	cbz	r0, d804e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8044:	4629      	mov	r1, r5
   d8046:	4630      	mov	r0, r6
   d8048:	f7ff ff94 	bl	d7f74 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d804c:	e043      	b.n	d80d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d804e:	4631      	mov	r1, r6
   d8050:	4668      	mov	r0, sp
   d8052:	f7ff ffaf 	bl	d7fb4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d8056:	68e0      	ldr	r0, [r4, #12]
   d8058:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d805c:	b108      	cbz	r0, d8062 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d805e:	f002 fb5b 	bl	da718 <strdup>
   d8062:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8064:	2010      	movs	r0, #16
   d8066:	f8ad 5014 	strh.w	r5, [sp, #20]
   d806a:	f7fc f814 	bl	d4096 <_Znwj>
   d806e:	4605      	mov	r5, r0
   d8070:	b330      	cbz	r0, d80c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8072:	f04f 0800 	mov.w	r8, #0
   d8076:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d807a:	2018      	movs	r0, #24
   d807c:	f7fc f80b 	bl	d4096 <_Znwj>
   d8080:	4604      	mov	r4, r0
   d8082:	b1c0      	cbz	r0, d80b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8084:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d8088:	4601      	mov	r1, r0
   d808a:	4668      	mov	r0, sp
   d808c:	f7ff ff62 	bl	d7f54 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8090:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8092:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8094:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8096:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8098:	9202      	str	r2, [sp, #8]
   d809a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d809c:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d809e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d80a2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d80a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d80a8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d80ac:	9b04      	ldr	r3, [sp, #16]
   d80ae:	9203      	str	r2, [sp, #12]
   d80b0:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d80b2:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d80b6:	4b0e      	ldr	r3, [pc, #56]	; (d80f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d80b8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d80ba:	4b0e      	ldr	r3, [pc, #56]	; (d80f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d80bc:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d80be:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d80c0:	9804      	ldr	r0, [sp, #16]
   d80c2:	f7ff fe71 	bl	d7da8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d80c6:	4668      	mov	r0, sp
   d80c8:	f7fc f867 	bl	d419a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d80cc:	2200      	movs	r2, #0
   d80ce:	4629      	mov	r1, r5
   d80d0:	4809      	ldr	r0, [pc, #36]	; (d80f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d80d2:	f7ff fdbd 	bl	d7c50 <application_thread_invoke>
   d80d6:	4630      	mov	r0, r6
   d80d8:	f7fc f85f 	bl	d419a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d80dc:	2110      	movs	r1, #16
   d80de:	4630      	mov	r0, r6
   d80e0:	f001 fc3f 	bl	d9962 <_ZdlPvj>
   d80e4:	4638      	mov	r0, r7
   d80e6:	f7ff fe5f 	bl	d7da8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d80ea:	b006      	add	sp, #24
   d80ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d80f0:	000d7f87 	.word	0x000d7f87
   d80f4:	000d81e5 	.word	0x000d81e5
   d80f8:	000d7e4f 	.word	0x000d7e4f

000d80fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d80fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8100:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8102:	ad07      	add	r5, sp, #28
   d8104:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8108:	4606      	mov	r6, r0
   d810a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d810c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d810e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8110:	460f      	mov	r7, r1
   d8112:	4690      	mov	r8, r2
   d8114:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8118:	f8c5 b004 	str.w	fp, [r5, #4]
   d811c:	f8c5 b008 	str.w	fp, [r5, #8]
   d8120:	9307      	str	r3, [sp, #28]
   d8122:	f7fb ffb8 	bl	d4096 <_Znwj>
   d8126:	4604      	mov	r4, r0
   d8128:	b138      	cbz	r0, d813a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d812a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d812e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8132:	f8c0 b004 	str.w	fp, [r0, #4]
   d8136:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d813a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d813c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d813e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d8140:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8142:	f7fb ffa8 	bl	d4096 <_Znwj>
   d8146:	b128      	cbz	r0, d8154 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8148:	2301      	movs	r3, #1
   d814a:	6043      	str	r3, [r0, #4]
   d814c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d814e:	4b23      	ldr	r3, [pc, #140]	; (d81dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d8150:	6003      	str	r3, [r0, #0]
   d8152:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d8154:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d8156:	4b22      	ldr	r3, [pc, #136]	; (d81e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d8158:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d815a:	2008      	movs	r0, #8
   d815c:	f7fb ff9b 	bl	d4096 <_Znwj>
   d8160:	4604      	mov	r4, r0
   d8162:	b128      	cbz	r0, d8170 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8164:	9b03      	ldr	r3, [sp, #12]
   d8166:	f840 3b04 	str.w	r3, [r0], #4
   d816a:	a904      	add	r1, sp, #16
   d816c:	f7ff fe83 	bl	d7e76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d8170:	9500      	str	r5, [sp, #0]
   d8172:	fa5f f38a 	uxtb.w	r3, sl
   d8176:	464a      	mov	r2, r9
   d8178:	4641      	mov	r1, r8
   d817a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d817c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d817e:	f7ff fd9b 	bl	d7cb8 <spark_send_event>
   d8182:	b9b8      	cbnz	r0, d81b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d8184:	9b03      	ldr	r3, [sp, #12]
   d8186:	785b      	ldrb	r3, [r3, #1]
   d8188:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d818c:	b993      	cbnz	r3, d81b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d818e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d8192:	a905      	add	r1, sp, #20
   d8194:	a803      	add	r0, sp, #12
   d8196:	9205      	str	r2, [sp, #20]
   d8198:	f8ad 3018 	strh.w	r3, [sp, #24]
   d819c:	f7ff ff1a 	bl	d7fd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d81a0:	9805      	ldr	r0, [sp, #20]
   d81a2:	f7ff fe01 	bl	d7da8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d81a6:	a805      	add	r0, sp, #20
   d81a8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d81aa:	f7ff feb5 	bl	d7f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d81ae:	a806      	add	r0, sp, #24
   d81b0:	f7fc fbcc 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d81b4:	9b03      	ldr	r3, [sp, #12]
   d81b6:	9305      	str	r3, [sp, #20]
   d81b8:	a904      	add	r1, sp, #16
   d81ba:	a806      	add	r0, sp, #24
   d81bc:	f7ff fe5b 	bl	d7e76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d81c0:	a905      	add	r1, sp, #20
   d81c2:	4630      	mov	r0, r6
   d81c4:	f7ff fe97 	bl	d7ef6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d81c8:	a806      	add	r0, sp, #24
   d81ca:	f7fc fbbf 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d81ce:	a804      	add	r0, sp, #16
   d81d0:	f7fc fbbc 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d81d4:	4630      	mov	r0, r6
   d81d6:	b00b      	add	sp, #44	; 0x2c
   d81d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d81dc:	000dbc70 	.word	0x000dbc70
   d81e0:	000d8351 	.word	0x000d8351

000d81e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d81e4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d81e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d81e8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d81ea:	d006      	beq.n	d81fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d81ec:	2a03      	cmp	r2, #3
   d81ee:	d017      	beq.n	d8220 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d81f0:	2a01      	cmp	r2, #1
   d81f2:	d121      	bne.n	d8238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d81f4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d81f6:	6003      	str	r3, [r0, #0]
	      break;
   d81f8:	e01e      	b.n	d8238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d81fa:	2018      	movs	r0, #24
   d81fc:	680e      	ldr	r6, [r1, #0]
   d81fe:	f7fb ff4a 	bl	d4096 <_Znwj>
   d8202:	4605      	mov	r5, r0
   d8204:	b150      	cbz	r0, d821c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8206:	4631      	mov	r1, r6
   d8208:	f7ff fed4 	bl	d7fb4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d820c:	6930      	ldr	r0, [r6, #16]
   d820e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8212:	b108      	cbz	r0, d8218 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d8214:	f002 fa80 	bl	da718 <strdup>
   d8218:	6128      	str	r0, [r5, #16]
   d821a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d821c:	6025      	str	r5, [r4, #0]
   d821e:	e00b      	b.n	d8238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8220:	6804      	ldr	r4, [r0, #0]
   d8222:	b14c      	cbz	r4, d8238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d8224:	6920      	ldr	r0, [r4, #16]
   d8226:	f7ff fdbf 	bl	d7da8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d822a:	4620      	mov	r0, r4
   d822c:	f7fb ffb5 	bl	d419a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8230:	2118      	movs	r1, #24
   d8232:	4620      	mov	r0, r4
   d8234:	f001 fb95 	bl	d9962 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d8238:	2000      	movs	r0, #0
   d823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d823c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d823c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d823e:	2300      	movs	r3, #0
   d8240:	6083      	str	r3, [r0, #8]
   d8242:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8244:	4604      	mov	r4, r0
   d8246:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8248:	b12b      	cbz	r3, d8256 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d824a:	2202      	movs	r2, #2
   d824c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d824e:	68eb      	ldr	r3, [r5, #12]
   d8250:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8252:	68ab      	ldr	r3, [r5, #8]
   d8254:	60a3      	str	r3, [r4, #8]
	}
    }
   d8256:	4620      	mov	r0, r4
   d8258:	bd38      	pop	{r3, r4, r5, pc}

000d825a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d825a:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d825c:	b570      	push	{r4, r5, r6, lr}
   d825e:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d8260:	d006      	beq.n	d8270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d8262:	2a03      	cmp	r2, #3
   d8264:	d011      	beq.n	d828a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d8266:	2a01      	cmp	r2, #1
   d8268:	d118      	bne.n	d829c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d826a:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d826c:	6003      	str	r3, [r0, #0]
	      break;
   d826e:	e015      	b.n	d829c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8270:	2014      	movs	r0, #20
   d8272:	680e      	ldr	r6, [r1, #0]
   d8274:	f7fb ff0f 	bl	d4096 <_Znwj>
   d8278:	4605      	mov	r5, r0
   d827a:	b120      	cbz	r0, d8286 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d827c:	4631      	mov	r1, r6
   d827e:	f7ff ffdd 	bl	d823c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d8282:	7c33      	ldrb	r3, [r6, #16]
   d8284:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d8286:	6025      	str	r5, [r4, #0]
   d8288:	e008      	b.n	d829c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d828a:	6804      	ldr	r4, [r0, #0]
   d828c:	b134      	cbz	r4, d829c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d828e:	4620      	mov	r0, r4
   d8290:	f7fb ff83 	bl	d419a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8294:	2114      	movs	r1, #20
   d8296:	4620      	mov	r0, r4
   d8298:	f001 fb63 	bl	d9962 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d829c:	2000      	movs	r0, #0
   d829e:	bd70      	pop	{r4, r5, r6, pc}

000d82a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d82a0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d82a2:	2300      	movs	r3, #0
   d82a4:	b087      	sub	sp, #28
   d82a6:	460c      	mov	r4, r1
   d82a8:	f3bf 8f5f 	dmb	sy
   d82ac:	e850 6f00 	ldrex	r6, [r0]
   d82b0:	e840 3200 	strex	r2, r3, [r0]
   d82b4:	2a00      	cmp	r2, #0
   d82b6:	d1f9      	bne.n	d82ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d82b8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d82bc:	2e00      	cmp	r6, #0
   d82be:	d03f      	beq.n	d8340 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d82c0:	4618      	mov	r0, r3
   d82c2:	f7ff fcbd 	bl	d7c40 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d82c6:	4607      	mov	r7, r0
   d82c8:	b120      	cbz	r0, d82d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d82ca:	4621      	mov	r1, r4
   d82cc:	4630      	mov	r0, r6
   d82ce:	f7ff fe61 	bl	d7f94 <_ZNKSt8functionIFvRKbEEclES1_>
   d82d2:	e02e      	b.n	d8332 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d82d4:	4631      	mov	r1, r6
   d82d6:	a801      	add	r0, sp, #4
   d82d8:	f7ff ffb0 	bl	d823c <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d82dc:	7823      	ldrb	r3, [r4, #0]
   d82de:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d82e2:	2010      	movs	r0, #16
   d82e4:	f7fb fed7 	bl	d4096 <_Znwj>
   d82e8:	4605      	mov	r5, r0
   d82ea:	b1d0      	cbz	r0, d8322 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d82ec:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d82ee:	2014      	movs	r0, #20
   d82f0:	f7fb fed1 	bl	d4096 <_Znwj>
   d82f4:	4604      	mov	r4, r0
   d82f6:	b178      	cbz	r0, d8318 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d82f8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d82fa:	4601      	mov	r1, r0
   d82fc:	a801      	add	r0, sp, #4
   d82fe:	f7ff fe29 	bl	d7f54 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8302:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8304:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8306:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8308:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d830a:	9203      	str	r2, [sp, #12]
   d830c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d830e:	60e3      	str	r3, [r4, #12]
   d8310:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8314:	9204      	str	r2, [sp, #16]
   d8316:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d8318:	4b0a      	ldr	r3, [pc, #40]	; (d8344 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d831a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d831c:	4b0a      	ldr	r3, [pc, #40]	; (d8348 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d831e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8320:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8322:	a801      	add	r0, sp, #4
   d8324:	f7fb ff39 	bl	d419a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8328:	2200      	movs	r2, #0
   d832a:	4629      	mov	r1, r5
   d832c:	4807      	ldr	r0, [pc, #28]	; (d834c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d832e:	f7ff fc8f 	bl	d7c50 <application_thread_invoke>
   d8332:	4630      	mov	r0, r6
   d8334:	f7fb ff31 	bl	d419a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d8338:	2110      	movs	r1, #16
   d833a:	4630      	mov	r0, r6
   d833c:	f001 fb11 	bl	d9962 <_ZdlPvj>
        }
    }
   d8340:	b007      	add	sp, #28
   d8342:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8344:	000d7fa7 	.word	0x000d7fa7
   d8348:	000d825b 	.word	0x000d825b
   d834c:	000d7e4f 	.word	0x000d7e4f

000d8350 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8350:	b530      	push	{r4, r5, lr}
   d8352:	b085      	sub	sp, #20
   d8354:	4604      	mov	r4, r0
   d8356:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d8358:	4668      	mov	r0, sp
   d835a:	4611      	mov	r1, r2
   d835c:	f7ff fddc 	bl	d7f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8360:	b17c      	cbz	r4, d8382 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8362:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8364:	4628      	mov	r0, r5
   d8366:	b10d      	cbz	r5, d836c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d8368:	f002 f9d6 	bl	da718 <strdup>
   d836c:	9002      	str	r0, [sp, #8]
   d836e:	a902      	add	r1, sp, #8
   d8370:	4668      	mov	r0, sp
   d8372:	f8ad 400c 	strh.w	r4, [sp, #12]
   d8376:	f7ff fe2d 	bl	d7fd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d837a:	9802      	ldr	r0, [sp, #8]
   d837c:	f7ff fd14 	bl	d7da8 <free>
   d8380:	e01d      	b.n	d83be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d8382:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8384:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d8388:	f04f 0201 	mov.w	r2, #1
   d838c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d8390:	42a3      	cmp	r3, r4
   d8392:	d103      	bne.n	d839c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d8394:	e8c0 2f41 	strexb	r1, r2, [r0]
   d8398:	2900      	cmp	r1, #0
   d839a:	d1f7      	bne.n	d838c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d839c:	d002      	beq.n	d83a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d839e:	f88d 3008 	strb.w	r3, [sp, #8]
   d83a2:	e00c      	b.n	d83be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d83a4:	f110 010c 	adds.w	r1, r0, #12
   d83a8:	f04f 0301 	mov.w	r3, #1
   d83ac:	bf18      	it	ne
   d83ae:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d83b0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d83b4:	3004      	adds	r0, #4
   d83b6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d83ba:	f7ff ff71 	bl	d82a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d83be:	a801      	add	r0, sp, #4
   d83c0:	f7fc fac4 	bl	d494c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d83c4:	b005      	add	sp, #20
   d83c6:	bd30      	pop	{r4, r5, pc}

000d83c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d83c8:	2200      	movs	r2, #0
   d83ca:	4611      	mov	r1, r2
   d83cc:	6840      	ldr	r0, [r0, #4]
   d83ce:	f7ff bccb 	b.w	d7d68 <network_listening>

000d83d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d83d2:	2200      	movs	r2, #0
   d83d4:	4611      	mov	r1, r2
   d83d6:	6840      	ldr	r0, [r0, #4]
   d83d8:	f7ff bcd6 	b.w	d7d88 <network_get_listen_timeout>

000d83dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d83dc:	2200      	movs	r2, #0
   d83de:	6840      	ldr	r0, [r0, #4]
   d83e0:	f7ff bcca 	b.w	d7d78 <network_set_listen_timeout>

000d83e4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d83e4:	2200      	movs	r2, #0
   d83e6:	f081 0101 	eor.w	r1, r1, #1
   d83ea:	6840      	ldr	r0, [r0, #4]
   d83ec:	f7ff bcb4 	b.w	d7d58 <network_listen>

000d83f0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d83f0:	2300      	movs	r3, #0
   d83f2:	461a      	mov	r2, r3
   d83f4:	4619      	mov	r1, r3
   d83f6:	6840      	ldr	r0, [r0, #4]
   d83f8:	f7ff bca6 	b.w	d7d48 <network_off>

000d83fc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d83fc:	2300      	movs	r3, #0
   d83fe:	461a      	mov	r2, r3
   d8400:	4619      	mov	r1, r3
   d8402:	6840      	ldr	r0, [r0, #4]
   d8404:	f7ff bc98 	b.w	d7d38 <network_on>

000d8408 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8408:	2200      	movs	r2, #0
   d840a:	4611      	mov	r1, r2
   d840c:	6840      	ldr	r0, [r0, #4]
   d840e:	f7ff bc8b 	b.w	d7d28 <network_ready>

000d8412 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8412:	2200      	movs	r2, #0
   d8414:	4611      	mov	r1, r2
   d8416:	6840      	ldr	r0, [r0, #4]
   d8418:	f7ff bc76 	b.w	d7d08 <network_connecting>

000d841c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d841c:	2200      	movs	r2, #0
   d841e:	2102      	movs	r1, #2
   d8420:	6840      	ldr	r0, [r0, #4]
   d8422:	f7ff bc79 	b.w	d7d18 <network_disconnect>

000d8426 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8426:	2300      	movs	r3, #0
   d8428:	461a      	mov	r2, r3
   d842a:	6840      	ldr	r0, [r0, #4]
   d842c:	f7ff bc64 	b.w	d7cf8 <network_connect>

000d8430 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d8430:	4b02      	ldr	r3, [pc, #8]	; (d843c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8432:	2203      	movs	r2, #3
   d8434:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8436:	4a02      	ldr	r2, [pc, #8]	; (d8440 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8438:	601a      	str	r2, [r3, #0]
   d843a:	4770      	bx	lr
   d843c:	2003e374 	.word	0x2003e374
   d8440:	000dbc8c 	.word	0x000dbc8c

000d8444 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d8444:	4770      	bx	lr

000d8446 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8448:	4606      	mov	r6, r0
   d844a:	4615      	mov	r5, r2
   d844c:	460c      	mov	r4, r1
   d844e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8450:	42bc      	cmp	r4, r7
   d8452:	d006      	beq.n	d8462 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8454:	6833      	ldr	r3, [r6, #0]
   d8456:	f814 1b01 	ldrb.w	r1, [r4], #1
   d845a:	689b      	ldr	r3, [r3, #8]
   d845c:	4630      	mov	r0, r6
   d845e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8460:	e7f6      	b.n	d8450 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8462:	4628      	mov	r0, r5
   d8464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8466 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8466:	2200      	movs	r2, #0
   d8468:	7c00      	ldrb	r0, [r0, #16]
   d846a:	f7ff ba91 	b.w	d7990 <HAL_I2C_Write_Data>

000d846e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d846e:	2100      	movs	r1, #0
   d8470:	7c00      	ldrb	r0, [r0, #16]
   d8472:	f7ff ba95 	b.w	d79a0 <HAL_I2C_Available_Data>

000d8476 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8476:	2100      	movs	r1, #0
   d8478:	7c00      	ldrb	r0, [r0, #16]
   d847a:	f7ff ba99 	b.w	d79b0 <HAL_I2C_Read_Data>

000d847e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d847e:	2100      	movs	r1, #0
   d8480:	7c00      	ldrb	r0, [r0, #16]
   d8482:	f7ff ba9d 	b.w	d79c0 <HAL_I2C_Peek_Data>

000d8486 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8486:	2100      	movs	r1, #0
   d8488:	7c00      	ldrb	r0, [r0, #16]
   d848a:	f7ff baa1 	b.w	d79d0 <HAL_I2C_Flush_Data>

000d848e <_ZN7TwoWireD0Ev>:
   d848e:	b510      	push	{r4, lr}
   d8490:	2114      	movs	r1, #20
   d8492:	4604      	mov	r4, r0
   d8494:	f001 fa65 	bl	d9962 <_ZdlPvj>
   d8498:	4620      	mov	r0, r4
   d849a:	bd10      	pop	{r4, pc}

000d849c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d849c:	b510      	push	{r4, lr}
   d849e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d84a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d84a4:	4608      	mov	r0, r1
   d84a6:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d84a8:	2100      	movs	r1, #0
   d84aa:	4b04      	ldr	r3, [pc, #16]	; (d84bc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d84ac:	7420      	strb	r0, [r4, #16]
   d84ae:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d84b0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d84b2:	f7ff fa9d 	bl	d79f0 <HAL_I2C_Init>

}
   d84b6:	4620      	mov	r0, r4
   d84b8:	bd10      	pop	{r4, pc}
   d84ba:	bf00      	nop
   d84bc:	000dbcc0 	.word	0x000dbcc0

000d84c0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d84c0:	2300      	movs	r3, #0
   d84c2:	461a      	mov	r2, r3
   d84c4:	4619      	mov	r1, r3
   d84c6:	7c00      	ldrb	r0, [r0, #16]
   d84c8:	f7ff ba42 	b.w	d7950 <HAL_I2C_Begin>

000d84cc <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d84cc:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d84ce:	2400      	movs	r4, #0
   d84d0:	7c00      	ldrb	r0, [r0, #16]
   d84d2:	9400      	str	r4, [sp, #0]
   d84d4:	f7ff fa44 	bl	d7960 <HAL_I2C_Request_Data>
  return result;
}
   d84d8:	b2c0      	uxtb	r0, r0
   d84da:	b002      	add	sp, #8
   d84dc:	bd10      	pop	{r4, pc}

000d84de <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d84de:	2301      	movs	r3, #1
   d84e0:	f7ff bff4 	b.w	d84cc <_ZN7TwoWire11requestFromEhhh>

000d84e4 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d84e4:	2200      	movs	r2, #0
   d84e6:	7c00      	ldrb	r0, [r0, #16]
   d84e8:	f7ff ba42 	b.w	d7970 <HAL_I2C_Begin_Transmission>

000d84ec <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d84ec:	2200      	movs	r2, #0
   d84ee:	7c00      	ldrb	r0, [r0, #16]
   d84f0:	f7ff ba46 	b.w	d7980 <HAL_I2C_End_Transmission>

000d84f4 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d84f4:	2101      	movs	r1, #1
   d84f6:	f7ff bff9 	b.w	d84ec <_ZN7TwoWire15endTransmissionEh>

000d84fa <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d84fa:	2100      	movs	r1, #0
   d84fc:	7c00      	ldrb	r0, [r0, #16]
   d84fe:	f7ff ba6f 	b.w	d79e0 <HAL_I2C_Is_Enabled>

000d8502 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8502:	4770      	bx	lr

000d8504 <_ZN9IPAddressD0Ev>:
   d8504:	b510      	push	{r4, lr}
   d8506:	2118      	movs	r1, #24
   d8508:	4604      	mov	r4, r0
   d850a:	f001 fa2a 	bl	d9962 <_ZdlPvj>
   d850e:	4620      	mov	r0, r4
   d8510:	bd10      	pop	{r4, pc}

000d8512 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8512:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8514:	7d03      	ldrb	r3, [r0, #20]
   d8516:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8518:	b08d      	sub	sp, #52	; 0x34
   d851a:	460e      	mov	r6, r1
   d851c:	f100 0704 	add.w	r7, r0, #4
   d8520:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8524:	d002      	beq.n	d852c <_ZNK9IPAddress7printToER5Print+0x1a>
   d8526:	f100 0508 	add.w	r5, r0, #8
   d852a:	e018      	b.n	d855e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d852c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d852e:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8530:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8534:	232f      	movs	r3, #47	; 0x2f
   d8536:	462a      	mov	r2, r5
   d8538:	200a      	movs	r0, #10
   d853a:	f7ff fa69 	bl	d7a10 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d853e:	4628      	mov	r0, r5
   d8540:	f002 f905 	bl	da74e <strlen>
   d8544:	6833      	ldr	r3, [r6, #0]
   d8546:	4602      	mov	r2, r0
   d8548:	68db      	ldr	r3, [r3, #12]
   d854a:	4629      	mov	r1, r5
   d854c:	4630      	mov	r0, r6
   d854e:	4798      	blx	r3
   d8550:	e00f      	b.n	d8572 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8552:	b124      	cbz	r4, d855e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d8554:	212e      	movs	r1, #46	; 0x2e
   d8556:	4630      	mov	r0, r6
   d8558:	f000 f9ac 	bl	d88b4 <_ZN5Print5printEc>
   d855c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d855e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8562:	220a      	movs	r2, #10
   d8564:	4630      	mov	r0, r6
   d8566:	f000 f9ef 	bl	d8948 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d856a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d856c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d856e:	d1f0      	bne.n	d8552 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8570:	4620      	mov	r0, r4
    }
    return n;
}
   d8572:	b00d      	add	sp, #52	; 0x34
   d8574:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8578 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d8578:	b510      	push	{r4, lr}
   d857a:	4b05      	ldr	r3, [pc, #20]	; (d8590 <_ZN9IPAddressC1Ev+0x18>)
   d857c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d857e:	2211      	movs	r2, #17
   d8580:	f840 3b04 	str.w	r3, [r0], #4
   d8584:	2100      	movs	r1, #0
   d8586:	f002 f884 	bl	da692 <memset>
{
    clear();
}
   d858a:	4620      	mov	r0, r4
   d858c:	bd10      	pop	{r4, pc}
   d858e:	bf00      	nop
   d8590:	000dbce8 	.word	0x000dbce8

000d8594 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8594:	4603      	mov	r3, r0
   d8596:	4a07      	ldr	r2, [pc, #28]	; (d85b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8598:	b510      	push	{r4, lr}
   d859a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d859e:	f101 0210 	add.w	r2, r1, #16
   d85a2:	f851 4b04 	ldr.w	r4, [r1], #4
   d85a6:	f843 4b04 	str.w	r4, [r3], #4
   d85aa:	4291      	cmp	r1, r2
   d85ac:	d1f9      	bne.n	d85a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d85ae:	780a      	ldrb	r2, [r1, #0]
   d85b0:	701a      	strb	r2, [r3, #0]
}
   d85b2:	bd10      	pop	{r4, pc}
   d85b4:	000dbce8 	.word	0x000dbce8

000d85b8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d85b8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d85ba:	2b04      	cmp	r3, #4
   d85bc:	d101      	bne.n	d85c2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d85be:	6840      	ldr	r0, [r0, #4]
   d85c0:	e008      	b.n	d85d4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d85c2:	2b06      	cmp	r3, #6
   d85c4:	d10a      	bne.n	d85dc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d85c6:	6843      	ldr	r3, [r0, #4]
   d85c8:	b153      	cbz	r3, d85e0 <_ZNK9IPAddresscvbEv+0x28>
   d85ca:	6883      	ldr	r3, [r0, #8]
   d85cc:	b143      	cbz	r3, d85e0 <_ZNK9IPAddresscvbEv+0x28>
   d85ce:	68c3      	ldr	r3, [r0, #12]
   d85d0:	b133      	cbz	r3, d85e0 <_ZNK9IPAddresscvbEv+0x28>
   d85d2:	6900      	ldr	r0, [r0, #16]
   d85d4:	3000      	adds	r0, #0
   d85d6:	bf18      	it	ne
   d85d8:	2001      	movne	r0, #1
   d85da:	4770      	bx	lr
   d85dc:	2000      	movs	r0, #0
   d85de:	4770      	bx	lr
   d85e0:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d85e2:	4770      	bx	lr

000d85e4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d85e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d85e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d85ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d85ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d85f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d85f6:	2304      	movs	r3, #4
   d85f8:	6041      	str	r1, [r0, #4]
   d85fa:	7503      	strb	r3, [r0, #20]
   d85fc:	bd10      	pop	{r4, pc}
	...

000d8600 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d8600:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8602:	4d04      	ldr	r5, [pc, #16]	; (d8614 <_ZN9IPAddressC1Ehhhh+0x14>)
   d8604:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d8606:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d860a:	9500      	str	r5, [sp, #0]
   d860c:	f7ff ffea 	bl	d85e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8610:	b003      	add	sp, #12
   d8612:	bd30      	pop	{r4, r5, pc}
   d8614:	000dbce8 	.word	0x000dbce8

000d8618 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d8618:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d861a:	780d      	ldrb	r5, [r1, #0]
   d861c:	788b      	ldrb	r3, [r1, #2]
   d861e:	784a      	ldrb	r2, [r1, #1]
   d8620:	78c9      	ldrb	r1, [r1, #3]
   d8622:	9100      	str	r1, [sp, #0]
   d8624:	4629      	mov	r1, r5
   d8626:	f7ff ffdd 	bl	d85e4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d862a:	b003      	add	sp, #12
   d862c:	bd30      	pop	{r4, r5, pc}
	...

000d8630 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8630:	4b01      	ldr	r3, [pc, #4]	; (d8638 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8632:	4a02      	ldr	r2, [pc, #8]	; (d863c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8634:	601a      	str	r2, [r3, #0]
   d8636:	4770      	bx	lr
   d8638:	2003e37c 	.word	0x2003e37c
   d863c:	000dbda4 	.word	0x000dbda4

000d8640 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8640:	2200      	movs	r2, #0
   d8642:	4611      	mov	r1, r2
   d8644:	6840      	ldr	r0, [r0, #4]
   d8646:	f7ff bb8f 	b.w	d7d68 <network_listening>

000d864a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d864a:	2200      	movs	r2, #0
   d864c:	4611      	mov	r1, r2
   d864e:	6840      	ldr	r0, [r0, #4]
   d8650:	f7ff bb9a 	b.w	d7d88 <network_get_listen_timeout>

000d8654 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8654:	2200      	movs	r2, #0
   d8656:	6840      	ldr	r0, [r0, #4]
   d8658:	f7ff bb8e 	b.w	d7d78 <network_set_listen_timeout>

000d865c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d865c:	2200      	movs	r2, #0
   d865e:	f081 0101 	eor.w	r1, r1, #1
   d8662:	6840      	ldr	r0, [r0, #4]
   d8664:	f7ff bb78 	b.w	d7d58 <network_listen>

000d8668 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d8668:	2300      	movs	r3, #0
   d866a:	461a      	mov	r2, r3
   d866c:	4619      	mov	r1, r3
   d866e:	6840      	ldr	r0, [r0, #4]
   d8670:	f7ff bb6a 	b.w	d7d48 <network_off>

000d8674 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8674:	2300      	movs	r3, #0
   d8676:	461a      	mov	r2, r3
   d8678:	4619      	mov	r1, r3
   d867a:	6840      	ldr	r0, [r0, #4]
   d867c:	f7ff bb5c 	b.w	d7d38 <network_on>

000d8680 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8680:	2200      	movs	r2, #0
   d8682:	4611      	mov	r1, r2
   d8684:	6840      	ldr	r0, [r0, #4]
   d8686:	f7ff bb4f 	b.w	d7d28 <network_ready>

000d868a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d868a:	2200      	movs	r2, #0
   d868c:	4611      	mov	r1, r2
   d868e:	6840      	ldr	r0, [r0, #4]
   d8690:	f7ff bb3a 	b.w	d7d08 <network_connecting>

000d8694 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8694:	2200      	movs	r2, #0
   d8696:	2102      	movs	r1, #2
   d8698:	6840      	ldr	r0, [r0, #4]
   d869a:	f7ff bb3d 	b.w	d7d18 <network_disconnect>

000d869e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d869e:	2300      	movs	r3, #0
   d86a0:	461a      	mov	r2, r3
   d86a2:	6840      	ldr	r0, [r0, #4]
   d86a4:	f7ff bb28 	b.w	d7cf8 <network_connect>

000d86a8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d86a8:	b110      	cbz	r0, d86b0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d86aa:	6803      	ldr	r3, [r0, #0]
   d86ac:	685b      	ldr	r3, [r3, #4]
   d86ae:	4718      	bx	r3
   d86b0:	4770      	bx	lr
	...

000d86b4 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d86b4:	b538      	push	{r3, r4, r5, lr}
   d86b6:	4b0c      	ldr	r3, [pc, #48]	; (d86e8 <_ZN5spark9MeshClassD1Ev+0x34>)
   d86b8:	6003      	str	r3, [r0, #0]
   d86ba:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d86bc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d86c0:	b108      	cbz	r0, d86c6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d86c2:	f7fb fcec 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d86c6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d86ca:	b135      	cbz	r5, d86da <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d86cc:	4628      	mov	r0, r5
   d86ce:	f7fb fd80 	bl	d41d2 <_ZN6ThreadD1Ev>
   d86d2:	2104      	movs	r1, #4
   d86d4:	4628      	mov	r0, r5
   d86d6:	f001 f944 	bl	d9962 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d86da:	68a0      	ldr	r0, [r4, #8]
   d86dc:	b108      	cbz	r0, d86e2 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d86de:	f7ff ffe3 	bl	d86a8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d86e2:	4620      	mov	r0, r4
   d86e4:	bd38      	pop	{r3, r4, r5, pc}
   d86e6:	bf00      	nop
   d86e8:	000dbdd8 	.word	0x000dbdd8

000d86ec <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d86ec:	b538      	push	{r3, r4, r5, lr}
   d86ee:	4c0d      	ldr	r4, [pc, #52]	; (d8724 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d86f0:	4b0d      	ldr	r3, [pc, #52]	; (d8728 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d86f2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d86f4:	2500      	movs	r5, #0
   d86f6:	2302      	movs	r3, #2
   d86f8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d86fc:	6063      	str	r3, [r4, #4]
   d86fe:	60a5      	str	r5, [r4, #8]
   d8700:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8704:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8708:	f7ff f89a 	bl	d7840 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d870c:	4b07      	ldr	r3, [pc, #28]	; (d872c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d870e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d8712:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8714:	4620      	mov	r0, r4
   d8716:	4a06      	ldr	r2, [pc, #24]	; (d8730 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d8718:	4906      	ldr	r1, [pc, #24]	; (d8734 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d871a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d871e:	f001 b91b 	b.w	d9958 <__aeabi_atexit>
   d8722:	bf00      	nop
   d8724:	2003e380 	.word	0x2003e380
   d8728:	000dbe0c 	.word	0x000dbe0c
   d872c:	000dbdd8 	.word	0x000dbdd8
   d8730:	2003dc3c 	.word	0x2003dc3c
   d8734:	000d86b5 	.word	0x000d86b5

000d8738 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8738:	2300      	movs	r3, #0
   d873a:	461a      	mov	r2, r3
   d873c:	6840      	ldr	r0, [r0, #4]
   d873e:	f7ff badb 	b.w	d7cf8 <network_connect>

000d8742 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8742:	2200      	movs	r2, #0
   d8744:	2102      	movs	r1, #2
   d8746:	6840      	ldr	r0, [r0, #4]
   d8748:	f7ff bae6 	b.w	d7d18 <network_disconnect>

000d874c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d874c:	2200      	movs	r2, #0
   d874e:	4611      	mov	r1, r2
   d8750:	6840      	ldr	r0, [r0, #4]
   d8752:	f7ff bad9 	b.w	d7d08 <network_connecting>

000d8756 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8756:	2200      	movs	r2, #0
   d8758:	4611      	mov	r1, r2
   d875a:	6840      	ldr	r0, [r0, #4]
   d875c:	f7ff bae4 	b.w	d7d28 <network_ready>

000d8760 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8760:	2300      	movs	r3, #0
   d8762:	461a      	mov	r2, r3
   d8764:	4619      	mov	r1, r3
   d8766:	6840      	ldr	r0, [r0, #4]
   d8768:	f7ff bae6 	b.w	d7d38 <network_on>

000d876c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d876c:	2300      	movs	r3, #0
   d876e:	461a      	mov	r2, r3
   d8770:	4619      	mov	r1, r3
   d8772:	6840      	ldr	r0, [r0, #4]
   d8774:	f7ff bae8 	b.w	d7d48 <network_off>

000d8778 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8778:	2200      	movs	r2, #0
   d877a:	f081 0101 	eor.w	r1, r1, #1
   d877e:	6840      	ldr	r0, [r0, #4]
   d8780:	f7ff baea 	b.w	d7d58 <network_listen>

000d8784 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8784:	2200      	movs	r2, #0
   d8786:	6840      	ldr	r0, [r0, #4]
   d8788:	f7ff baf6 	b.w	d7d78 <network_set_listen_timeout>

000d878c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d878c:	2200      	movs	r2, #0
   d878e:	4611      	mov	r1, r2
   d8790:	6840      	ldr	r0, [r0, #4]
   d8792:	f7ff baf9 	b.w	d7d88 <network_get_listen_timeout>

000d8796 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8796:	2200      	movs	r2, #0
   d8798:	4611      	mov	r1, r2
   d879a:	6840      	ldr	r0, [r0, #4]
   d879c:	f7ff bae4 	b.w	d7d68 <network_listening>

000d87a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d87a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d87a4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d87a6:	b095      	sub	sp, #84	; 0x54
   d87a8:	4616      	mov	r6, r2
   d87aa:	460d      	mov	r5, r1
   d87ac:	4607      	mov	r7, r0
    IPAddress addr;
   d87ae:	f7ff fee3 	bl	d8578 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d87b2:	4621      	mov	r1, r4
   d87b4:	2220      	movs	r2, #32
   d87b6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d87b8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d87ba:	f001 ff6a 	bl	da692 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d87be:	2340      	movs	r3, #64	; 0x40
   d87c0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d87c2:	4621      	mov	r1, r4
   d87c4:	466b      	mov	r3, sp
   d87c6:	aa0c      	add	r2, sp, #48	; 0x30
   d87c8:	4630      	mov	r0, r6
   d87ca:	f7ff f941 	bl	d7a50 <netdb_getaddrinfo>
    if (!r) {
   d87ce:	4604      	mov	r4, r0
   d87d0:	2800      	cmp	r0, #0
   d87d2:	d144      	bne.n	d885e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d87d4:	4602      	mov	r2, r0
   d87d6:	2101      	movs	r1, #1
   d87d8:	6868      	ldr	r0, [r5, #4]
   d87da:	f7ff faa5 	bl	d7d28 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d87de:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d87e0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d87e2:	4622      	mov	r2, r4
   d87e4:	6868      	ldr	r0, [r5, #4]
   d87e6:	f7ff fa9f 	bl	d7d28 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d87ea:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d87ec:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d87ee:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d87f0:	2e00      	cmp	r6, #0
   d87f2:	d034      	beq.n	d885e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d87f4:	2900      	cmp	r1, #0
   d87f6:	d132      	bne.n	d885e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d87f8:	6873      	ldr	r3, [r6, #4]
   d87fa:	2b02      	cmp	r3, #2
   d87fc:	d002      	beq.n	d8804 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d87fe:	2b0a      	cmp	r3, #10
   d8800:	d009      	beq.n	d8816 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8802:	e02a      	b.n	d885a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8804:	f1b8 0f00 	cmp.w	r8, #0
   d8808:	d027      	beq.n	d885a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d880a:	6971      	ldr	r1, [r6, #20]
   d880c:	4638      	mov	r0, r7
   d880e:	3104      	adds	r1, #4
   d8810:	f7ff ff02 	bl	d8618 <_ZN9IPAddressaSEPKh>
   d8814:	e020      	b.n	d8858 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8816:	f1b9 0f00 	cmp.w	r9, #0
   d881a:	d01e      	beq.n	d885a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d881c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d881e:	2211      	movs	r2, #17
   d8820:	a801      	add	r0, sp, #4
   d8822:	f001 ff36 	bl	da692 <memset>
                    a.v = 6;
   d8826:	2306      	movs	r3, #6
   d8828:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d882c:	ad01      	add	r5, sp, #4
   d882e:	f104 0308 	add.w	r3, r4, #8
   d8832:	3418      	adds	r4, #24
   d8834:	6818      	ldr	r0, [r3, #0]
   d8836:	6859      	ldr	r1, [r3, #4]
   d8838:	462a      	mov	r2, r5
   d883a:	c203      	stmia	r2!, {r0, r1}
   d883c:	3308      	adds	r3, #8
   d883e:	42a3      	cmp	r3, r4
   d8840:	4615      	mov	r5, r2
   d8842:	d1f7      	bne.n	d8834 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8844:	a901      	add	r1, sp, #4
   d8846:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8848:	ad07      	add	r5, sp, #28
   d884a:	f7ff fea3 	bl	d8594 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d884e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8850:	1d3c      	adds	r4, r7, #4
   d8852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8854:	682b      	ldr	r3, [r5, #0]
   d8856:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8858:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d885a:	69f6      	ldr	r6, [r6, #28]
   d885c:	e7c8      	b.n	d87f0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d885e:	9800      	ldr	r0, [sp, #0]
   d8860:	f7ff f8ee 	bl	d7a40 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8864:	4638      	mov	r0, r7
   d8866:	b015      	add	sp, #84	; 0x54
   d8868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d886c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d886c:	4b02      	ldr	r3, [pc, #8]	; (d8878 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d886e:	4a03      	ldr	r2, [pc, #12]	; (d887c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8870:	601a      	str	r2, [r3, #0]
   d8872:	2200      	movs	r2, #0
   d8874:	605a      	str	r2, [r3, #4]
   d8876:	4770      	bx	lr
   d8878:	2003e550 	.word	0x2003e550
   d887c:	000dbe0c 	.word	0x000dbe0c

000d8880 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8882:	4606      	mov	r6, r0
   d8884:	460d      	mov	r5, r1
   d8886:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d8888:	2400      	movs	r4, #0
  while (size--) {
   d888a:	42bd      	cmp	r5, r7
   d888c:	d00c      	beq.n	d88a8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d888e:	6833      	ldr	r3, [r6, #0]
   d8890:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8894:	689b      	ldr	r3, [r3, #8]
   d8896:	4630      	mov	r0, r6
   d8898:	4798      	blx	r3
     if (chunk>=0)
   d889a:	2800      	cmp	r0, #0
   d889c:	db01      	blt.n	d88a2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d889e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d88a0:	e7f3      	b.n	d888a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d88a2:	2c00      	cmp	r4, #0
   d88a4:	bf08      	it	eq
   d88a6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d88a8:	4620      	mov	r0, r4
   d88aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d88ac <_ZN5Print5printEPKc>:
   d88ac:	b508      	push	{r3, lr}
   d88ae:	f7fe fb37 	bl	d6f20 <_ZN5Print5writeEPKc>
   d88b2:	bd08      	pop	{r3, pc}

000d88b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d88b4:	6803      	ldr	r3, [r0, #0]
   d88b6:	689b      	ldr	r3, [r3, #8]
   d88b8:	4718      	bx	r3

000d88ba <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d88ba:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d88bc:	f7fe fb30 	bl	d6f20 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d88c0:	bd08      	pop	{r3, pc}

000d88c2 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d88c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d88c4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d88c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d88c8:	f7ff fff4 	bl	d88b4 <_ZN5Print5printEc>
  n += print('\n');
   d88cc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d88ce:	4604      	mov	r4, r0
  n += print('\n');
   d88d0:	4628      	mov	r0, r5
   d88d2:	f7ff ffef 	bl	d88b4 <_ZN5Print5printEc>
  return n;
}
   d88d6:	4420      	add	r0, r4
   d88d8:	bd38      	pop	{r3, r4, r5, pc}

000d88da <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d88da:	b538      	push	{r3, r4, r5, lr}
   d88dc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d88de:	f7fe fb1f 	bl	d6f20 <_ZN5Print5writeEPKc>
   d88e2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d88e4:	4628      	mov	r0, r5
   d88e6:	f7ff ffec 	bl	d88c2 <_ZN5Print7printlnEv>
  return n;
}
   d88ea:	4420      	add	r0, r4
   d88ec:	bd38      	pop	{r3, r4, r5, pc}

000d88ee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d88ee:	b530      	push	{r4, r5, lr}
   d88f0:	b08b      	sub	sp, #44	; 0x2c
   d88f2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d88f4:	2100      	movs	r1, #0
   d88f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d88fa:	2a01      	cmp	r2, #1
   d88fc:	bf98      	it	ls
   d88fe:	220a      	movls	r2, #10
   d8900:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d8904:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d8908:	fb05 3312 	mls	r3, r5, r2, r3
   d890c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d8910:	2b09      	cmp	r3, #9
   d8912:	bf94      	ite	ls
   d8914:	3330      	addls	r3, #48	; 0x30
   d8916:	3337      	addhi	r3, #55	; 0x37
   d8918:	b2db      	uxtb	r3, r3
   d891a:	4621      	mov	r1, r4
   d891c:	f804 3901 	strb.w	r3, [r4], #-1
   d8920:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d8922:	2d00      	cmp	r5, #0
   d8924:	d1ee      	bne.n	d8904 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d8926:	f7fe fafb 	bl	d6f20 <_ZN5Print5writeEPKc>
}
   d892a:	b00b      	add	sp, #44	; 0x2c
   d892c:	bd30      	pop	{r4, r5, pc}

000d892e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d892e:	b410      	push	{r4}
  if (base == 0) return write(n);
   d8930:	b92a      	cbnz	r2, d893e <_ZN5Print5printEmi+0x10>
   d8932:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d8934:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d8938:	689b      	ldr	r3, [r3, #8]
   d893a:	b2c9      	uxtb	r1, r1
   d893c:	4718      	bx	r3
  else return printNumber(n, base);
   d893e:	b2d2      	uxtb	r2, r2
}
   d8940:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d8944:	f7ff bfd3 	b.w	d88ee <_ZN5Print11printNumberEmh>

000d8948 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d8948:	f7ff bff1 	b.w	d892e <_ZN5Print5printEmi>

000d894c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d894c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8950:	4607      	mov	r7, r0
   d8952:	460e      	mov	r6, r1
  if (base == 0) {
   d8954:	4615      	mov	r5, r2
   d8956:	b92a      	cbnz	r2, d8964 <_ZN5Print5printEli+0x18>
    return write(n);
   d8958:	6803      	ldr	r3, [r0, #0]
   d895a:	b2c9      	uxtb	r1, r1
   d895c:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d895e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d8962:	4718      	bx	r3
  } else if (base == 10) {
   d8964:	2a0a      	cmp	r2, #10
   d8966:	d102      	bne.n	d896e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d8968:	2900      	cmp	r1, #0
   d896a:	da01      	bge.n	d8970 <_ZN5Print5printEli+0x24>
   d896c:	e004      	b.n	d8978 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d896e:	b2d2      	uxtb	r2, r2
  }
}
   d8970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d8974:	f7ff bfbb 	b.w	d88ee <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d8978:	212d      	movs	r1, #45	; 0x2d
   d897a:	f7ff ff9b 	bl	d88b4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d897e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d8980:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d8982:	4271      	negs	r1, r6
   d8984:	4638      	mov	r0, r7
   d8986:	f7ff ffb2 	bl	d88ee <_ZN5Print11printNumberEmh>
   d898a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d898c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8990 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d8990:	f7ff bfdc 	b.w	d894c <_ZN5Print5printEli>

000d8994 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d8994:	b538      	push	{r3, r4, r5, lr}
   d8996:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d8998:	f7ff ffd8 	bl	d894c <_ZN5Print5printEli>
   d899c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d899e:	4628      	mov	r0, r5
   d89a0:	f7ff ff8f 	bl	d88c2 <_ZN5Print7printlnEv>
  return n;
}
   d89a4:	4420      	add	r0, r4
   d89a6:	bd38      	pop	{r3, r4, r5, pc}

000d89a8 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d89a8:	b40c      	push	{r2, r3}
   d89aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d89ae:	b087      	sub	sp, #28
   d89b0:	af00      	add	r7, sp, #0
   d89b2:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d89b6:	4605      	mov	r5, r0
   d89b8:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d89bc:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d89be:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d89c0:	4623      	mov	r3, r4
   d89c2:	464a      	mov	r2, r9
   d89c4:	2114      	movs	r1, #20
   d89c6:	1d38      	adds	r0, r7, #4
   d89c8:	f7ff fa1e 	bl	d7e08 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d89cc:	2813      	cmp	r0, #19
   d89ce:	d805      	bhi.n	d89dc <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d89d0:	1d39      	adds	r1, r7, #4
   d89d2:	4628      	mov	r0, r5
   d89d4:	f7fe faa4 	bl	d6f20 <_ZN5Print5writeEPKc>
   d89d8:	4604      	mov	r4, r0
   d89da:	e013      	b.n	d8a04 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d89dc:	f100 0308 	add.w	r3, r0, #8
   d89e0:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d89e4:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d89e6:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d89ea:	1c41      	adds	r1, r0, #1
   d89ec:	4623      	mov	r3, r4
   d89ee:	464a      	mov	r2, r9
   d89f0:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d89f2:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d89f4:	f7ff fa08 	bl	d7e08 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d89f8:	4669      	mov	r1, sp
   d89fa:	4628      	mov	r0, r5
   d89fc:	f7fe fa90 	bl	d6f20 <_ZN5Print5writeEPKc>
   d8a00:	4604      	mov	r4, r0
   d8a02:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8a04:	b11e      	cbz	r6, d8a0e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d8a06:	4628      	mov	r0, r5
   d8a08:	f7ff ff5b 	bl	d88c2 <_ZN5Print7printlnEv>
   d8a0c:	4404      	add	r4, r0
    return n;
}
   d8a0e:	4620      	mov	r0, r4
   d8a10:	371c      	adds	r7, #28
   d8a12:	46bd      	mov	sp, r7
   d8a14:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8a18:	b002      	add	sp, #8
   d8a1a:	4770      	bx	lr

000d8a1c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8a1c:	b510      	push	{r4, lr}
   d8a1e:	4604      	mov	r4, r0
   d8a20:	f7fb fbbb 	bl	d419a <_ZNSt14_Function_baseD1Ev>
   d8a24:	4620      	mov	r0, r4
   d8a26:	bd10      	pop	{r4, pc}

000d8a28 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8a28:	4803      	ldr	r0, [pc, #12]	; (d8a38 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8a2a:	4a04      	ldr	r2, [pc, #16]	; (d8a3c <_GLOBAL__sub_I_RGB+0x14>)
   d8a2c:	4904      	ldr	r1, [pc, #16]	; (d8a40 <_GLOBAL__sub_I_RGB+0x18>)
   d8a2e:	2300      	movs	r3, #0
   d8a30:	6083      	str	r3, [r0, #8]
   d8a32:	f000 bf91 	b.w	d9958 <__aeabi_atexit>
   d8a36:	bf00      	nop
   d8a38:	2003e558 	.word	0x2003e558
   d8a3c:	2003dc3c 	.word	0x2003dc3c
   d8a40:	000d8a1d 	.word	0x000d8a1d

000d8a44 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d8a44:	4770      	bx	lr

000d8a46 <_ZN8SPIClassD0Ev>:
   d8a46:	b510      	push	{r4, lr}
   d8a48:	2110      	movs	r1, #16
   d8a4a:	4604      	mov	r4, r0
   d8a4c:	f000 ff89 	bl	d9962 <_ZdlPvj>
   d8a50:	4620      	mov	r0, r4
   d8a52:	bd10      	pop	{r4, pc}

000d8a54 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d8a54:	b570      	push	{r4, r5, r6, lr}
   d8a56:	4b08      	ldr	r3, [pc, #32]	; (d8a78 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d8a58:	6003      	str	r3, [r0, #0]
   d8a5a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d8a5c:	2500      	movs	r5, #0
   d8a5e:	460e      	mov	r6, r1
   d8a60:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d8a64:	f7fe fee4 	bl	d7830 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d8a68:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d8a6a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d8a6c:	f7ff f830 	bl	d7ad0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d8a70:	60a5      	str	r5, [r4, #8]
}
   d8a72:	4620      	mov	r0, r4
   d8a74:	bd70      	pop	{r4, r5, r6, pc}
   d8a76:	bf00      	nop
   d8a78:	000dbe40 	.word	0x000dbe40

000d8a7c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d8a7c:	7900      	ldrb	r0, [r0, #4]
   d8a7e:	f7ff b82f 	b.w	d7ae0 <HAL_SPI_Is_Enabled>

000d8a82 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d8a82:	b510      	push	{r4, lr}
   d8a84:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d8a86:	f7fe ff03 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d8a8a:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d8a8c:	6823      	ldr	r3, [r4, #0]
   d8a8e:	4620      	mov	r0, r4
   d8a90:	695b      	ldr	r3, [r3, #20]
   d8a92:	4798      	blx	r3
    if (c >= 0) return c;
   d8a94:	2800      	cmp	r0, #0
   d8a96:	da08      	bge.n	d8aaa <_ZN6Stream9timedReadEv+0x28>
   d8a98:	f7fe fefa 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d8a9c:	68e3      	ldr	r3, [r4, #12]
   d8a9e:	1ac0      	subs	r0, r0, r3
   d8aa0:	68a3      	ldr	r3, [r4, #8]
   d8aa2:	4298      	cmp	r0, r3
   d8aa4:	d3f2      	bcc.n	d8a8c <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d8aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d8aaa:	bd10      	pop	{r4, pc}

000d8aac <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d8aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8ab0:	4680      	mov	r8, r0
   d8ab2:	460d      	mov	r5, r1
   d8ab4:	188f      	adds	r7, r1, r2
   d8ab6:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   d8ab8:	42bc      	cmp	r4, r7
   d8aba:	eba4 0605 	sub.w	r6, r4, r5
   d8abe:	d007      	beq.n	d8ad0 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   d8ac0:	4640      	mov	r0, r8
   d8ac2:	f7ff ffde 	bl	d8a82 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d8ac6:	2800      	cmp	r0, #0
   d8ac8:	db02      	blt.n	d8ad0 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   d8aca:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   d8ace:	e7f3      	b.n	d8ab8 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   d8ad0:	4630      	mov	r0, r6
   d8ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8ad6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d8ad6:	b510      	push	{r4, lr}
   d8ad8:	4604      	mov	r4, r0
{
	free(buffer);
   d8ada:	6800      	ldr	r0, [r0, #0]
   d8adc:	f7ff f964 	bl	d7da8 <free>
}
   d8ae0:	4620      	mov	r0, r4
   d8ae2:	bd10      	pop	{r4, pc}

000d8ae4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d8ae4:	b510      	push	{r4, lr}
   d8ae6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d8ae8:	6800      	ldr	r0, [r0, #0]
   d8aea:	b108      	cbz	r0, d8af0 <_ZN6String10invalidateEv+0xc>
   d8aec:	f7ff f95c 	bl	d7da8 <free>
	buffer = NULL;
   d8af0:	2300      	movs	r3, #0
   d8af2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d8af4:	60a3      	str	r3, [r4, #8]
   d8af6:	6063      	str	r3, [r4, #4]
   d8af8:	bd10      	pop	{r4, pc}

000d8afa <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8afa:	b538      	push	{r3, r4, r5, lr}
   d8afc:	4604      	mov	r4, r0
   d8afe:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8b00:	6800      	ldr	r0, [r0, #0]
   d8b02:	3101      	adds	r1, #1
   d8b04:	f7ff f958 	bl	d7db8 <realloc>
	if (newbuffer) {
   d8b08:	b110      	cbz	r0, d8b10 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d8b0a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d8b0e:	2001      	movs	r0, #1
	}
	return 0;
}
   d8b10:	bd38      	pop	{r3, r4, r5, pc}

000d8b12 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8b12:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8b14:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d8b16:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8b18:	b113      	cbz	r3, d8b20 <_ZN6String7reserveEj+0xe>
   d8b1a:	6843      	ldr	r3, [r0, #4]
   d8b1c:	428b      	cmp	r3, r1
   d8b1e:	d207      	bcs.n	d8b30 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d8b20:	4620      	mov	r0, r4
   d8b22:	f7ff ffea 	bl	d8afa <_ZN6String12changeBufferEj>
   d8b26:	b120      	cbz	r0, d8b32 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d8b28:	68a3      	ldr	r3, [r4, #8]
   d8b2a:	b90b      	cbnz	r3, d8b30 <_ZN6String7reserveEj+0x1e>
   d8b2c:	6822      	ldr	r2, [r4, #0]
   d8b2e:	7013      	strb	r3, [r2, #0]
   d8b30:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d8b32:	bd10      	pop	{r4, pc}

000d8b34 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8b34:	b570      	push	{r4, r5, r6, lr}
   d8b36:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d8b38:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8b3a:	4604      	mov	r4, r0
   d8b3c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d8b3e:	f7ff ffe8 	bl	d8b12 <_ZN6String7reserveEj>
   d8b42:	b918      	cbnz	r0, d8b4c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d8b44:	4620      	mov	r0, r4
   d8b46:	f7ff ffcd 	bl	d8ae4 <_ZN6String10invalidateEv>
		return *this;
   d8b4a:	e009      	b.n	d8b60 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d8b4c:	462a      	mov	r2, r5
   d8b4e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d8b50:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d8b52:	6820      	ldr	r0, [r4, #0]
   d8b54:	f001 fd92 	bl	da67c <memcpy>
	buffer[len] = 0;
   d8b58:	6822      	ldr	r2, [r4, #0]
   d8b5a:	68a3      	ldr	r3, [r4, #8]
   d8b5c:	2100      	movs	r1, #0
   d8b5e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d8b60:	4620      	mov	r0, r4
   d8b62:	bd70      	pop	{r4, r5, r6, pc}

000d8b64 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8b64:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8b66:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d8b68:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8b6a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8b6c:	6043      	str	r3, [r0, #4]
	len = 0;
   d8b6e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8b70:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d8b72:	460d      	mov	r5, r1
   d8b74:	b139      	cbz	r1, d8b86 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d8b76:	4608      	mov	r0, r1
   d8b78:	f001 fde9 	bl	da74e <strlen>
   d8b7c:	4629      	mov	r1, r5
   d8b7e:	4602      	mov	r2, r0
   d8b80:	4620      	mov	r0, r4
   d8b82:	f7ff ffd7 	bl	d8b34 <_ZN6String4copyEPKcj>
}
   d8b86:	4620      	mov	r0, r4
   d8b88:	bd38      	pop	{r3, r4, r5, pc}

000d8b8a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8b8a:	b538      	push	{r3, r4, r5, lr}
   d8b8c:	4605      	mov	r5, r0
	if (buffer) {
   d8b8e:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8b90:	460c      	mov	r4, r1
	if (buffer) {
   d8b92:	b160      	cbz	r0, d8bae <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d8b94:	686a      	ldr	r2, [r5, #4]
   d8b96:	688b      	ldr	r3, [r1, #8]
   d8b98:	429a      	cmp	r2, r3
   d8b9a:	d306      	bcc.n	d8baa <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d8b9c:	6809      	ldr	r1, [r1, #0]
   d8b9e:	f001 fdb3 	bl	da708 <strcpy>
			len = rhs.len;
   d8ba2:	68a3      	ldr	r3, [r4, #8]
   d8ba4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d8ba6:	2300      	movs	r3, #0
   d8ba8:	e00a      	b.n	d8bc0 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d8baa:	f7ff f8fd 	bl	d7da8 <free>
		}
	}
	buffer = rhs.buffer;
   d8bae:	6823      	ldr	r3, [r4, #0]
   d8bb0:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d8bb2:	6863      	ldr	r3, [r4, #4]
   d8bb4:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8bb6:	68a3      	ldr	r3, [r4, #8]
   d8bb8:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d8bba:	2300      	movs	r3, #0
   d8bbc:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d8bbe:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d8bc0:	60a3      	str	r3, [r4, #8]
   d8bc2:	bd38      	pop	{r3, r4, r5, pc}

000d8bc4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d8bc4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d8bc6:	b510      	push	{r4, lr}
   d8bc8:	460b      	mov	r3, r1
   d8bca:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8bcc:	d007      	beq.n	d8bde <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8bce:	6809      	ldr	r1, [r1, #0]
   d8bd0:	b119      	cbz	r1, d8bda <_ZN6StringaSERKS_+0x16>
   d8bd2:	689a      	ldr	r2, [r3, #8]
   d8bd4:	f7ff ffae 	bl	d8b34 <_ZN6String4copyEPKcj>
   d8bd8:	e001      	b.n	d8bde <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d8bda:	f7ff ff83 	bl	d8ae4 <_ZN6String10invalidateEv>

	return *this;
}
   d8bde:	4620      	mov	r0, r4
   d8be0:	bd10      	pop	{r4, pc}

000d8be2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8be2:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8be4:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d8be6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d8be8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d8bea:	6043      	str	r3, [r0, #4]
	len = 0;
   d8bec:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8bee:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d8bf0:	f7ff ffe8 	bl	d8bc4 <_ZN6StringaSERKS_>
}
   d8bf4:	4620      	mov	r0, r4
   d8bf6:	bd10      	pop	{r4, pc}

000d8bf8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d8bf8:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d8bfa:	b510      	push	{r4, lr}
   d8bfc:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d8bfe:	d001      	beq.n	d8c04 <_ZN6StringaSEOS_+0xc>
   d8c00:	f7ff ffc3 	bl	d8b8a <_ZN6String4moveERS_>
	return *this;
}
   d8c04:	4620      	mov	r0, r4
   d8c06:	bd10      	pop	{r4, pc}

000d8c08 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8c08:	b538      	push	{r3, r4, r5, lr}
   d8c0a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d8c0c:	460c      	mov	r4, r1
   d8c0e:	b141      	cbz	r1, d8c22 <_ZN6StringaSEPKc+0x1a>
   d8c10:	4608      	mov	r0, r1
   d8c12:	f001 fd9c 	bl	da74e <strlen>
   d8c16:	4621      	mov	r1, r4
   d8c18:	4602      	mov	r2, r0
   d8c1a:	4628      	mov	r0, r5
   d8c1c:	f7ff ff8a 	bl	d8b34 <_ZN6String4copyEPKcj>
   d8c20:	e001      	b.n	d8c26 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d8c22:	f7ff ff5f 	bl	d8ae4 <_ZN6String10invalidateEv>

	return *this;
}
   d8c26:	4628      	mov	r0, r5
   d8c28:	bd38      	pop	{r3, r4, r5, pc}

000d8c2a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d8c2a:	b570      	push	{r4, r5, r6, lr}
   d8c2c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d8c2e:	460e      	mov	r6, r1
   d8c30:	b909      	cbnz	r1, d8c36 <_ZN6String6concatEPKcj+0xc>
   d8c32:	2000      	movs	r0, #0
   d8c34:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d8c36:	b16a      	cbz	r2, d8c54 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d8c38:	6883      	ldr	r3, [r0, #8]
   d8c3a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d8c3c:	4629      	mov	r1, r5
   d8c3e:	f7ff ff68 	bl	d8b12 <_ZN6String7reserveEj>
   d8c42:	2800      	cmp	r0, #0
   d8c44:	d0f5      	beq.n	d8c32 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d8c46:	6820      	ldr	r0, [r4, #0]
   d8c48:	68a3      	ldr	r3, [r4, #8]
   d8c4a:	4631      	mov	r1, r6
   d8c4c:	4418      	add	r0, r3
   d8c4e:	f001 fd5b 	bl	da708 <strcpy>
	len = newlen;
   d8c52:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d8c54:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d8c56:	bd70      	pop	{r4, r5, r6, pc}

000d8c58 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d8c58:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d8c5a:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d8c5c:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d8c60:	2201      	movs	r2, #1
   d8c62:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d8c64:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d8c68:	f7ff ffdf 	bl	d8c2a <_ZN6String6concatEPKcj>
}
   d8c6c:	b003      	add	sp, #12
   d8c6e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c72 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d8c72:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d8c74:	688a      	ldr	r2, [r1, #8]
   d8c76:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d8c78:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d8c7a:	f7ff ffd6 	bl	d8c2a <_ZN6String6concatEPKcj>
   d8c7e:	b910      	cbnz	r0, d8c86 <_ZplRK15StringSumHelperRK6String+0x14>
   d8c80:	4620      	mov	r0, r4
   d8c82:	f7ff ff2f 	bl	d8ae4 <_ZN6String10invalidateEv>
	return a;
}
   d8c86:	4620      	mov	r0, r4
   d8c88:	bd10      	pop	{r4, pc}

000d8c8a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d8c8a:	b538      	push	{r3, r4, r5, lr}
   d8c8c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8c8e:	460d      	mov	r5, r1
   d8c90:	b141      	cbz	r1, d8ca4 <_ZplRK15StringSumHelperPKc+0x1a>
   d8c92:	4608      	mov	r0, r1
   d8c94:	f001 fd5b 	bl	da74e <strlen>
   d8c98:	4629      	mov	r1, r5
   d8c9a:	4602      	mov	r2, r0
   d8c9c:	4620      	mov	r0, r4
   d8c9e:	f7ff ffc4 	bl	d8c2a <_ZN6String6concatEPKcj>
   d8ca2:	b910      	cbnz	r0, d8caa <_ZplRK15StringSumHelperPKc+0x20>
   d8ca4:	4620      	mov	r0, r4
   d8ca6:	f7ff ff1d 	bl	d8ae4 <_ZN6String10invalidateEv>
	return a;
}
   d8caa:	4620      	mov	r0, r4
   d8cac:	bd38      	pop	{r3, r4, r5, pc}

000d8cae <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d8cae:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8cb0:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d8cb2:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8cb4:	b912      	cbnz	r2, d8cbc <_ZNK6String6equalsEPKc+0xe>
   d8cb6:	b919      	cbnz	r1, d8cc0 <_ZNK6String6equalsEPKc+0x12>
   d8cb8:	2001      	movs	r0, #1
   d8cba:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8cbc:	b911      	cbnz	r1, d8cc4 <_ZNK6String6equalsEPKc+0x16>
   d8cbe:	6803      	ldr	r3, [r0, #0]
   d8cc0:	7818      	ldrb	r0, [r3, #0]
   d8cc2:	e002      	b.n	d8cca <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d8cc4:	6800      	ldr	r0, [r0, #0]
   d8cc6:	f001 fd15 	bl	da6f4 <strcmp>
   d8cca:	fab0 f080 	clz	r0, r0
   d8cce:	0940      	lsrs	r0, r0, #5
}
   d8cd0:	bd08      	pop	{r3, pc}
	...

000d8cd4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d8cd4:	b40e      	push	{r1, r2, r3}
   d8cd6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d8cd8:	ac09      	add	r4, sp, #36	; 0x24
   d8cda:	4605      	mov	r5, r0
   d8cdc:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d8ce0:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d8ce2:	4623      	mov	r3, r4
   d8ce4:	463a      	mov	r2, r7
   d8ce6:	2105      	movs	r1, #5
   d8ce8:	a802      	add	r0, sp, #8
   d8cea:	f7ff f88d 	bl	d7e08 <vsnprintf>
    va_end(marker);

    String result;
   d8cee:	490c      	ldr	r1, [pc, #48]	; (d8d20 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d8cf0:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d8cf2:	4628      	mov	r0, r5
   d8cf4:	f7ff ff36 	bl	d8b64 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d8cf8:	4631      	mov	r1, r6
   d8cfa:	4628      	mov	r0, r5
   d8cfc:	f7ff ff09 	bl	d8b12 <_ZN6String7reserveEj>
    if (result.buffer) {
   d8d00:	6828      	ldr	r0, [r5, #0]
   d8d02:	b130      	cbz	r0, d8d12 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d8d04:	4623      	mov	r3, r4
   d8d06:	463a      	mov	r2, r7
   d8d08:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d8d0a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d8d0c:	f7ff f87c 	bl	d7e08 <vsnprintf>
        va_end(marker);
        result.len = n;
   d8d10:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d8d12:	4628      	mov	r0, r5
   d8d14:	b004      	add	sp, #16
   d8d16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8d1a:	b003      	add	sp, #12
   d8d1c:	4770      	bx	lr
   d8d1e:	bf00      	nop
   d8d20:	000dbd08 	.word	0x000dbd08

000d8d24 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d8d24:	4b04      	ldr	r3, [pc, #16]	; (d8d38 <_GLOBAL__sub_I_System+0x14>)
   d8d26:	2000      	movs	r0, #0
   d8d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8d2c:	7018      	strb	r0, [r3, #0]
   d8d2e:	8058      	strh	r0, [r3, #2]
   d8d30:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d8d32:	f7fe bf6d 	b.w	d7c10 <set_system_mode>
   d8d36:	bf00      	nop
   d8d38:	2003e568 	.word	0x2003e568

000d8d3c <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d8d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8d3e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8d40:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d8d42:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8d46:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8d48:	2201      	movs	r2, #1
   d8d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8d4e:	4621      	mov	r1, r4
   d8d50:	47a8      	blx	r5
}
   d8d52:	b003      	add	sp, #12
   d8d54:	bd30      	pop	{r4, r5, pc}

000d8d56 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d8d56:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8d58:	6803      	ldr	r3, [r0, #0]
   d8d5a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8d60:	46a4      	mov	ip, r4
}
   d8d62:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8d66:	4760      	bx	ip

000d8d68 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8d6a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d8d6c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8d6e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d8d72:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8d74:	4621      	mov	r1, r4
   d8d76:	4613      	mov	r3, r2
   d8d78:	2201      	movs	r2, #1
   d8d7a:	47a8      	blx	r5
}
   d8d7c:	b003      	add	sp, #12
   d8d7e:	bd30      	pop	{r4, r5, pc}

000d8d80 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d8d80:	4770      	bx	lr

000d8d82 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8d82:	b538      	push	{r3, r4, r5, lr}
   d8d84:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d8d86:	681a      	ldr	r2, [r3, #0]
   d8d88:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8d8a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d8d8c:	da05      	bge.n	d8d9a <_ZN9TCPClient9connectedEv+0x18>
   d8d8e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8d92:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8d96:	429a      	cmp	r2, r3
   d8d98:	d001      	beq.n	d8d9e <_ZN9TCPClient9connectedEv+0x1c>
   d8d9a:	2501      	movs	r5, #1
   d8d9c:	e00b      	b.n	d8db6 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d8d9e:	6803      	ldr	r3, [r0, #0]
   d8da0:	691b      	ldr	r3, [r3, #16]
   d8da2:	4798      	blx	r3
   d8da4:	2800      	cmp	r0, #0
   d8da6:	bf14      	ite	ne
   d8da8:	2501      	movne	r5, #1
   d8daa:	2500      	moveq	r5, #0
        if (!rv) {
   d8dac:	d103      	bne.n	d8db6 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d8dae:	6823      	ldr	r3, [r4, #0]
   d8db0:	4620      	mov	r0, r4
   d8db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8db4:	4798      	blx	r3
        }
    }
    return rv;
}
   d8db6:	4628      	mov	r0, r5
   d8db8:	bd38      	pop	{r3, r4, r5, pc}

000d8dba <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d8dba:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d8dbc:	6818      	ldr	r0, [r3, #0]
}
   d8dbe:	43c0      	mvns	r0, r0
   d8dc0:	0fc0      	lsrs	r0, r0, #31
   d8dc2:	4770      	bx	lr

000d8dc4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8dc4:	4770      	bx	lr

000d8dc6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8dc6:	2000      	movs	r0, #0
   d8dc8:	4770      	bx	lr

000d8dca <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8dca:	b510      	push	{r4, lr}
   d8dcc:	2114      	movs	r1, #20
   d8dce:	4604      	mov	r4, r0
   d8dd0:	f000 fdc7 	bl	d9962 <_ZdlPvj>
   d8dd4:	4620      	mov	r0, r4
   d8dd6:	bd10      	pop	{r4, pc}

000d8dd8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8dd8:	f7fb b95f 	b.w	d409a <_ZdlPv>

000d8ddc <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8de0:	4698      	mov	r8, r3
    stop();
   d8de2:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8de4:	b093      	sub	sp, #76	; 0x4c
    stop();
   d8de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8de8:	460c      	mov	r4, r1
   d8dea:	4606      	mov	r6, r0
   d8dec:	4617      	mov	r7, r2
    stop();
   d8dee:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d8df0:	ab12      	add	r3, sp, #72	; 0x48
   d8df2:	2500      	movs	r5, #0
   d8df4:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d8df8:	462a      	mov	r2, r5
   d8dfa:	4629      	mov	r1, r5
   d8dfc:	4620      	mov	r0, r4
   d8dfe:	f7fe fe27 	bl	d7a50 <netdb_getaddrinfo>
   d8e02:	2800      	cmp	r0, #0
   d8e04:	db3a      	blt.n	d8e7c <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d8e06:	9b00      	ldr	r3, [sp, #0]
   d8e08:	2b00      	cmp	r3, #0
   d8e0a:	d039      	beq.n	d8e80 <_ZN9TCPClient7connectEPKctm+0xa4>
   d8e0c:	695b      	ldr	r3, [r3, #20]
   d8e0e:	2b00      	cmp	r3, #0
   d8e10:	d036      	beq.n	d8e80 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d8e12:	a806      	add	r0, sp, #24
   d8e14:	f7ff fbb0 	bl	d8578 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8e18:	9b00      	ldr	r3, [sp, #0]
   d8e1a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8e1c:	7863      	ldrb	r3, [r4, #1]
   d8e1e:	2b02      	cmp	r3, #2
   d8e20:	d101      	bne.n	d8e26 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8e22:	1d21      	adds	r1, r4, #4
   d8e24:	e013      	b.n	d8e4e <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d8e26:	2b0a      	cmp	r3, #10
   d8e28:	d114      	bne.n	d8e54 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d8e2a:	2211      	movs	r2, #17
   d8e2c:	4629      	mov	r1, r5
   d8e2e:	a801      	add	r0, sp, #4
   d8e30:	f001 fc2f 	bl	da692 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8e34:	68a3      	ldr	r3, [r4, #8]
   d8e36:	bb33      	cbnz	r3, d8e86 <_ZN9TCPClient7connectEPKctm+0xaa>
   d8e38:	68e3      	ldr	r3, [r4, #12]
   d8e3a:	bb23      	cbnz	r3, d8e86 <_ZN9TCPClient7connectEPKctm+0xaa>
   d8e3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8e40:	6925      	ldr	r5, [r4, #16]
   d8e42:	f7fe fded 	bl	d7a20 <inet_htonl>
   d8e46:	4285      	cmp	r5, r0
   d8e48:	d11d      	bne.n	d8e86 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8e4a:	f104 0114 	add.w	r1, r4, #20
   d8e4e:	a806      	add	r0, sp, #24
   d8e50:	f7ff fbe2 	bl	d8618 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d8e54:	a806      	add	r0, sp, #24
   d8e56:	f7ff fbaf 	bl	d85b8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d8e5a:	b188      	cbz	r0, d8e80 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d8e5c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8e5e:	ad07      	add	r5, sp, #28
   d8e60:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8e64:	4b18      	ldr	r3, [pc, #96]	; (d8ec8 <_ZN9TCPClient7connectEPKctm+0xec>)
   d8e66:	930c      	str	r3, [sp, #48]	; 0x30
   d8e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8e6a:	ac0d      	add	r4, sp, #52	; 0x34
   d8e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8e6e:	682b      	ldr	r3, [r5, #0]
   d8e70:	7023      	strb	r3, [r4, #0]
   d8e72:	463a      	mov	r2, r7
   d8e74:	4643      	mov	r3, r8
   d8e76:	a90c      	add	r1, sp, #48	; 0x30
   d8e78:	4630      	mov	r0, r6
   d8e7a:	47c8      	blx	r9
   d8e7c:	4604      	mov	r4, r0
   d8e7e:	e01c      	b.n	d8eba <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d8e80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d8e84:	e019      	b.n	d8eba <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8e86:	f104 0308 	add.w	r3, r4, #8
   d8e8a:	ad01      	add	r5, sp, #4
   d8e8c:	3418      	adds	r4, #24
   d8e8e:	6818      	ldr	r0, [r3, #0]
   d8e90:	6859      	ldr	r1, [r3, #4]
   d8e92:	462a      	mov	r2, r5
   d8e94:	c203      	stmia	r2!, {r0, r1}
   d8e96:	3308      	adds	r3, #8
   d8e98:	42a3      	cmp	r3, r4
   d8e9a:	4615      	mov	r5, r2
   d8e9c:	d1f7      	bne.n	d8e8e <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d8e9e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8ea0:	a901      	add	r1, sp, #4
   d8ea2:	a80c      	add	r0, sp, #48	; 0x30
   d8ea4:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d8ea6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8eaa:	f7ff fb73 	bl	d8594 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8eb0:	ac07      	add	r4, sp, #28
   d8eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8eb4:	682b      	ldr	r3, [r5, #0]
   d8eb6:	7023      	strb	r3, [r4, #0]
   d8eb8:	e7cc      	b.n	d8e54 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d8eba:	9800      	ldr	r0, [sp, #0]
   d8ebc:	f7fe fdc0 	bl	d7a40 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d8ec0:	4620      	mov	r0, r4
   d8ec2:	b013      	add	sp, #76	; 0x4c
   d8ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8ec8:	000dbce8 	.word	0x000dbce8

000d8ecc <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8ecc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8ece:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d8ed0:	2200      	movs	r2, #0
   d8ed2:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d8ed4:	9202      	str	r2, [sp, #8]
   d8ed6:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8ed8:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d8eda:	4604      	mov	r4, r0
   d8edc:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d8ede:	d008      	beq.n	d8ef2 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d8ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8ee4:	fbb3 f1f2 	udiv	r1, r3, r2
   d8ee8:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d8eea:	fb02 3111 	mls	r1, r2, r1, r3
   d8eee:	434a      	muls	r2, r1
   d8ef0:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d8ef2:	6960      	ldr	r0, [r4, #20]
   d8ef4:	2308      	movs	r3, #8
   d8ef6:	9300      	str	r3, [sp, #0]
   d8ef8:	f241 0205 	movw	r2, #4101	; 0x1005
   d8efc:	446b      	add	r3, sp
   d8efe:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8f02:	6800      	ldr	r0, [r0, #0]
   d8f04:	f7fe fdb4 	bl	d7a70 <sock_setsockopt>
    if (ret < 0) {
   d8f08:	2800      	cmp	r0, #0
   d8f0a:	db08      	blt.n	d8f1e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d8f0c:	6960      	ldr	r0, [r4, #20]
   d8f0e:	2300      	movs	r3, #0
   d8f10:	4632      	mov	r2, r6
   d8f12:	4629      	mov	r1, r5
   d8f14:	6800      	ldr	r0, [r0, #0]
   d8f16:	f7fe fdcb 	bl	d7ab0 <sock_send>
    if (ret < 0) {
   d8f1a:	2800      	cmp	r0, #0
   d8f1c:	da04      	bge.n	d8f28 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d8f1e:	f7fe ff8b 	bl	d7e38 <__errno>
   d8f22:	6803      	ldr	r3, [r0, #0]
   d8f24:	6063      	str	r3, [r4, #4]
   d8f26:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d8f28:	b004      	add	sp, #16
   d8f2a:	bd70      	pop	{r4, r5, r6, pc}

000d8f2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8f2c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8f2e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8f30:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8f32:	689b      	ldr	r3, [r3, #8]
   d8f34:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8f36:	68a3      	ldr	r3, [r4, #8]
   d8f38:	3b01      	subs	r3, #1
   d8f3a:	60a3      	str	r3, [r4, #8]
   d8f3c:	b92b      	cbnz	r3, d8f4a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d8f3e:	6823      	ldr	r3, [r4, #0]
   d8f40:	4620      	mov	r0, r4
   d8f42:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d8f48:	4718      	bx	r3
   d8f4a:	bd10      	pop	{r4, pc}

000d8f4c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d8f4c:	b570      	push	{r4, r5, r6, lr}
   d8f4e:	4604      	mov	r4, r0
   d8f50:	694d      	ldr	r5, [r1, #20]
   d8f52:	4b05      	ldr	r3, [pc, #20]	; (d8f68 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8f54:	f844 3b04 	str.w	r3, [r4], #4
   d8f58:	358c      	adds	r5, #140	; 0x8c
   d8f5a:	4606      	mov	r6, r0
   d8f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8f60:	682b      	ldr	r3, [r5, #0]
   d8f62:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8f64:	4630      	mov	r0, r6
   d8f66:	bd70      	pop	{r4, r5, r6, pc}
   d8f68:	000dbce8 	.word	0x000dbce8

000d8f6c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8f6c:	b510      	push	{r4, lr}
   d8f6e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8f70:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8f74:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8f78:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8f7a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8f7c:	d005      	beq.n	d8f8a <_ZN9TCPClient4peekEv+0x1e>
   d8f7e:	6962      	ldr	r2, [r4, #20]
   d8f80:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8f84:	4413      	add	r3, r2
   d8f86:	7918      	ldrb	r0, [r3, #4]
   d8f88:	bd10      	pop	{r4, pc}
   d8f8a:	6803      	ldr	r3, [r0, #0]
   d8f8c:	691b      	ldr	r3, [r3, #16]
   d8f8e:	4798      	blx	r3
   d8f90:	2800      	cmp	r0, #0
   d8f92:	d1f4      	bne.n	d8f7e <_ZN9TCPClient4peekEv+0x12>
   d8f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d8f98:	bd10      	pop	{r4, pc}

000d8f9a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8f9a:	b510      	push	{r4, lr}
   d8f9c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8f9e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8fa2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8fa6:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8fa8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8faa:	d008      	beq.n	d8fbe <_ZN9TCPClient4readEv+0x24>
   d8fac:	6962      	ldr	r2, [r4, #20]
   d8fae:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8fb2:	1c59      	adds	r1, r3, #1
   d8fb4:	4413      	add	r3, r2
   d8fb6:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d8fba:	7918      	ldrb	r0, [r3, #4]
   d8fbc:	bd10      	pop	{r4, pc}
   d8fbe:	6803      	ldr	r3, [r0, #0]
   d8fc0:	691b      	ldr	r3, [r3, #16]
   d8fc2:	4798      	blx	r3
   d8fc4:	2800      	cmp	r0, #0
   d8fc6:	d1f1      	bne.n	d8fac <_ZN9TCPClient4readEv+0x12>
   d8fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d8fcc:	bd10      	pop	{r4, pc}
	...

000d8fd0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d8fd0:	b510      	push	{r4, lr}
   d8fd2:	4b06      	ldr	r3, [pc, #24]	; (d8fec <_ZN9TCPClientD1Ev+0x1c>)
   d8fd4:	6003      	str	r3, [r0, #0]
   d8fd6:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8fd8:	6980      	ldr	r0, [r0, #24]
   d8fda:	b128      	cbz	r0, d8fe8 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8fdc:	6843      	ldr	r3, [r0, #4]
   d8fde:	3b01      	subs	r3, #1
   d8fe0:	6043      	str	r3, [r0, #4]
   d8fe2:	b90b      	cbnz	r3, d8fe8 <_ZN9TCPClientD1Ev+0x18>
   d8fe4:	f7ff ffa2 	bl	d8f2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
   d8fe8:	4620      	mov	r0, r4
   d8fea:	bd10      	pop	{r4, pc}
   d8fec:	000dbe6c 	.word	0x000dbe6c

000d8ff0 <_ZN9TCPClientD0Ev>:
   d8ff0:	b510      	push	{r4, lr}
   d8ff2:	4604      	mov	r4, r0
   d8ff4:	f7ff ffec 	bl	d8fd0 <_ZN9TCPClientD1Ev>
   d8ff8:	4620      	mov	r0, r4
   d8ffa:	211c      	movs	r1, #28
   d8ffc:	f000 fcb1 	bl	d9962 <_ZdlPvj>
   d9000:	4620      	mov	r0, r4
   d9002:	bd10      	pop	{r4, pc}

000d9004 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d9004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9006:	6943      	ldr	r3, [r0, #20]
   d9008:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d900a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d900e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d9012:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d9014:	4605      	mov	r5, r0
   d9016:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d9018:	d106      	bne.n	d9028 <_ZN9TCPClient4readEPhj+0x24>
   d901a:	6803      	ldr	r3, [r0, #0]
   d901c:	691b      	ldr	r3, [r3, #16]
   d901e:	4798      	blx	r3
   d9020:	b910      	cbnz	r0, d9028 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d9022:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d9026:	e014      	b.n	d9052 <_ZN9TCPClient4readEPhj+0x4e>
   d9028:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d902a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d902e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d9032:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d9034:	42bc      	cmp	r4, r7
   d9036:	bf28      	it	cs
   d9038:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d903a:	4419      	add	r1, r3
   d903c:	4622      	mov	r2, r4
   d903e:	3104      	adds	r1, #4
   d9040:	4630      	mov	r0, r6
   d9042:	f001 fb1b 	bl	da67c <memcpy>
   d9046:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d9048:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d904c:	4423      	add	r3, r4
   d904e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d9052:	4620      	mov	r0, r4
   d9054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9056 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d9056:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d9058:	2300      	movs	r3, #0
   d905a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d905e:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d9060:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d9064:	4770      	bx	lr

000d9066 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d906a:	4698      	mov	r8, r3
    stop();
   d906c:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d906e:	460d      	mov	r5, r1
   d9070:	b08a      	sub	sp, #40	; 0x28
    stop();
   d9072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d9074:	4606      	mov	r6, r0
   d9076:	4617      	mov	r7, r2
    stop();
   d9078:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d907a:	7d2b      	ldrb	r3, [r5, #20]
   d907c:	6974      	ldr	r4, [r6, #20]
   d907e:	2b04      	cmp	r3, #4
   d9080:	bf0c      	ite	eq
   d9082:	2002      	moveq	r0, #2
   d9084:	200a      	movne	r0, #10
   d9086:	2206      	movs	r2, #6
   d9088:	2101      	movs	r1, #1
   d908a:	f7fe fd19 	bl	d7ac0 <sock_socket>
   d908e:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d9090:	6973      	ldr	r3, [r6, #20]
   d9092:	681c      	ldr	r4, [r3, #0]
   d9094:	2c00      	cmp	r4, #0
   d9096:	db5b      	blt.n	d9150 <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d9098:	4630      	mov	r0, r6
   d909a:	f7ff ffdc 	bl	d9056 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d909e:	f1b8 0f00 	cmp.w	r8, #0
   d90a2:	d017      	beq.n	d90d4 <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d90a4:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d90a6:	a903      	add	r1, sp, #12
   d90a8:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d90ac:	9303      	str	r3, [sp, #12]
   d90ae:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d90b2:	f7fe fca5 	bl	d7a00 <if_index_to_name>
   d90b6:	2800      	cmp	r0, #0
   d90b8:	db49      	blt.n	d914e <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d90ba:	6970      	ldr	r0, [r6, #20]
   d90bc:	2306      	movs	r3, #6
   d90be:	9300      	str	r3, [sp, #0]
   d90c0:	f241 020b 	movw	r2, #4107	; 0x100b
   d90c4:	ab03      	add	r3, sp, #12
   d90c6:	f640 71ff 	movw	r1, #4095	; 0xfff
   d90ca:	6800      	ldr	r0, [r0, #0]
   d90cc:	f7fe fcd0 	bl	d7a70 <sock_setsockopt>
   d90d0:	2800      	cmp	r0, #0
   d90d2:	db3c      	blt.n	d914e <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d90d4:	241c      	movs	r4, #28
   d90d6:	4622      	mov	r2, r4
   d90d8:	2100      	movs	r1, #0
   d90da:	a803      	add	r0, sp, #12
   d90dc:	f001 fad9 	bl	da692 <memset>
    if (ip.version() == 4) {
   d90e0:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d90e2:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d90e6:	2b04      	cmp	r3, #4
   d90e8:	d10c      	bne.n	d9104 <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d90ea:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d90ec:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d90ee:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d90f2:	f7fe fc9d 	bl	d7a30 <inet_htons>
   d90f6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d90fa:	6868      	ldr	r0, [r5, #4]
   d90fc:	f7fe fc90 	bl	d7a20 <inet_htonl>
   d9100:	9004      	str	r0, [sp, #16]
   d9102:	e013      	b.n	d912c <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d9104:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d9106:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d9108:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d910c:	f7fe fc90 	bl	d7a30 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d9110:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d9112:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d9116:	1d2b      	adds	r3, r5, #4
   d9118:	f105 0714 	add.w	r7, r5, #20
   d911c:	6818      	ldr	r0, [r3, #0]
   d911e:	6859      	ldr	r1, [r3, #4]
   d9120:	4622      	mov	r2, r4
   d9122:	c203      	stmia	r2!, {r0, r1}
   d9124:	3308      	adds	r3, #8
   d9126:	42bb      	cmp	r3, r7
   d9128:	4614      	mov	r4, r2
   d912a:	d1f7      	bne.n	d911c <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d912c:	6973      	ldr	r3, [r6, #20]
   d912e:	221c      	movs	r2, #28
   d9130:	a903      	add	r1, sp, #12
   d9132:	6818      	ldr	r0, [r3, #0]
   d9134:	f7fe fcac 	bl	d7a90 <sock_connect>
   d9138:	2800      	cmp	r0, #0
   d913a:	db08      	blt.n	d914e <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d913c:	1d2c      	adds	r4, r5, #4
   d913e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9140:	6976      	ldr	r6, [r6, #20]
   d9142:	368c      	adds	r6, #140	; 0x8c
   d9144:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d9146:	6823      	ldr	r3, [r4, #0]
   d9148:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d914a:	2401      	movs	r4, #1
   d914c:	e004      	b.n	d9158 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d914e:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d9150:	6833      	ldr	r3, [r6, #0]
   d9152:	4630      	mov	r0, r6
   d9154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9156:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d9158:	4620      	mov	r0, r4
   d915a:	b00a      	add	sp, #40	; 0x28
   d915c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9160 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d9160:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d9162:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d9164:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d9166:	6818      	ldr	r0, [r3, #0]
   d9168:	2800      	cmp	r0, #0
   d916a:	db01      	blt.n	d9170 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d916c:	f7fe fc88 	bl	d7a80 <sock_close>
   d9170:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d9172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9176:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9178:	6960      	ldr	r0, [r4, #20]
   d917a:	2211      	movs	r2, #17
   d917c:	2100      	movs	r1, #0
   d917e:	308c      	adds	r0, #140	; 0x8c
   d9180:	f001 fa87 	bl	da692 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d9184:	4620      	mov	r0, r4
}
   d9186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d918a:	f7ff bf64 	b.w	d9056 <_ZN9TCPClient12flush_bufferEv>
	...

000d9190 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d9190:	b530      	push	{r4, r5, lr}
   d9192:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d9194:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d9198:	b08b      	sub	sp, #44	; 0x2c
   d919a:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d919c:	b11b      	cbz	r3, d91a6 <_ZN9TCPClient9availableEv+0x16>
   d919e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d91a2:	429a      	cmp	r2, r3
   d91a4:	d040      	beq.n	d9228 <_ZN9TCPClient9availableEv+0x98>
   d91a6:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d91a8:	6818      	ldr	r0, [r3, #0]
   d91aa:	2800      	cmp	r0, #0
   d91ac:	db3f      	blt.n	d922e <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d91ae:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d91b2:	2d7f      	cmp	r5, #127	; 0x7f
   d91b4:	d83b      	bhi.n	d922e <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d91b6:	1d19      	adds	r1, r3, #4
   d91b8:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d91bc:	2308      	movs	r3, #8
   d91be:	4429      	add	r1, r5
   d91c0:	f7fe fc6e 	bl	d7aa0 <sock_recv>
            if (ret > 0) {
   d91c4:	2800      	cmp	r0, #0
   d91c6:	dd0c      	ble.n	d91e2 <_ZN9TCPClient9availableEv+0x52>
   d91c8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d91ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d91ce:	b90a      	cbnz	r2, d91d4 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d91d0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d91d4:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d91d6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d91da:	4418      	add	r0, r3
   d91dc:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d91e0:	e025      	b.n	d922e <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d91e2:	f7fe fe29 	bl	d7e38 <__errno>
   d91e6:	6803      	ldr	r3, [r0, #0]
   d91e8:	2b0b      	cmp	r3, #11
   d91ea:	d020      	beq.n	d922e <_ZN9TCPClient9availableEv+0x9e>
   d91ec:	f7fe fe24 	bl	d7e38 <__errno>
   d91f0:	6803      	ldr	r3, [r0, #0]
   d91f2:	2b0b      	cmp	r3, #11
   d91f4:	d01b      	beq.n	d922e <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d91f6:	2320      	movs	r3, #32
   d91f8:	2500      	movs	r5, #0
   d91fa:	9302      	str	r3, [sp, #8]
   d91fc:	9503      	str	r5, [sp, #12]
   d91fe:	f7fe fe1b 	bl	d7e38 <__errno>
   d9202:	6803      	ldr	r3, [r0, #0]
   d9204:	9301      	str	r3, [sp, #4]
   d9206:	4b0e      	ldr	r3, [pc, #56]	; (d9240 <_ZN9TCPClient9availableEv+0xb0>)
   d9208:	9300      	str	r3, [sp, #0]
   d920a:	aa02      	add	r2, sp, #8
   d920c:	462b      	mov	r3, r5
   d920e:	490d      	ldr	r1, [pc, #52]	; (d9244 <_ZN9TCPClient9availableEv+0xb4>)
   d9210:	2032      	movs	r0, #50	; 0x32
   d9212:	f7fe fced 	bl	d7bf0 <log_message>
                    sock_close(d_->sock);
   d9216:	6963      	ldr	r3, [r4, #20]
   d9218:	6818      	ldr	r0, [r3, #0]
   d921a:	f7fe fc31 	bl	d7a80 <sock_close>
   d921e:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d9220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9224:	601a      	str	r2, [r3, #0]
   d9226:	e002      	b.n	d922e <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d9228:	f7ff ff15 	bl	d9056 <_ZN9TCPClient12flush_bufferEv>
   d922c:	e7bb      	b.n	d91a6 <_ZN9TCPClient9availableEv+0x16>
   d922e:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d9230:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d9234:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d9238:	1a18      	subs	r0, r3, r0
}
   d923a:	b00b      	add	sp, #44	; 0x2c
   d923c:	bd30      	pop	{r4, r5, pc}
   d923e:	bf00      	nop
   d9240:	000dbeb7 	.word	0x000dbeb7
   d9244:	000dbeb0 	.word	0x000dbeb0

000d9248 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d9248:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d924a:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d924c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d924e:	6001      	str	r1, [r0, #0]
   d9250:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d9254:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d9258:	3088      	adds	r0, #136	; 0x88
   d925a:	f7ff f98d 	bl	d8578 <_ZN9IPAddressC1Ev>
}
   d925e:	4620      	mov	r0, r4
   d9260:	bd10      	pop	{r4, pc}
	...

000d9264 <_ZN9TCPClientC1Ei>:
   d9264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d9268:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d926a:	2300      	movs	r3, #0
   d926c:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d926e:	4a14      	ldr	r2, [pc, #80]	; (d92c0 <_ZN9TCPClientC1Ei+0x5c>)
   d9270:	6043      	str	r3, [r0, #4]
   d9272:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d9274:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9276:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d9278:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d927a:	20a0      	movs	r0, #160	; 0xa0
   d927c:	460e      	mov	r6, r1
   d927e:	f7fa ff0a 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d9282:	4605      	mov	r5, r0
   d9284:	b110      	cbz	r0, d928c <_ZN9TCPClientC1Ei+0x28>
   d9286:	4631      	mov	r1, r6
   d9288:	f7ff ffde 	bl	d9248 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d928c:	2014      	movs	r0, #20
   d928e:	f7fa ff02 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d9292:	4603      	mov	r3, r0
   d9294:	b128      	cbz	r0, d92a2 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d9296:	2201      	movs	r2, #1
   d9298:	6042      	str	r2, [r0, #4]
   d929a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d929c:	4a09      	ldr	r2, [pc, #36]	; (d92c4 <_ZN9TCPClientC1Ei+0x60>)
   d929e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d92a0:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d92a2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d92a4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d92a6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d92a8:	b128      	cbz	r0, d92b6 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d92aa:	6843      	ldr	r3, [r0, #4]
   d92ac:	3b01      	subs	r3, #1
   d92ae:	6043      	str	r3, [r0, #4]
   d92b0:	b90b      	cbnz	r3, d92b6 <_ZN9TCPClientC1Ei+0x52>
   d92b2:	f7ff fe3b 	bl	d8f2c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d92b6:	4620      	mov	r0, r4
   d92b8:	f7ff fecd 	bl	d9056 <_ZN9TCPClient12flush_bufferEv>
}
   d92bc:	4620      	mov	r0, r4
   d92be:	bd70      	pop	{r4, r5, r6, pc}
   d92c0:	000dbe6c 	.word	0x000dbe6c
   d92c4:	000dbe50 	.word	0x000dbe50

000d92c8 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d92c8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d92ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d92ce:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d92d0:	f7ff ffc8 	bl	d9264 <_ZN9TCPClientC1Ei>
}
   d92d4:	4620      	mov	r0, r4
   d92d6:	bd10      	pop	{r4, pc}

000d92d8 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d92d8:	b510      	push	{r4, lr}
   d92da:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d92dc:	6800      	ldr	r0, [r0, #0]
   d92de:	2800      	cmp	r0, #0
   d92e0:	db01      	blt.n	d92e6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d92e2:	f7fe fbcd 	bl	d7a80 <sock_close>
    }
}
   d92e6:	4620      	mov	r0, r4
   d92e8:	bd10      	pop	{r4, pc}

000d92ea <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d92ea:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d92ec:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d92ee:	4620      	mov	r0, r4
   d92f0:	f7ff fff2 	bl	d92d8 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d92f4:	b124      	cbz	r4, d9300 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d92f6:	4620      	mov	r0, r4
   d92f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d92fc:	f7fa becd 	b.w	d409a <_ZdlPv>
   d9300:	bd10      	pop	{r4, pc}
	...

000d9304 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9304:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d9306:	4b14      	ldr	r3, [pc, #80]	; (d9358 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d9308:	4f14      	ldr	r7, [pc, #80]	; (d935c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d930a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d930c:	4b14      	ldr	r3, [pc, #80]	; (d9360 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d930e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d9310:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d9312:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d9314:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d9316:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d9318:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d931a:	d01b      	beq.n	d9354 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d931c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d931e:	ad01      	add	r5, sp, #4
   d9320:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d9324:	f001 f8b2 	bl	da48c <localtime>
	calendar_time->tm_year += 1900;
   d9328:	6943      	ldr	r3, [r0, #20]
   d932a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d932e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d9330:	4604      	mov	r4, r0
   d9332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d9336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d9338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d933a:	f8d4 e000 	ldr.w	lr, [r4]
   d933e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9342:	ad01      	add	r5, sp, #4
   d9344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9346:	4c07      	ldr	r4, [pc, #28]	; (d9364 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d9348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d934a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d934c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d934e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d9350:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d9354:	b00b      	add	sp, #44	; 0x2c
   d9356:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9358:	2003e5a0 	.word	0x2003e5a0
   d935c:	2003e59c 	.word	0x2003e59c
   d9360:	2003e598 	.word	0x2003e598
   d9364:	2003e570 	.word	0x2003e570

000d9368 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d9368:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d936a:	2000      	movs	r0, #0
   d936c:	f7fe fcb4 	bl	d7cd8 <spark_sync_time_pending>
   d9370:	b128      	cbz	r0, d937e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9372:	f7fe fc99 	bl	d7ca8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d9376:	f080 0001 	eor.w	r0, r0, #1
   d937a:	b2c0      	uxtb	r0, r0
   d937c:	bd08      	pop	{r3, pc}
   d937e:	2001      	movs	r0, #1
    }
   d9380:	bd08      	pop	{r3, pc}
	...

000d9384 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d9384:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9386:	f7ff ffbd 	bl	d9304 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d938a:	4b01      	ldr	r3, [pc, #4]	; (d9390 <_ZN9TimeClass4hourEl+0xc>)
   d938c:	6898      	ldr	r0, [r3, #8]
   d938e:	bd08      	pop	{r3, pc}
   d9390:	2003e570 	.word	0x2003e570

000d9394 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   d9394:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d9396:	f7ff ffb5 	bl	d9304 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   d939a:	4b01      	ldr	r3, [pc, #4]	; (d93a0 <_ZN9TimeClass6minuteEl+0xc>)
   d939c:	6858      	ldr	r0, [r3, #4]
   d939e:	bd08      	pop	{r3, pc}
   d93a0:	2003e570 	.word	0x2003e570

000d93a4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d93a4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d93a6:	2000      	movs	r0, #0
   d93a8:	f7fe fa82 	bl	d78b0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d93ac:	4604      	mov	r4, r0
   d93ae:	b968      	cbnz	r0, d93cc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d93b0:	f7fe fc26 	bl	d7c00 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d93b4:	2801      	cmp	r0, #1
   d93b6:	d10b      	bne.n	d93d0 <_ZN9TimeClass7isValidEv+0x2c>
   d93b8:	4620      	mov	r0, r4
   d93ba:	f7fe fc51 	bl	d7c60 <system_thread_get_state>
   d93be:	b938      	cbnz	r0, d93d0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d93c0:	f7ff ffd2 	bl	d9368 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d93c4:	b930      	cbnz	r0, d93d4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d93c6:	f7fe fc67 	bl	d7c98 <spark_process>
   d93ca:	e7f9      	b.n	d93c0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d93cc:	2001      	movs	r0, #1
   d93ce:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d93d0:	2000      	movs	r0, #0
   d93d2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d93d4:	f7ff ffc8 	bl	d9368 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d93d8:	2000      	movs	r0, #0
   d93da:	f7fe fa69 	bl	d78b0 <HAL_RTC_Time_Is_Valid>
   d93de:	3000      	adds	r0, #0
   d93e0:	bf18      	it	ne
   d93e2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d93e4:	bd10      	pop	{r4, pc}

000d93e6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d93e6:	b508      	push	{r3, lr}
    (void)isValid();
   d93e8:	f7ff ffdc 	bl	d93a4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d93ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d93f0:	f7fe ba56 	b.w	d78a0 <HAL_RTC_Get_UnixTime>

000d93f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d93f4:	4b02      	ldr	r3, [pc, #8]	; (d9400 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d93f6:	681a      	ldr	r2, [r3, #0]
   d93f8:	4b02      	ldr	r3, [pc, #8]	; (d9404 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d93fa:	601a      	str	r2, [r3, #0]
   d93fc:	4770      	bx	lr
   d93fe:	bf00      	nop
   d9400:	2003db84 	.word	0x2003db84
   d9404:	2003e594 	.word	0x2003e594

000d9408 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d9408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d940a:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d940c:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d940e:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d9410:	460e      	mov	r6, r1
   d9412:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d9414:	f000 f9c0 	bl	d9798 <pinAvailable>
   d9418:	b160      	cbz	r0, d9434 <tone+0x2c>
   d941a:	2102      	movs	r1, #2
   d941c:	4628      	mov	r0, r5
   d941e:	f7fe fa57 	bl	d78d0 <HAL_Validate_Pin_Function>
   d9422:	2802      	cmp	r0, #2
   d9424:	d106      	bne.n	d9434 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   d9426:	463a      	mov	r2, r7
   d9428:	4631      	mov	r1, r6
   d942a:	4620      	mov	r0, r4
    }
}
   d942c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
   d9430:	f7fe bb16 	b.w	d7a60 <HAL_Tone_Start>
   d9434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9436 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9436:	4770      	bx	lr

000d9438 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9438:	7441      	strb	r1, [r0, #17]
   d943a:	4770      	bx	lr

000d943c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d943c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d943e:	7c00      	ldrb	r0, [r0, #16]
   d9440:	f7fe fb8e 	bl	d7b60 <HAL_USART_Available_Data_For_Write>
}
   d9444:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9448:	bd08      	pop	{r3, pc}

000d944a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d944a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d944c:	7c00      	ldrb	r0, [r0, #16]
   d944e:	f7fe fb5f 	bl	d7b10 <HAL_USART_Available_Data>
}
   d9452:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9456:	bd08      	pop	{r3, pc}

000d9458 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9458:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d945a:	7c00      	ldrb	r0, [r0, #16]
   d945c:	f7fe fb68 	bl	d7b30 <HAL_USART_Peek_Data>
}
   d9460:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9464:	bf28      	it	cs
   d9466:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d946a:	bd08      	pop	{r3, pc}

000d946c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d946c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d946e:	7c00      	ldrb	r0, [r0, #16]
   d9470:	f7fe fb56 	bl	d7b20 <HAL_USART_Read_Data>
}
   d9474:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9478:	bf28      	it	cs
   d947a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d947e:	bd08      	pop	{r3, pc}

000d9480 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9480:	7c00      	ldrb	r0, [r0, #16]
   d9482:	f7fe bb5d 	b.w	d7b40 <HAL_USART_Flush_Data>

000d9486 <_ZN11USARTSerialD0Ev>:
   d9486:	b510      	push	{r4, lr}
   d9488:	2114      	movs	r1, #20
   d948a:	4604      	mov	r4, r0
   d948c:	f000 fa69 	bl	d9962 <_ZdlPvj>
   d9490:	4620      	mov	r0, r4
   d9492:	bd10      	pop	{r4, pc}

000d9494 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9494:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9496:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9498:	4604      	mov	r4, r0
   d949a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d949c:	b925      	cbnz	r5, d94a8 <_ZN11USARTSerial5writeEh+0x14>
   d949e:	7c00      	ldrb	r0, [r0, #16]
   d94a0:	f7fe fb5e 	bl	d7b60 <HAL_USART_Available_Data_For_Write>
   d94a4:	2800      	cmp	r0, #0
   d94a6:	dd05      	ble.n	d94b4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d94a8:	4631      	mov	r1, r6
   d94aa:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d94ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d94b0:	f7fe bb26 	b.w	d7b00 <HAL_USART_Write_Data>
  }
  return 0;
}
   d94b4:	4628      	mov	r0, r5
   d94b6:	bd70      	pop	{r4, r5, r6, pc}

000d94b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d94b8:	b510      	push	{r4, lr}
   d94ba:	4604      	mov	r4, r0
   d94bc:	4608      	mov	r0, r1
   d94be:	4611      	mov	r1, r2
   d94c0:	2200      	movs	r2, #0
   d94c2:	6062      	str	r2, [r4, #4]
   d94c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d94c8:	60a2      	str	r2, [r4, #8]
   d94ca:	4a05      	ldr	r2, [pc, #20]	; (d94e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d94cc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d94ce:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d94d0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d94d2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d94d4:	461a      	mov	r2, r3
   d94d6:	f7fe fb0b 	bl	d7af0 <HAL_USART_Init>
}
   d94da:	4620      	mov	r0, r4
   d94dc:	bd10      	pop	{r4, pc}
   d94de:	bf00      	nop
   d94e0:	000dbef8 	.word	0x000dbef8

000d94e4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d94e4:	7c00      	ldrb	r0, [r0, #16]
   d94e6:	f7fe bb33 	b.w	d7b50 <HAL_USART_Is_Enabled>
	...

000d94ec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d94ec:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d94ee:	4d0c      	ldr	r5, [pc, #48]	; (d9520 <_Z22__fetch_global_Serial1v+0x34>)
   d94f0:	6829      	ldr	r1, [r5, #0]
   d94f2:	f011 0401 	ands.w	r4, r1, #1
   d94f6:	d111      	bne.n	d951c <_Z22__fetch_global_Serial1v+0x30>
   d94f8:	4628      	mov	r0, r5
   d94fa:	f7fa fddd 	bl	d40b8 <__cxa_guard_acquire>
   d94fe:	b168      	cbz	r0, d951c <_Z22__fetch_global_Serial1v+0x30>
   d9500:	4a08      	ldr	r2, [pc, #32]	; (d9524 <_Z22__fetch_global_Serial1v+0x38>)
   d9502:	4b09      	ldr	r3, [pc, #36]	; (d9528 <_Z22__fetch_global_Serial1v+0x3c>)
   d9504:	4809      	ldr	r0, [pc, #36]	; (d952c <_Z22__fetch_global_Serial1v+0x40>)
   d9506:	4621      	mov	r1, r4
   d9508:	f7ff ffd6 	bl	d94b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d950c:	4628      	mov	r0, r5
   d950e:	f7fa fdd8 	bl	d40c2 <__cxa_guard_release>
   d9512:	4a07      	ldr	r2, [pc, #28]	; (d9530 <_Z22__fetch_global_Serial1v+0x44>)
   d9514:	4907      	ldr	r1, [pc, #28]	; (d9534 <_Z22__fetch_global_Serial1v+0x48>)
   d9516:	4805      	ldr	r0, [pc, #20]	; (d952c <_Z22__fetch_global_Serial1v+0x40>)
   d9518:	f000 fa1e 	bl	d9958 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d951c:	4803      	ldr	r0, [pc, #12]	; (d952c <_Z22__fetch_global_Serial1v+0x40>)
   d951e:	bd38      	pop	{r3, r4, r5, pc}
   d9520:	2003e63c 	.word	0x2003e63c
   d9524:	2003e640 	.word	0x2003e640
   d9528:	2003e5b8 	.word	0x2003e5b8
   d952c:	2003e5a4 	.word	0x2003e5a4
   d9530:	2003dc3c 	.word	0x2003dc3c
   d9534:	000d9437 	.word	0x000d9437

000d9538 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9538:	7441      	strb	r1, [r0, #17]
   d953a:	4770      	bx	lr

000d953c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d953c:	4770      	bx	lr

000d953e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d953e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9540:	2100      	movs	r1, #0
   d9542:	7c00      	ldrb	r0, [r0, #16]
   d9544:	f7fe fb34 	bl	d7bb0 <HAL_USB_USART_Receive_Data>
}
   d9548:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d954c:	bf28      	it	cs
   d954e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9552:	bd08      	pop	{r3, pc}

000d9554 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9554:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9556:	2101      	movs	r1, #1
   d9558:	7c00      	ldrb	r0, [r0, #16]
   d955a:	f7fe fb29 	bl	d7bb0 <HAL_USB_USART_Receive_Data>
}
   d955e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9562:	bf28      	it	cs
   d9564:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d9568:	bd08      	pop	{r3, pc}

000d956a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d956a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d956c:	7c00      	ldrb	r0, [r0, #16]
   d956e:	f7fe fb17 	bl	d7ba0 <HAL_USB_USART_Available_Data_For_Write>
}
   d9572:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9576:	bd08      	pop	{r3, pc}

000d9578 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9578:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d957a:	7c00      	ldrb	r0, [r0, #16]
   d957c:	f7fe fb08 	bl	d7b90 <HAL_USB_USART_Available_Data>
}
   d9580:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9584:	bd08      	pop	{r3, pc}

000d9586 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9586:	7c00      	ldrb	r0, [r0, #16]
   d9588:	f7fe bb22 	b.w	d7bd0 <HAL_USB_USART_Flush_Data>

000d958c <_ZN9USBSerialD0Ev>:
   d958c:	b510      	push	{r4, lr}
   d958e:	2114      	movs	r1, #20
   d9590:	4604      	mov	r4, r0
   d9592:	f000 f9e6 	bl	d9962 <_ZdlPvj>
   d9596:	4620      	mov	r0, r4
   d9598:	bd10      	pop	{r4, pc}

000d959a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d959a:	b538      	push	{r3, r4, r5, lr}
   d959c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d959e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d95a0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d95a2:	f7fe fafd 	bl	d7ba0 <HAL_USB_USART_Available_Data_For_Write>
   d95a6:	2800      	cmp	r0, #0
   d95a8:	dc01      	bgt.n	d95ae <_ZN9USBSerial5writeEh+0x14>
   d95aa:	7c60      	ldrb	r0, [r4, #17]
   d95ac:	b128      	cbz	r0, d95ba <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d95ae:	4629      	mov	r1, r5
   d95b0:	7c20      	ldrb	r0, [r4, #16]
   d95b2:	f7fe fb05 	bl	d7bc0 <HAL_USB_USART_Send_Data>
   d95b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d95ba:	bd38      	pop	{r3, r4, r5, pc}

000d95bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d95bc:	b510      	push	{r4, lr}
   d95be:	4604      	mov	r4, r0
   d95c0:	2300      	movs	r3, #0
   d95c2:	6063      	str	r3, [r4, #4]
   d95c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d95c8:	60a3      	str	r3, [r4, #8]
   d95ca:	4b05      	ldr	r3, [pc, #20]	; (d95e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d95cc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d95ce:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d95d0:	4608      	mov	r0, r1
{
  _serial = serial;
   d95d2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d95d4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d95d6:	4611      	mov	r1, r2
   d95d8:	f7fe faca 	bl	d7b70 <HAL_USB_USART_Init>
}
   d95dc:	4620      	mov	r0, r4
   d95de:	bd10      	pop	{r4, pc}
   d95e0:	000dbf28 	.word	0x000dbf28

000d95e4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d95e4:	2200      	movs	r2, #0
   d95e6:	7c00      	ldrb	r0, [r0, #16]
   d95e8:	f7fe baca 	b.w	d7b80 <HAL_USB_USART_Begin>

000d95ec <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d95ec:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d95ee:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d95f0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d95f2:	2100      	movs	r1, #0
   d95f4:	f001 f84d 	bl	da692 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d95f8:	4620      	mov	r0, r4
   d95fa:	bd10      	pop	{r4, pc}

000d95fc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d95fc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d95fe:	4d0e      	ldr	r5, [pc, #56]	; (d9638 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9600:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9602:	a801      	add	r0, sp, #4
   d9604:	f7ff fff2 	bl	d95ec <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9608:	6829      	ldr	r1, [r5, #0]
   d960a:	f011 0401 	ands.w	r4, r1, #1
   d960e:	d110      	bne.n	d9632 <_Z16_fetch_usbserialv+0x36>
   d9610:	4628      	mov	r0, r5
   d9612:	f7fa fd51 	bl	d40b8 <__cxa_guard_acquire>
   d9616:	b160      	cbz	r0, d9632 <_Z16_fetch_usbserialv+0x36>
   d9618:	aa01      	add	r2, sp, #4
   d961a:	4621      	mov	r1, r4
   d961c:	4807      	ldr	r0, [pc, #28]	; (d963c <_Z16_fetch_usbserialv+0x40>)
   d961e:	f7ff ffcd 	bl	d95bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9622:	4628      	mov	r0, r5
   d9624:	f7fa fd4d 	bl	d40c2 <__cxa_guard_release>
   d9628:	4a05      	ldr	r2, [pc, #20]	; (d9640 <_Z16_fetch_usbserialv+0x44>)
   d962a:	4906      	ldr	r1, [pc, #24]	; (d9644 <_Z16_fetch_usbserialv+0x48>)
   d962c:	4803      	ldr	r0, [pc, #12]	; (d963c <_Z16_fetch_usbserialv+0x40>)
   d962e:	f000 f993 	bl	d9958 <__aeabi_atexit>
	return _usbserial;
}
   d9632:	4802      	ldr	r0, [pc, #8]	; (d963c <_Z16_fetch_usbserialv+0x40>)
   d9634:	b007      	add	sp, #28
   d9636:	bd30      	pop	{r4, r5, pc}
   d9638:	2003e6c4 	.word	0x2003e6c4
   d963c:	2003e6c8 	.word	0x2003e6c8
   d9640:	2003dc3c 	.word	0x2003dc3c
   d9644:	000d953d 	.word	0x000d953d

000d9648 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d9648:	2200      	movs	r2, #0
   d964a:	4611      	mov	r1, r2
   d964c:	6840      	ldr	r0, [r0, #4]
   d964e:	f7fe bb6b 	b.w	d7d28 <network_ready>

000d9652 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9652:	2200      	movs	r2, #0
   d9654:	4611      	mov	r1, r2
   d9656:	6840      	ldr	r0, [r0, #4]
   d9658:	f7fe bb86 	b.w	d7d68 <network_listening>

000d965c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d965c:	2200      	movs	r2, #0
   d965e:	4611      	mov	r1, r2
   d9660:	6840      	ldr	r0, [r0, #4]
   d9662:	f7fe bb91 	b.w	d7d88 <network_get_listen_timeout>

000d9666 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9666:	2200      	movs	r2, #0
   d9668:	6840      	ldr	r0, [r0, #4]
   d966a:	f7fe bb85 	b.w	d7d78 <network_set_listen_timeout>

000d966e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d966e:	2200      	movs	r2, #0
   d9670:	f081 0101 	eor.w	r1, r1, #1
   d9674:	6840      	ldr	r0, [r0, #4]
   d9676:	f7fe bb6f 	b.w	d7d58 <network_listen>

000d967a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d967a:	2300      	movs	r3, #0
   d967c:	461a      	mov	r2, r3
   d967e:	4619      	mov	r1, r3
   d9680:	6840      	ldr	r0, [r0, #4]
   d9682:	f7fe bb61 	b.w	d7d48 <network_off>

000d9686 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d9686:	2300      	movs	r3, #0
   d9688:	461a      	mov	r2, r3
   d968a:	4619      	mov	r1, r3
   d968c:	6840      	ldr	r0, [r0, #4]
   d968e:	f7fe bb53 	b.w	d7d38 <network_on>

000d9692 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9692:	2200      	movs	r2, #0
   d9694:	4611      	mov	r1, r2
   d9696:	6840      	ldr	r0, [r0, #4]
   d9698:	f7fe bb36 	b.w	d7d08 <network_connecting>

000d969c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d969c:	2200      	movs	r2, #0
   d969e:	2102      	movs	r1, #2
   d96a0:	6840      	ldr	r0, [r0, #4]
   d96a2:	f7fe bb39 	b.w	d7d18 <network_disconnect>

000d96a6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d96a6:	2300      	movs	r3, #0
   d96a8:	461a      	mov	r2, r3
   d96aa:	6840      	ldr	r0, [r0, #4]
   d96ac:	f7fe bb24 	b.w	d7cf8 <network_connect>

000d96b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d96b0:	4b02      	ldr	r3, [pc, #8]	; (d96bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d96b2:	2204      	movs	r2, #4
   d96b4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d96b6:	4a02      	ldr	r2, [pc, #8]	; (d96c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d96b8:	601a      	str	r2, [r3, #0]
   d96ba:	4770      	bx	lr
   d96bc:	2003e6dc 	.word	0x2003e6dc
   d96c0:	000dbf58 	.word	0x000dbf58

000d96c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d96c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d96c6:	4b0c      	ldr	r3, [pc, #48]	; (d96f8 <serialEventRun+0x34>)
   d96c8:	b133      	cbz	r3, d96d8 <serialEventRun+0x14>
   d96ca:	f7ff ff97 	bl	d95fc <_Z16_fetch_usbserialv>
   d96ce:	6803      	ldr	r3, [r0, #0]
   d96d0:	691b      	ldr	r3, [r3, #16]
   d96d2:	4798      	blx	r3
   d96d4:	2800      	cmp	r0, #0
   d96d6:	dc09      	bgt.n	d96ec <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d96d8:	4b08      	ldr	r3, [pc, #32]	; (d96fc <serialEventRun+0x38>)
   d96da:	b163      	cbz	r3, d96f6 <serialEventRun+0x32>
   d96dc:	f7ff ff06 	bl	d94ec <_Z22__fetch_global_Serial1v>
   d96e0:	6803      	ldr	r3, [r0, #0]
   d96e2:	691b      	ldr	r3, [r3, #16]
   d96e4:	4798      	blx	r3
   d96e6:	2800      	cmp	r0, #0
   d96e8:	dc03      	bgt.n	d96f2 <serialEventRun+0x2e>
   d96ea:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d96ec:	f3af 8000 	nop.w
   d96f0:	e7f2      	b.n	d96d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d96f2:	f3af 8000 	nop.w
   d96f6:	bd08      	pop	{r3, pc}
	...

000d9700 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d9700:	b508      	push	{r3, lr}
	serialEventRun();
   d9702:	f7ff ffdf 	bl	d96c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9706:	f7fe f8c3 	bl	d7890 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d970a:	4b01      	ldr	r3, [pc, #4]	; (d9710 <_post_loop+0x10>)
   d970c:	6018      	str	r0, [r3, #0]
   d970e:	bd08      	pop	{r3, pc}
   d9710:	2003e6e8 	.word	0x2003e6e8

000d9714 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9714:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9716:	2300      	movs	r3, #0
   d9718:	9300      	str	r3, [sp, #0]
   d971a:	461a      	mov	r2, r3
   d971c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9720:	f7fe fab0 	bl	d7c84 <system_ctrl_set_result>
}
   d9724:	b003      	add	sp, #12
   d9726:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d972c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d972c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d972e:	8843      	ldrh	r3, [r0, #2]
   d9730:	2b0a      	cmp	r3, #10
   d9732:	d008      	beq.n	d9746 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9734:	2b50      	cmp	r3, #80	; 0x50
   d9736:	d109      	bne.n	d974c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d9738:	4b09      	ldr	r3, [pc, #36]	; (d9760 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d973a:	681b      	ldr	r3, [r3, #0]
   d973c:	b13b      	cbz	r3, d974e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d973e:	b003      	add	sp, #12
   d9740:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9744:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d9746:	f7ff ffe5 	bl	d9714 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d974a:	e006      	b.n	d975a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d974c:	2300      	movs	r3, #0
   d974e:	9300      	str	r3, [sp, #0]
   d9750:	461a      	mov	r2, r3
   d9752:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9756:	f7fe fa95 	bl	d7c84 <system_ctrl_set_result>
        break;
    }
}
   d975a:	b003      	add	sp, #12
   d975c:	f85d fb04 	ldr.w	pc, [sp], #4
   d9760:	2003e6e4 	.word	0x2003e6e4

000d9764 <module_user_init_hook>:

void module_user_init_hook()
{
   d9764:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d9766:	f7fe f87b 	bl	d7860 <HAL_RNG_GetRandomNumber>
   d976a:	4604      	mov	r4, r0
    srand(seed);
   d976c:	f000 ff9a 	bl	da6a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9770:	4b07      	ldr	r3, [pc, #28]	; (d9790 <module_user_init_hook+0x2c>)
   d9772:	b113      	cbz	r3, d977a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d9774:	4620      	mov	r0, r4
   d9776:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d977a:	2100      	movs	r1, #0
   d977c:	4804      	ldr	r0, [pc, #16]	; (d9790 <module_user_init_hook+0x2c>)
   d977e:	f7fe fab3 	bl	d7ce8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9782:	2100      	movs	r1, #0
   d9784:	4803      	ldr	r0, [pc, #12]	; (d9794 <module_user_init_hook+0x30>)
}
   d9786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d978a:	f7fe ba71 	b.w	d7c70 <system_ctrl_set_app_request_handler>
   d978e:	bf00      	nop
   d9790:	00000000 	.word	0x00000000
   d9794:	000d972d 	.word	0x000d972d

000d9798 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d9798:	b510      	push	{r4, lr}
   d979a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d979c:	480f      	ldr	r0, [pc, #60]	; (d97dc <pinAvailable+0x44>)
   d979e:	f7ff f96d 	bl	d8a7c <_ZN8SPIClass9isEnabledEv>
   d97a2:	b128      	cbz	r0, d97b0 <pinAvailable+0x18>
   d97a4:	f1a4 030b 	sub.w	r3, r4, #11
   d97a8:	2b02      	cmp	r3, #2
   d97aa:	d801      	bhi.n	d97b0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d97ac:	2000      	movs	r0, #0
   d97ae:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d97b0:	f000 f890 	bl	d98d4 <_Z19__fetch_global_Wirev>
   d97b4:	f7fe fea1 	bl	d84fa <_ZN7TwoWire9isEnabledEv>
   d97b8:	b108      	cbz	r0, d97be <pinAvailable+0x26>
   d97ba:	2c01      	cmp	r4, #1
   d97bc:	d9f6      	bls.n	d97ac <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d97be:	f7ff fe95 	bl	d94ec <_Z22__fetch_global_Serial1v>
   d97c2:	f7ff fe8f 	bl	d94e4 <_ZN11USARTSerial9isEnabledEv>
   d97c6:	b118      	cbz	r0, d97d0 <pinAvailable+0x38>
   d97c8:	f1a4 0309 	sub.w	r3, r4, #9
   d97cc:	2b01      	cmp	r3, #1
   d97ce:	d9ed      	bls.n	d97ac <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d97d0:	2c23      	cmp	r4, #35	; 0x23
   d97d2:	bf8c      	ite	hi
   d97d4:	2000      	movhi	r0, #0
   d97d6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d97d8:	bd10      	pop	{r4, pc}
   d97da:	bf00      	nop
   d97dc:	2003e704 	.word	0x2003e704

000d97e0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d97e0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d97e2:	b538      	push	{r3, r4, r5, lr}
   d97e4:	4604      	mov	r4, r0
   d97e6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d97e8:	d80a      	bhi.n	d9800 <pinMode+0x20>
   d97ea:	29ff      	cmp	r1, #255	; 0xff
   d97ec:	d008      	beq.n	d9800 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d97ee:	f7ff ffd3 	bl	d9798 <pinAvailable>
   d97f2:	b128      	cbz	r0, d9800 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d97f4:	4629      	mov	r1, r5
   d97f6:	4620      	mov	r0, r4
}
   d97f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d97fc:	f7fe b870 	b.w	d78e0 <HAL_Pin_Mode>
   d9800:	bd38      	pop	{r3, r4, r5, pc}

000d9802 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d9802:	b538      	push	{r3, r4, r5, lr}
   d9804:	4604      	mov	r4, r0
   d9806:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9808:	f7fe f872 	bl	d78f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d980c:	28ff      	cmp	r0, #255	; 0xff
   d980e:	d010      	beq.n	d9832 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9810:	2806      	cmp	r0, #6
   d9812:	d804      	bhi.n	d981e <digitalWrite+0x1c>
   d9814:	234d      	movs	r3, #77	; 0x4d
   d9816:	fa23 f000 	lsr.w	r0, r3, r0
   d981a:	07c3      	lsls	r3, r0, #31
   d981c:	d409      	bmi.n	d9832 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d981e:	4620      	mov	r0, r4
   d9820:	f7ff ffba 	bl	d9798 <pinAvailable>
   d9824:	b128      	cbz	r0, d9832 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d9826:	4629      	mov	r1, r5
   d9828:	4620      	mov	r0, r4
}
   d982a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d982e:	f7fe b867 	b.w	d7900 <HAL_GPIO_Write>
   d9832:	bd38      	pop	{r3, r4, r5, pc}

000d9834 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d9834:	b510      	push	{r4, lr}
   d9836:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9838:	f7fe f85a 	bl	d78f0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d983c:	3804      	subs	r0, #4
   d983e:	b2c0      	uxtb	r0, r0
   d9840:	2801      	cmp	r0, #1
   d9842:	d908      	bls.n	d9856 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d9844:	4620      	mov	r0, r4
   d9846:	f7ff ffa7 	bl	d9798 <pinAvailable>
   d984a:	b120      	cbz	r0, d9856 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d984c:	4620      	mov	r0, r4
}
   d984e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d9852:	f7fe b85d 	b.w	d7910 <HAL_GPIO_Read>
}
   d9856:	2000      	movs	r0, #0
   d9858:	bd10      	pop	{r4, pc}

000d985a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d985a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d985c:	b510      	push	{r4, lr}
   d985e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d9860:	bf9c      	itt	ls
   d9862:	340e      	addls	r4, #14
   d9864:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9866:	4620      	mov	r0, r4
   d9868:	f7ff ff96 	bl	d9798 <pinAvailable>
   d986c:	b150      	cbz	r0, d9884 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d986e:	2103      	movs	r1, #3
   d9870:	4620      	mov	r0, r4
   d9872:	f7fe f82d 	bl	d78d0 <HAL_Validate_Pin_Function>
   d9876:	2803      	cmp	r0, #3
   d9878:	d104      	bne.n	d9884 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d987a:	4620      	mov	r0, r4
}
   d987c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d9880:	f7fe b856 	b.w	d7930 <HAL_ADC_Read>
}
   d9884:	2000      	movs	r0, #0
   d9886:	bd10      	pop	{r4, pc}

000d9888 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d9888:	b538      	push	{r3, r4, r5, lr}
   d988a:	4604      	mov	r4, r0
   d988c:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d988e:	f7ff ff83 	bl	d9798 <pinAvailable>
   d9892:	b1f0      	cbz	r0, d98d2 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d9894:	2104      	movs	r1, #4
   d9896:	4620      	mov	r0, r4
   d9898:	f7fe f81a 	bl	d78d0 <HAL_Validate_Pin_Function>
   d989c:	2804      	cmp	r0, #4
   d989e:	d105      	bne.n	d98ac <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d98a0:	b2a9      	uxth	r1, r5
   d98a2:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d98a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d98a8:	f7fe b83a 	b.w	d7920 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d98ac:	2102      	movs	r1, #2
   d98ae:	4620      	mov	r0, r4
   d98b0:	f7fe f80e 	bl	d78d0 <HAL_Validate_Pin_Function>
   d98b4:	2802      	cmp	r0, #2
   d98b6:	d10c      	bne.n	d98d2 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d98b8:	4620      	mov	r0, r4
   d98ba:	f7fe f819 	bl	d78f0 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d98be:	2801      	cmp	r0, #1
   d98c0:	d001      	beq.n	d98c6 <_Z11analogWritetm+0x3e>
   d98c2:	2804      	cmp	r0, #4
   d98c4:	d105      	bne.n	d98d2 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d98c6:	4629      	mov	r1, r5
   d98c8:	4620      	mov	r0, r4
    }
}
   d98ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d98ce:	f7fe b837 	b.w	d7940 <HAL_PWM_Write_Ext>
   d98d2:	bd38      	pop	{r3, r4, r5, pc}

000d98d4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d98d4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d98d6:	4d0b      	ldr	r5, [pc, #44]	; (d9904 <_Z19__fetch_global_Wirev+0x30>)
   d98d8:	6829      	ldr	r1, [r5, #0]
   d98da:	f011 0401 	ands.w	r4, r1, #1
   d98de:	d10f      	bne.n	d9900 <_Z19__fetch_global_Wirev+0x2c>
   d98e0:	4628      	mov	r0, r5
   d98e2:	f7fa fbe9 	bl	d40b8 <__cxa_guard_acquire>
   d98e6:	b158      	cbz	r0, d9900 <_Z19__fetch_global_Wirev+0x2c>
   d98e8:	4621      	mov	r1, r4
   d98ea:	4807      	ldr	r0, [pc, #28]	; (d9908 <_Z19__fetch_global_Wirev+0x34>)
   d98ec:	f7fe fdd6 	bl	d849c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d98f0:	4628      	mov	r0, r5
   d98f2:	f7fa fbe6 	bl	d40c2 <__cxa_guard_release>
   d98f6:	4a05      	ldr	r2, [pc, #20]	; (d990c <_Z19__fetch_global_Wirev+0x38>)
   d98f8:	4905      	ldr	r1, [pc, #20]	; (d9910 <_Z19__fetch_global_Wirev+0x3c>)
   d98fa:	4803      	ldr	r0, [pc, #12]	; (d9908 <_Z19__fetch_global_Wirev+0x34>)
   d98fc:	f000 f82c 	bl	d9958 <__aeabi_atexit>
	return wire;
}
   d9900:	4801      	ldr	r0, [pc, #4]	; (d9908 <_Z19__fetch_global_Wirev+0x34>)
   d9902:	bd38      	pop	{r3, r4, r5, pc}
   d9904:	2003e6ec 	.word	0x2003e6ec
   d9908:	2003e6f0 	.word	0x2003e6f0
   d990c:	2003dc3c 	.word	0x2003dc3c
   d9910:	000d8445 	.word	0x000d8445

000d9914 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d9914:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d9916:	4c0c      	ldr	r4, [pc, #48]	; (d9948 <_GLOBAL__sub_I_SPI+0x34>)
   d9918:	4e0c      	ldr	r6, [pc, #48]	; (d994c <_GLOBAL__sub_I_SPI+0x38>)
   d991a:	4d0d      	ldr	r5, [pc, #52]	; (d9950 <_GLOBAL__sub_I_SPI+0x3c>)
   d991c:	2100      	movs	r1, #0
   d991e:	4620      	mov	r0, r4
   d9920:	f7ff f898 	bl	d8a54 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9924:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d9926:	4c0b      	ldr	r4, [pc, #44]	; (d9954 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d9928:	4632      	mov	r2, r6
   d992a:	4629      	mov	r1, r5
   d992c:	f000 f814 	bl	d9958 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d9930:	2101      	movs	r1, #1
   d9932:	4620      	mov	r0, r4
   d9934:	f7ff f88e 	bl	d8a54 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9938:	4632      	mov	r2, r6
   d993a:	4629      	mov	r1, r5
   d993c:	4620      	mov	r0, r4
   d993e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9942:	f000 b809 	b.w	d9958 <__aeabi_atexit>
   d9946:	bf00      	nop
   d9948:	2003e704 	.word	0x2003e704
   d994c:	2003dc3c 	.word	0x2003dc3c
   d9950:	000d8a45 	.word	0x000d8a45
   d9954:	2003e714 	.word	0x2003e714

000d9958 <__aeabi_atexit>:
   d9958:	460b      	mov	r3, r1
   d995a:	4601      	mov	r1, r0
   d995c:	4618      	mov	r0, r3
   d995e:	f000 bd87 	b.w	da470 <__cxa_atexit>

000d9962 <_ZdlPvj>:
   d9962:	f7fa bb9a 	b.w	d409a <_ZdlPv>
	...

000d9968 <_ZSt15get_new_handlerv>:
   d9968:	4b02      	ldr	r3, [pc, #8]	; (d9974 <_ZSt15get_new_handlerv+0xc>)
   d996a:	6818      	ldr	r0, [r3, #0]
   d996c:	f3bf 8f5f 	dmb	sy
   d9970:	4770      	bx	lr
   d9972:	bf00      	nop
   d9974:	2003e724 	.word	0x2003e724

000d9978 <_ZnwjRKSt9nothrow_t>:
   d9978:	b510      	push	{r4, lr}
   d997a:	2800      	cmp	r0, #0
   d997c:	bf14      	ite	ne
   d997e:	4604      	movne	r4, r0
   d9980:	2401      	moveq	r4, #1
   d9982:	4620      	mov	r0, r4
   d9984:	f7fe fa08 	bl	d7d98 <malloc>
   d9988:	b920      	cbnz	r0, d9994 <_ZnwjRKSt9nothrow_t+0x1c>
   d998a:	f7ff ffed 	bl	d9968 <_ZSt15get_new_handlerv>
   d998e:	b108      	cbz	r0, d9994 <_ZnwjRKSt9nothrow_t+0x1c>
   d9990:	4780      	blx	r0
   d9992:	e7f6      	b.n	d9982 <_ZnwjRKSt9nothrow_t+0xa>
   d9994:	bd10      	pop	{r4, pc}

000d9996 <_ZSt25__throw_bad_function_callv>:
   d9996:	b508      	push	{r3, lr}
   d9998:	f7fe fa3e 	bl	d7e18 <abort>

000d999c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d999c:	4b24      	ldr	r3, [pc, #144]	; (d9a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d999e:	681a      	ldr	r2, [r3, #0]
   d99a0:	07d0      	lsls	r0, r2, #31
   d99a2:	bf5c      	itt	pl
   d99a4:	2201      	movpl	r2, #1
   d99a6:	601a      	strpl	r2, [r3, #0]
   d99a8:	4b22      	ldr	r3, [pc, #136]	; (d9a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d99aa:	681a      	ldr	r2, [r3, #0]
   d99ac:	07d1      	lsls	r1, r2, #31
   d99ae:	bf5c      	itt	pl
   d99b0:	2201      	movpl	r2, #1
   d99b2:	601a      	strpl	r2, [r3, #0]
   d99b4:	4b20      	ldr	r3, [pc, #128]	; (d9a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d99b6:	681a      	ldr	r2, [r3, #0]
   d99b8:	07d2      	lsls	r2, r2, #31
   d99ba:	bf5c      	itt	pl
   d99bc:	2201      	movpl	r2, #1
   d99be:	601a      	strpl	r2, [r3, #0]
   d99c0:	4b1e      	ldr	r3, [pc, #120]	; (d9a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d99c2:	681a      	ldr	r2, [r3, #0]
   d99c4:	07d0      	lsls	r0, r2, #31
   d99c6:	bf5c      	itt	pl
   d99c8:	2201      	movpl	r2, #1
   d99ca:	601a      	strpl	r2, [r3, #0]
   d99cc:	4b1c      	ldr	r3, [pc, #112]	; (d9a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d99ce:	681a      	ldr	r2, [r3, #0]
   d99d0:	07d1      	lsls	r1, r2, #31
   d99d2:	bf5c      	itt	pl
   d99d4:	2201      	movpl	r2, #1
   d99d6:	601a      	strpl	r2, [r3, #0]
   d99d8:	4b1a      	ldr	r3, [pc, #104]	; (d9a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d99da:	681a      	ldr	r2, [r3, #0]
   d99dc:	07d2      	lsls	r2, r2, #31
   d99de:	bf5c      	itt	pl
   d99e0:	2201      	movpl	r2, #1
   d99e2:	601a      	strpl	r2, [r3, #0]
   d99e4:	4b18      	ldr	r3, [pc, #96]	; (d9a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d99e6:	681a      	ldr	r2, [r3, #0]
   d99e8:	07d0      	lsls	r0, r2, #31
   d99ea:	bf5c      	itt	pl
   d99ec:	2201      	movpl	r2, #1
   d99ee:	601a      	strpl	r2, [r3, #0]
   d99f0:	4b16      	ldr	r3, [pc, #88]	; (d9a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d99f2:	681a      	ldr	r2, [r3, #0]
   d99f4:	07d1      	lsls	r1, r2, #31
   d99f6:	bf5c      	itt	pl
   d99f8:	2201      	movpl	r2, #1
   d99fa:	601a      	strpl	r2, [r3, #0]
   d99fc:	4b14      	ldr	r3, [pc, #80]	; (d9a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d99fe:	681a      	ldr	r2, [r3, #0]
   d9a00:	07d2      	lsls	r2, r2, #31
   d9a02:	bf5c      	itt	pl
   d9a04:	2201      	movpl	r2, #1
   d9a06:	601a      	strpl	r2, [r3, #0]
   d9a08:	4b12      	ldr	r3, [pc, #72]	; (d9a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d9a0a:	681a      	ldr	r2, [r3, #0]
   d9a0c:	07d0      	lsls	r0, r2, #31
   d9a0e:	bf5c      	itt	pl
   d9a10:	2201      	movpl	r2, #1
   d9a12:	601a      	strpl	r2, [r3, #0]
   d9a14:	4b10      	ldr	r3, [pc, #64]	; (d9a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d9a16:	681a      	ldr	r2, [r3, #0]
   d9a18:	07d1      	lsls	r1, r2, #31
   d9a1a:	bf5c      	itt	pl
   d9a1c:	2201      	movpl	r2, #1
   d9a1e:	601a      	strpl	r2, [r3, #0]
   d9a20:	4b0e      	ldr	r3, [pc, #56]	; (d9a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d9a22:	681a      	ldr	r2, [r3, #0]
   d9a24:	07d2      	lsls	r2, r2, #31
   d9a26:	bf5c      	itt	pl
   d9a28:	2201      	movpl	r2, #1
   d9a2a:	601a      	strpl	r2, [r3, #0]
   d9a2c:	4770      	bx	lr
   d9a2e:	bf00      	nop
   d9a30:	2003e754 	.word	0x2003e754
   d9a34:	2003e750 	.word	0x2003e750
   d9a38:	2003e74c 	.word	0x2003e74c
   d9a3c:	2003e748 	.word	0x2003e748
   d9a40:	2003e744 	.word	0x2003e744
   d9a44:	2003e740 	.word	0x2003e740
   d9a48:	2003e73c 	.word	0x2003e73c
   d9a4c:	2003e738 	.word	0x2003e738
   d9a50:	2003e734 	.word	0x2003e734
   d9a54:	2003e730 	.word	0x2003e730
   d9a58:	2003e72c 	.word	0x2003e72c
   d9a5c:	2003e728 	.word	0x2003e728

000d9a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9a60:	4b18      	ldr	r3, [pc, #96]	; (d9ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9a62:	681a      	ldr	r2, [r3, #0]
   d9a64:	07d1      	lsls	r1, r2, #31
   d9a66:	bf5c      	itt	pl
   d9a68:	2201      	movpl	r2, #1
   d9a6a:	601a      	strpl	r2, [r3, #0]
   d9a6c:	4b16      	ldr	r3, [pc, #88]	; (d9ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9a6e:	681a      	ldr	r2, [r3, #0]
   d9a70:	07d2      	lsls	r2, r2, #31
   d9a72:	bf5c      	itt	pl
   d9a74:	2201      	movpl	r2, #1
   d9a76:	601a      	strpl	r2, [r3, #0]
   d9a78:	4b14      	ldr	r3, [pc, #80]	; (d9acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9a7a:	681a      	ldr	r2, [r3, #0]
   d9a7c:	07d0      	lsls	r0, r2, #31
   d9a7e:	bf5c      	itt	pl
   d9a80:	2201      	movpl	r2, #1
   d9a82:	601a      	strpl	r2, [r3, #0]
   d9a84:	4b12      	ldr	r3, [pc, #72]	; (d9ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9a86:	681a      	ldr	r2, [r3, #0]
   d9a88:	07d1      	lsls	r1, r2, #31
   d9a8a:	bf5c      	itt	pl
   d9a8c:	2201      	movpl	r2, #1
   d9a8e:	601a      	strpl	r2, [r3, #0]
   d9a90:	4b10      	ldr	r3, [pc, #64]	; (d9ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9a92:	681a      	ldr	r2, [r3, #0]
   d9a94:	07d2      	lsls	r2, r2, #31
   d9a96:	bf5c      	itt	pl
   d9a98:	2201      	movpl	r2, #1
   d9a9a:	601a      	strpl	r2, [r3, #0]
   d9a9c:	4b0e      	ldr	r3, [pc, #56]	; (d9ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9a9e:	681a      	ldr	r2, [r3, #0]
   d9aa0:	07d0      	lsls	r0, r2, #31
   d9aa2:	bf5c      	itt	pl
   d9aa4:	2201      	movpl	r2, #1
   d9aa6:	601a      	strpl	r2, [r3, #0]
   d9aa8:	4b0c      	ldr	r3, [pc, #48]	; (d9adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9aaa:	681a      	ldr	r2, [r3, #0]
   d9aac:	07d1      	lsls	r1, r2, #31
   d9aae:	bf5c      	itt	pl
   d9ab0:	2201      	movpl	r2, #1
   d9ab2:	601a      	strpl	r2, [r3, #0]
   d9ab4:	4b0a      	ldr	r3, [pc, #40]	; (d9ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9ab6:	681a      	ldr	r2, [r3, #0]
   d9ab8:	07d2      	lsls	r2, r2, #31
   d9aba:	bf5c      	itt	pl
   d9abc:	2201      	movpl	r2, #1
   d9abe:	601a      	strpl	r2, [r3, #0]
   d9ac0:	4770      	bx	lr
   d9ac2:	bf00      	nop
   d9ac4:	2003e774 	.word	0x2003e774
   d9ac8:	2003e770 	.word	0x2003e770
   d9acc:	2003e76c 	.word	0x2003e76c
   d9ad0:	2003e768 	.word	0x2003e768
   d9ad4:	2003e764 	.word	0x2003e764
   d9ad8:	2003e760 	.word	0x2003e760
   d9adc:	2003e75c 	.word	0x2003e75c
   d9ae0:	2003e758 	.word	0x2003e758

000d9ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9ae4:	4b18      	ldr	r3, [pc, #96]	; (d9b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9ae6:	681a      	ldr	r2, [r3, #0]
   d9ae8:	07d1      	lsls	r1, r2, #31
   d9aea:	bf5c      	itt	pl
   d9aec:	2201      	movpl	r2, #1
   d9aee:	601a      	strpl	r2, [r3, #0]
   d9af0:	4b16      	ldr	r3, [pc, #88]	; (d9b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9af2:	681a      	ldr	r2, [r3, #0]
   d9af4:	07d2      	lsls	r2, r2, #31
   d9af6:	bf5c      	itt	pl
   d9af8:	2201      	movpl	r2, #1
   d9afa:	601a      	strpl	r2, [r3, #0]
   d9afc:	4b14      	ldr	r3, [pc, #80]	; (d9b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d9afe:	681a      	ldr	r2, [r3, #0]
   d9b00:	07d0      	lsls	r0, r2, #31
   d9b02:	bf5c      	itt	pl
   d9b04:	2201      	movpl	r2, #1
   d9b06:	601a      	strpl	r2, [r3, #0]
   d9b08:	4b12      	ldr	r3, [pc, #72]	; (d9b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9b0a:	681a      	ldr	r2, [r3, #0]
   d9b0c:	07d1      	lsls	r1, r2, #31
   d9b0e:	bf5c      	itt	pl
   d9b10:	2201      	movpl	r2, #1
   d9b12:	601a      	strpl	r2, [r3, #0]
   d9b14:	4b10      	ldr	r3, [pc, #64]	; (d9b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9b16:	681a      	ldr	r2, [r3, #0]
   d9b18:	07d2      	lsls	r2, r2, #31
   d9b1a:	bf5c      	itt	pl
   d9b1c:	2201      	movpl	r2, #1
   d9b1e:	601a      	strpl	r2, [r3, #0]
   d9b20:	4b0e      	ldr	r3, [pc, #56]	; (d9b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9b22:	681a      	ldr	r2, [r3, #0]
   d9b24:	07d0      	lsls	r0, r2, #31
   d9b26:	bf5c      	itt	pl
   d9b28:	2201      	movpl	r2, #1
   d9b2a:	601a      	strpl	r2, [r3, #0]
   d9b2c:	4b0c      	ldr	r3, [pc, #48]	; (d9b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9b2e:	681a      	ldr	r2, [r3, #0]
   d9b30:	07d1      	lsls	r1, r2, #31
   d9b32:	bf5c      	itt	pl
   d9b34:	2201      	movpl	r2, #1
   d9b36:	601a      	strpl	r2, [r3, #0]
   d9b38:	4b0a      	ldr	r3, [pc, #40]	; (d9b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9b3a:	681a      	ldr	r2, [r3, #0]
   d9b3c:	07d2      	lsls	r2, r2, #31
   d9b3e:	bf5c      	itt	pl
   d9b40:	2201      	movpl	r2, #1
   d9b42:	601a      	strpl	r2, [r3, #0]
   d9b44:	4770      	bx	lr
   d9b46:	bf00      	nop
   d9b48:	2003e794 	.word	0x2003e794
   d9b4c:	2003e790 	.word	0x2003e790
   d9b50:	2003e78c 	.word	0x2003e78c
   d9b54:	2003e788 	.word	0x2003e788
   d9b58:	2003e784 	.word	0x2003e784
   d9b5c:	2003e780 	.word	0x2003e780
   d9b60:	2003e77c 	.word	0x2003e77c
   d9b64:	2003e778 	.word	0x2003e778

000d9b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9b68:	4b24      	ldr	r3, [pc, #144]	; (d9bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d9b6a:	681a      	ldr	r2, [r3, #0]
   d9b6c:	07d0      	lsls	r0, r2, #31
   d9b6e:	bf5c      	itt	pl
   d9b70:	2201      	movpl	r2, #1
   d9b72:	601a      	strpl	r2, [r3, #0]
   d9b74:	4b22      	ldr	r3, [pc, #136]	; (d9c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d9b76:	681a      	ldr	r2, [r3, #0]
   d9b78:	07d1      	lsls	r1, r2, #31
   d9b7a:	bf5c      	itt	pl
   d9b7c:	2201      	movpl	r2, #1
   d9b7e:	601a      	strpl	r2, [r3, #0]
   d9b80:	4b20      	ldr	r3, [pc, #128]	; (d9c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d9b82:	681a      	ldr	r2, [r3, #0]
   d9b84:	07d2      	lsls	r2, r2, #31
   d9b86:	bf5c      	itt	pl
   d9b88:	2201      	movpl	r2, #1
   d9b8a:	601a      	strpl	r2, [r3, #0]
   d9b8c:	4b1e      	ldr	r3, [pc, #120]	; (d9c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d9b8e:	681a      	ldr	r2, [r3, #0]
   d9b90:	07d0      	lsls	r0, r2, #31
   d9b92:	bf5c      	itt	pl
   d9b94:	2201      	movpl	r2, #1
   d9b96:	601a      	strpl	r2, [r3, #0]
   d9b98:	4b1c      	ldr	r3, [pc, #112]	; (d9c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d9b9a:	681a      	ldr	r2, [r3, #0]
   d9b9c:	07d1      	lsls	r1, r2, #31
   d9b9e:	bf5c      	itt	pl
   d9ba0:	2201      	movpl	r2, #1
   d9ba2:	601a      	strpl	r2, [r3, #0]
   d9ba4:	4b1a      	ldr	r3, [pc, #104]	; (d9c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d9ba6:	681a      	ldr	r2, [r3, #0]
   d9ba8:	07d2      	lsls	r2, r2, #31
   d9baa:	bf5c      	itt	pl
   d9bac:	2201      	movpl	r2, #1
   d9bae:	601a      	strpl	r2, [r3, #0]
   d9bb0:	4b18      	ldr	r3, [pc, #96]	; (d9c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d9bb2:	681a      	ldr	r2, [r3, #0]
   d9bb4:	07d0      	lsls	r0, r2, #31
   d9bb6:	bf5c      	itt	pl
   d9bb8:	2201      	movpl	r2, #1
   d9bba:	601a      	strpl	r2, [r3, #0]
   d9bbc:	4b16      	ldr	r3, [pc, #88]	; (d9c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d9bbe:	681a      	ldr	r2, [r3, #0]
   d9bc0:	07d1      	lsls	r1, r2, #31
   d9bc2:	bf5c      	itt	pl
   d9bc4:	2201      	movpl	r2, #1
   d9bc6:	601a      	strpl	r2, [r3, #0]
   d9bc8:	4b14      	ldr	r3, [pc, #80]	; (d9c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d9bca:	681a      	ldr	r2, [r3, #0]
   d9bcc:	07d2      	lsls	r2, r2, #31
   d9bce:	bf5c      	itt	pl
   d9bd0:	2201      	movpl	r2, #1
   d9bd2:	601a      	strpl	r2, [r3, #0]
   d9bd4:	4b12      	ldr	r3, [pc, #72]	; (d9c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d9bd6:	681a      	ldr	r2, [r3, #0]
   d9bd8:	07d0      	lsls	r0, r2, #31
   d9bda:	bf5c      	itt	pl
   d9bdc:	2201      	movpl	r2, #1
   d9bde:	601a      	strpl	r2, [r3, #0]
   d9be0:	4b10      	ldr	r3, [pc, #64]	; (d9c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d9be2:	681a      	ldr	r2, [r3, #0]
   d9be4:	07d1      	lsls	r1, r2, #31
   d9be6:	bf5c      	itt	pl
   d9be8:	2201      	movpl	r2, #1
   d9bea:	601a      	strpl	r2, [r3, #0]
   d9bec:	4b0e      	ldr	r3, [pc, #56]	; (d9c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d9bee:	681a      	ldr	r2, [r3, #0]
   d9bf0:	07d2      	lsls	r2, r2, #31
   d9bf2:	bf5c      	itt	pl
   d9bf4:	2201      	movpl	r2, #1
   d9bf6:	601a      	strpl	r2, [r3, #0]
   d9bf8:	4770      	bx	lr
   d9bfa:	bf00      	nop
   d9bfc:	2003e7c4 	.word	0x2003e7c4
   d9c00:	2003e7c0 	.word	0x2003e7c0
   d9c04:	2003e7bc 	.word	0x2003e7bc
   d9c08:	2003e7b8 	.word	0x2003e7b8
   d9c0c:	2003e7b4 	.word	0x2003e7b4
   d9c10:	2003e7b0 	.word	0x2003e7b0
   d9c14:	2003e7ac 	.word	0x2003e7ac
   d9c18:	2003e7a8 	.word	0x2003e7a8
   d9c1c:	2003e7a4 	.word	0x2003e7a4
   d9c20:	2003e7a0 	.word	0x2003e7a0
   d9c24:	2003e79c 	.word	0x2003e79c
   d9c28:	2003e798 	.word	0x2003e798

000d9c2c <__aeabi_drsub>:
   d9c2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9c30:	e002      	b.n	d9c38 <__adddf3>
   d9c32:	bf00      	nop

000d9c34 <__aeabi_dsub>:
   d9c34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9c38 <__adddf3>:
   d9c38:	b530      	push	{r4, r5, lr}
   d9c3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9c3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d9c42:	ea94 0f05 	teq	r4, r5
   d9c46:	bf08      	it	eq
   d9c48:	ea90 0f02 	teqeq	r0, r2
   d9c4c:	bf1f      	itttt	ne
   d9c4e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d9c52:	ea55 0c02 	orrsne.w	ip, r5, r2
   d9c56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9c5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9c5e:	f000 80e2 	beq.w	d9e26 <__adddf3+0x1ee>
   d9c62:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d9c66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9c6a:	bfb8      	it	lt
   d9c6c:	426d      	neglt	r5, r5
   d9c6e:	dd0c      	ble.n	d9c8a <__adddf3+0x52>
   d9c70:	442c      	add	r4, r5
   d9c72:	ea80 0202 	eor.w	r2, r0, r2
   d9c76:	ea81 0303 	eor.w	r3, r1, r3
   d9c7a:	ea82 0000 	eor.w	r0, r2, r0
   d9c7e:	ea83 0101 	eor.w	r1, r3, r1
   d9c82:	ea80 0202 	eor.w	r2, r0, r2
   d9c86:	ea81 0303 	eor.w	r3, r1, r3
   d9c8a:	2d36      	cmp	r5, #54	; 0x36
   d9c8c:	bf88      	it	hi
   d9c8e:	bd30      	pophi	{r4, r5, pc}
   d9c90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9c94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9c98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9c9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9ca0:	d002      	beq.n	d9ca8 <__adddf3+0x70>
   d9ca2:	4240      	negs	r0, r0
   d9ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9ca8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9cac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9cb0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d9cb4:	d002      	beq.n	d9cbc <__adddf3+0x84>
   d9cb6:	4252      	negs	r2, r2
   d9cb8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9cbc:	ea94 0f05 	teq	r4, r5
   d9cc0:	f000 80a7 	beq.w	d9e12 <__adddf3+0x1da>
   d9cc4:	f1a4 0401 	sub.w	r4, r4, #1
   d9cc8:	f1d5 0e20 	rsbs	lr, r5, #32
   d9ccc:	db0d      	blt.n	d9cea <__adddf3+0xb2>
   d9cce:	fa02 fc0e 	lsl.w	ip, r2, lr
   d9cd2:	fa22 f205 	lsr.w	r2, r2, r5
   d9cd6:	1880      	adds	r0, r0, r2
   d9cd8:	f141 0100 	adc.w	r1, r1, #0
   d9cdc:	fa03 f20e 	lsl.w	r2, r3, lr
   d9ce0:	1880      	adds	r0, r0, r2
   d9ce2:	fa43 f305 	asr.w	r3, r3, r5
   d9ce6:	4159      	adcs	r1, r3
   d9ce8:	e00e      	b.n	d9d08 <__adddf3+0xd0>
   d9cea:	f1a5 0520 	sub.w	r5, r5, #32
   d9cee:	f10e 0e20 	add.w	lr, lr, #32
   d9cf2:	2a01      	cmp	r2, #1
   d9cf4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9cf8:	bf28      	it	cs
   d9cfa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9cfe:	fa43 f305 	asr.w	r3, r3, r5
   d9d02:	18c0      	adds	r0, r0, r3
   d9d04:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9d08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9d0c:	d507      	bpl.n	d9d1e <__adddf3+0xe6>
   d9d0e:	f04f 0e00 	mov.w	lr, #0
   d9d12:	f1dc 0c00 	rsbs	ip, ip, #0
   d9d16:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9d1a:	eb6e 0101 	sbc.w	r1, lr, r1
   d9d1e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d9d22:	d31b      	bcc.n	d9d5c <__adddf3+0x124>
   d9d24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9d28:	d30c      	bcc.n	d9d44 <__adddf3+0x10c>
   d9d2a:	0849      	lsrs	r1, r1, #1
   d9d2c:	ea5f 0030 	movs.w	r0, r0, rrx
   d9d30:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d9d34:	f104 0401 	add.w	r4, r4, #1
   d9d38:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9d3c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9d40:	f080 809a 	bcs.w	d9e78 <__adddf3+0x240>
   d9d44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9d48:	bf08      	it	eq
   d9d4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9d4e:	f150 0000 	adcs.w	r0, r0, #0
   d9d52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9d56:	ea41 0105 	orr.w	r1, r1, r5
   d9d5a:	bd30      	pop	{r4, r5, pc}
   d9d5c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9d60:	4140      	adcs	r0, r0
   d9d62:	eb41 0101 	adc.w	r1, r1, r1
   d9d66:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9d6a:	f1a4 0401 	sub.w	r4, r4, #1
   d9d6e:	d1e9      	bne.n	d9d44 <__adddf3+0x10c>
   d9d70:	f091 0f00 	teq	r1, #0
   d9d74:	bf04      	itt	eq
   d9d76:	4601      	moveq	r1, r0
   d9d78:	2000      	moveq	r0, #0
   d9d7a:	fab1 f381 	clz	r3, r1
   d9d7e:	bf08      	it	eq
   d9d80:	3320      	addeq	r3, #32
   d9d82:	f1a3 030b 	sub.w	r3, r3, #11
   d9d86:	f1b3 0220 	subs.w	r2, r3, #32
   d9d8a:	da0c      	bge.n	d9da6 <__adddf3+0x16e>
   d9d8c:	320c      	adds	r2, #12
   d9d8e:	dd08      	ble.n	d9da2 <__adddf3+0x16a>
   d9d90:	f102 0c14 	add.w	ip, r2, #20
   d9d94:	f1c2 020c 	rsb	r2, r2, #12
   d9d98:	fa01 f00c 	lsl.w	r0, r1, ip
   d9d9c:	fa21 f102 	lsr.w	r1, r1, r2
   d9da0:	e00c      	b.n	d9dbc <__adddf3+0x184>
   d9da2:	f102 0214 	add.w	r2, r2, #20
   d9da6:	bfd8      	it	le
   d9da8:	f1c2 0c20 	rsble	ip, r2, #32
   d9dac:	fa01 f102 	lsl.w	r1, r1, r2
   d9db0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d9db4:	bfdc      	itt	le
   d9db6:	ea41 010c 	orrle.w	r1, r1, ip
   d9dba:	4090      	lslle	r0, r2
   d9dbc:	1ae4      	subs	r4, r4, r3
   d9dbe:	bfa2      	ittt	ge
   d9dc0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d9dc4:	4329      	orrge	r1, r5
   d9dc6:	bd30      	popge	{r4, r5, pc}
   d9dc8:	ea6f 0404 	mvn.w	r4, r4
   d9dcc:	3c1f      	subs	r4, #31
   d9dce:	da1c      	bge.n	d9e0a <__adddf3+0x1d2>
   d9dd0:	340c      	adds	r4, #12
   d9dd2:	dc0e      	bgt.n	d9df2 <__adddf3+0x1ba>
   d9dd4:	f104 0414 	add.w	r4, r4, #20
   d9dd8:	f1c4 0220 	rsb	r2, r4, #32
   d9ddc:	fa20 f004 	lsr.w	r0, r0, r4
   d9de0:	fa01 f302 	lsl.w	r3, r1, r2
   d9de4:	ea40 0003 	orr.w	r0, r0, r3
   d9de8:	fa21 f304 	lsr.w	r3, r1, r4
   d9dec:	ea45 0103 	orr.w	r1, r5, r3
   d9df0:	bd30      	pop	{r4, r5, pc}
   d9df2:	f1c4 040c 	rsb	r4, r4, #12
   d9df6:	f1c4 0220 	rsb	r2, r4, #32
   d9dfa:	fa20 f002 	lsr.w	r0, r0, r2
   d9dfe:	fa01 f304 	lsl.w	r3, r1, r4
   d9e02:	ea40 0003 	orr.w	r0, r0, r3
   d9e06:	4629      	mov	r1, r5
   d9e08:	bd30      	pop	{r4, r5, pc}
   d9e0a:	fa21 f004 	lsr.w	r0, r1, r4
   d9e0e:	4629      	mov	r1, r5
   d9e10:	bd30      	pop	{r4, r5, pc}
   d9e12:	f094 0f00 	teq	r4, #0
   d9e16:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9e1a:	bf06      	itte	eq
   d9e1c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9e20:	3401      	addeq	r4, #1
   d9e22:	3d01      	subne	r5, #1
   d9e24:	e74e      	b.n	d9cc4 <__adddf3+0x8c>
   d9e26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9e2a:	bf18      	it	ne
   d9e2c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9e30:	d029      	beq.n	d9e86 <__adddf3+0x24e>
   d9e32:	ea94 0f05 	teq	r4, r5
   d9e36:	bf08      	it	eq
   d9e38:	ea90 0f02 	teqeq	r0, r2
   d9e3c:	d005      	beq.n	d9e4a <__adddf3+0x212>
   d9e3e:	ea54 0c00 	orrs.w	ip, r4, r0
   d9e42:	bf04      	itt	eq
   d9e44:	4619      	moveq	r1, r3
   d9e46:	4610      	moveq	r0, r2
   d9e48:	bd30      	pop	{r4, r5, pc}
   d9e4a:	ea91 0f03 	teq	r1, r3
   d9e4e:	bf1e      	ittt	ne
   d9e50:	2100      	movne	r1, #0
   d9e52:	2000      	movne	r0, #0
   d9e54:	bd30      	popne	{r4, r5, pc}
   d9e56:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9e5a:	d105      	bne.n	d9e68 <__adddf3+0x230>
   d9e5c:	0040      	lsls	r0, r0, #1
   d9e5e:	4149      	adcs	r1, r1
   d9e60:	bf28      	it	cs
   d9e62:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9e66:	bd30      	pop	{r4, r5, pc}
   d9e68:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9e6c:	bf3c      	itt	cc
   d9e6e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9e72:	bd30      	popcc	{r4, r5, pc}
   d9e74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9e78:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9e7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9e80:	f04f 0000 	mov.w	r0, #0
   d9e84:	bd30      	pop	{r4, r5, pc}
   d9e86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9e8a:	bf1a      	itte	ne
   d9e8c:	4619      	movne	r1, r3
   d9e8e:	4610      	movne	r0, r2
   d9e90:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9e94:	bf1c      	itt	ne
   d9e96:	460b      	movne	r3, r1
   d9e98:	4602      	movne	r2, r0
   d9e9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9e9e:	bf06      	itte	eq
   d9ea0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9ea4:	ea91 0f03 	teqeq	r1, r3
   d9ea8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9eac:	bd30      	pop	{r4, r5, pc}
   d9eae:	bf00      	nop

000d9eb0 <__aeabi_ui2d>:
   d9eb0:	f090 0f00 	teq	r0, #0
   d9eb4:	bf04      	itt	eq
   d9eb6:	2100      	moveq	r1, #0
   d9eb8:	4770      	bxeq	lr
   d9eba:	b530      	push	{r4, r5, lr}
   d9ebc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9ec0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9ec4:	f04f 0500 	mov.w	r5, #0
   d9ec8:	f04f 0100 	mov.w	r1, #0
   d9ecc:	e750      	b.n	d9d70 <__adddf3+0x138>
   d9ece:	bf00      	nop

000d9ed0 <__aeabi_i2d>:
   d9ed0:	f090 0f00 	teq	r0, #0
   d9ed4:	bf04      	itt	eq
   d9ed6:	2100      	moveq	r1, #0
   d9ed8:	4770      	bxeq	lr
   d9eda:	b530      	push	{r4, r5, lr}
   d9edc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9ee0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9ee4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9ee8:	bf48      	it	mi
   d9eea:	4240      	negmi	r0, r0
   d9eec:	f04f 0100 	mov.w	r1, #0
   d9ef0:	e73e      	b.n	d9d70 <__adddf3+0x138>
   d9ef2:	bf00      	nop

000d9ef4 <__aeabi_f2d>:
   d9ef4:	0042      	lsls	r2, r0, #1
   d9ef6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9efa:	ea4f 0131 	mov.w	r1, r1, rrx
   d9efe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9f02:	bf1f      	itttt	ne
   d9f04:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9f08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9f0c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9f10:	4770      	bxne	lr
   d9f12:	f092 0f00 	teq	r2, #0
   d9f16:	bf14      	ite	ne
   d9f18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9f1c:	4770      	bxeq	lr
   d9f1e:	b530      	push	{r4, r5, lr}
   d9f20:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9f24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9f28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9f2c:	e720      	b.n	d9d70 <__adddf3+0x138>
   d9f2e:	bf00      	nop

000d9f30 <__aeabi_ul2d>:
   d9f30:	ea50 0201 	orrs.w	r2, r0, r1
   d9f34:	bf08      	it	eq
   d9f36:	4770      	bxeq	lr
   d9f38:	b530      	push	{r4, r5, lr}
   d9f3a:	f04f 0500 	mov.w	r5, #0
   d9f3e:	e00a      	b.n	d9f56 <__aeabi_l2d+0x16>

000d9f40 <__aeabi_l2d>:
   d9f40:	ea50 0201 	orrs.w	r2, r0, r1
   d9f44:	bf08      	it	eq
   d9f46:	4770      	bxeq	lr
   d9f48:	b530      	push	{r4, r5, lr}
   d9f4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9f4e:	d502      	bpl.n	d9f56 <__aeabi_l2d+0x16>
   d9f50:	4240      	negs	r0, r0
   d9f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9f56:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9f5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9f5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9f62:	f43f aedc 	beq.w	d9d1e <__adddf3+0xe6>
   d9f66:	f04f 0203 	mov.w	r2, #3
   d9f6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9f6e:	bf18      	it	ne
   d9f70:	3203      	addne	r2, #3
   d9f72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9f76:	bf18      	it	ne
   d9f78:	3203      	addne	r2, #3
   d9f7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9f7e:	f1c2 0320 	rsb	r3, r2, #32
   d9f82:	fa00 fc03 	lsl.w	ip, r0, r3
   d9f86:	fa20 f002 	lsr.w	r0, r0, r2
   d9f8a:	fa01 fe03 	lsl.w	lr, r1, r3
   d9f8e:	ea40 000e 	orr.w	r0, r0, lr
   d9f92:	fa21 f102 	lsr.w	r1, r1, r2
   d9f96:	4414      	add	r4, r2
   d9f98:	e6c1      	b.n	d9d1e <__adddf3+0xe6>
   d9f9a:	bf00      	nop

000d9f9c <__aeabi_dmul>:
   d9f9c:	b570      	push	{r4, r5, r6, lr}
   d9f9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9fa2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9fa6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9faa:	bf1d      	ittte	ne
   d9fac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9fb0:	ea94 0f0c 	teqne	r4, ip
   d9fb4:	ea95 0f0c 	teqne	r5, ip
   d9fb8:	f000 f8de 	bleq	da178 <__aeabi_dmul+0x1dc>
   d9fbc:	442c      	add	r4, r5
   d9fbe:	ea81 0603 	eor.w	r6, r1, r3
   d9fc2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9fc6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d9fca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d9fce:	bf18      	it	ne
   d9fd0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9fd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d9fdc:	d038      	beq.n	da050 <__aeabi_dmul+0xb4>
   d9fde:	fba0 ce02 	umull	ip, lr, r0, r2
   d9fe2:	f04f 0500 	mov.w	r5, #0
   d9fe6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d9fea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d9fee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9ff2:	f04f 0600 	mov.w	r6, #0
   d9ff6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d9ffa:	f09c 0f00 	teq	ip, #0
   d9ffe:	bf18      	it	ne
   da000:	f04e 0e01 	orrne.w	lr, lr, #1
   da004:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   da008:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   da00c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   da010:	d204      	bcs.n	da01c <__aeabi_dmul+0x80>
   da012:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   da016:	416d      	adcs	r5, r5
   da018:	eb46 0606 	adc.w	r6, r6, r6
   da01c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   da020:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   da024:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   da028:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   da02c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   da030:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da034:	bf88      	it	hi
   da036:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da03a:	d81e      	bhi.n	da07a <__aeabi_dmul+0xde>
   da03c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   da040:	bf08      	it	eq
   da042:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   da046:	f150 0000 	adcs.w	r0, r0, #0
   da04a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da04e:	bd70      	pop	{r4, r5, r6, pc}
   da050:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   da054:	ea46 0101 	orr.w	r1, r6, r1
   da058:	ea40 0002 	orr.w	r0, r0, r2
   da05c:	ea81 0103 	eor.w	r1, r1, r3
   da060:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   da064:	bfc2      	ittt	gt
   da066:	ebd4 050c 	rsbsgt	r5, r4, ip
   da06a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da06e:	bd70      	popgt	{r4, r5, r6, pc}
   da070:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da074:	f04f 0e00 	mov.w	lr, #0
   da078:	3c01      	subs	r4, #1
   da07a:	f300 80ab 	bgt.w	da1d4 <__aeabi_dmul+0x238>
   da07e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   da082:	bfde      	ittt	le
   da084:	2000      	movle	r0, #0
   da086:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   da08a:	bd70      	pople	{r4, r5, r6, pc}
   da08c:	f1c4 0400 	rsb	r4, r4, #0
   da090:	3c20      	subs	r4, #32
   da092:	da35      	bge.n	da100 <__aeabi_dmul+0x164>
   da094:	340c      	adds	r4, #12
   da096:	dc1b      	bgt.n	da0d0 <__aeabi_dmul+0x134>
   da098:	f104 0414 	add.w	r4, r4, #20
   da09c:	f1c4 0520 	rsb	r5, r4, #32
   da0a0:	fa00 f305 	lsl.w	r3, r0, r5
   da0a4:	fa20 f004 	lsr.w	r0, r0, r4
   da0a8:	fa01 f205 	lsl.w	r2, r1, r5
   da0ac:	ea40 0002 	orr.w	r0, r0, r2
   da0b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   da0b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   da0b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da0bc:	fa21 f604 	lsr.w	r6, r1, r4
   da0c0:	eb42 0106 	adc.w	r1, r2, r6
   da0c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da0c8:	bf08      	it	eq
   da0ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da0ce:	bd70      	pop	{r4, r5, r6, pc}
   da0d0:	f1c4 040c 	rsb	r4, r4, #12
   da0d4:	f1c4 0520 	rsb	r5, r4, #32
   da0d8:	fa00 f304 	lsl.w	r3, r0, r4
   da0dc:	fa20 f005 	lsr.w	r0, r0, r5
   da0e0:	fa01 f204 	lsl.w	r2, r1, r4
   da0e4:	ea40 0002 	orr.w	r0, r0, r2
   da0e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da0ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   da0f0:	f141 0100 	adc.w	r1, r1, #0
   da0f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da0f8:	bf08      	it	eq
   da0fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da0fe:	bd70      	pop	{r4, r5, r6, pc}
   da100:	f1c4 0520 	rsb	r5, r4, #32
   da104:	fa00 f205 	lsl.w	r2, r0, r5
   da108:	ea4e 0e02 	orr.w	lr, lr, r2
   da10c:	fa20 f304 	lsr.w	r3, r0, r4
   da110:	fa01 f205 	lsl.w	r2, r1, r5
   da114:	ea43 0302 	orr.w	r3, r3, r2
   da118:	fa21 f004 	lsr.w	r0, r1, r4
   da11c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da120:	fa21 f204 	lsr.w	r2, r1, r4
   da124:	ea20 0002 	bic.w	r0, r0, r2
   da128:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   da12c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   da130:	bf08      	it	eq
   da132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   da136:	bd70      	pop	{r4, r5, r6, pc}
   da138:	f094 0f00 	teq	r4, #0
   da13c:	d10f      	bne.n	da15e <__aeabi_dmul+0x1c2>
   da13e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   da142:	0040      	lsls	r0, r0, #1
   da144:	eb41 0101 	adc.w	r1, r1, r1
   da148:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da14c:	bf08      	it	eq
   da14e:	3c01      	subeq	r4, #1
   da150:	d0f7      	beq.n	da142 <__aeabi_dmul+0x1a6>
   da152:	ea41 0106 	orr.w	r1, r1, r6
   da156:	f095 0f00 	teq	r5, #0
   da15a:	bf18      	it	ne
   da15c:	4770      	bxne	lr
   da15e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   da162:	0052      	lsls	r2, r2, #1
   da164:	eb43 0303 	adc.w	r3, r3, r3
   da168:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   da16c:	bf08      	it	eq
   da16e:	3d01      	subeq	r5, #1
   da170:	d0f7      	beq.n	da162 <__aeabi_dmul+0x1c6>
   da172:	ea43 0306 	orr.w	r3, r3, r6
   da176:	4770      	bx	lr
   da178:	ea94 0f0c 	teq	r4, ip
   da17c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da180:	bf18      	it	ne
   da182:	ea95 0f0c 	teqne	r5, ip
   da186:	d00c      	beq.n	da1a2 <__aeabi_dmul+0x206>
   da188:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da18c:	bf18      	it	ne
   da18e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da192:	d1d1      	bne.n	da138 <__aeabi_dmul+0x19c>
   da194:	ea81 0103 	eor.w	r1, r1, r3
   da198:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da19c:	f04f 0000 	mov.w	r0, #0
   da1a0:	bd70      	pop	{r4, r5, r6, pc}
   da1a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da1a6:	bf06      	itte	eq
   da1a8:	4610      	moveq	r0, r2
   da1aa:	4619      	moveq	r1, r3
   da1ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da1b0:	d019      	beq.n	da1e6 <__aeabi_dmul+0x24a>
   da1b2:	ea94 0f0c 	teq	r4, ip
   da1b6:	d102      	bne.n	da1be <__aeabi_dmul+0x222>
   da1b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   da1bc:	d113      	bne.n	da1e6 <__aeabi_dmul+0x24a>
   da1be:	ea95 0f0c 	teq	r5, ip
   da1c2:	d105      	bne.n	da1d0 <__aeabi_dmul+0x234>
   da1c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   da1c8:	bf1c      	itt	ne
   da1ca:	4610      	movne	r0, r2
   da1cc:	4619      	movne	r1, r3
   da1ce:	d10a      	bne.n	da1e6 <__aeabi_dmul+0x24a>
   da1d0:	ea81 0103 	eor.w	r1, r1, r3
   da1d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   da1d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da1dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   da1e0:	f04f 0000 	mov.w	r0, #0
   da1e4:	bd70      	pop	{r4, r5, r6, pc}
   da1e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   da1ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   da1ee:	bd70      	pop	{r4, r5, r6, pc}

000da1f0 <__aeabi_ddiv>:
   da1f0:	b570      	push	{r4, r5, r6, lr}
   da1f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   da1f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   da1fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   da1fe:	bf1d      	ittte	ne
   da200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   da204:	ea94 0f0c 	teqne	r4, ip
   da208:	ea95 0f0c 	teqne	r5, ip
   da20c:	f000 f8a7 	bleq	da35e <__aeabi_ddiv+0x16e>
   da210:	eba4 0405 	sub.w	r4, r4, r5
   da214:	ea81 0e03 	eor.w	lr, r1, r3
   da218:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da21c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da220:	f000 8088 	beq.w	da334 <__aeabi_ddiv+0x144>
   da224:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da228:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   da22c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   da230:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   da234:	ea4f 2202 	mov.w	r2, r2, lsl #8
   da238:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   da23c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   da240:	ea4f 2600 	mov.w	r6, r0, lsl #8
   da244:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   da248:	429d      	cmp	r5, r3
   da24a:	bf08      	it	eq
   da24c:	4296      	cmpeq	r6, r2
   da24e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   da252:	f504 7440 	add.w	r4, r4, #768	; 0x300
   da256:	d202      	bcs.n	da25e <__aeabi_ddiv+0x6e>
   da258:	085b      	lsrs	r3, r3, #1
   da25a:	ea4f 0232 	mov.w	r2, r2, rrx
   da25e:	1ab6      	subs	r6, r6, r2
   da260:	eb65 0503 	sbc.w	r5, r5, r3
   da264:	085b      	lsrs	r3, r3, #1
   da266:	ea4f 0232 	mov.w	r2, r2, rrx
   da26a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   da26e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   da272:	ebb6 0e02 	subs.w	lr, r6, r2
   da276:	eb75 0e03 	sbcs.w	lr, r5, r3
   da27a:	bf22      	ittt	cs
   da27c:	1ab6      	subcs	r6, r6, r2
   da27e:	4675      	movcs	r5, lr
   da280:	ea40 000c 	orrcs.w	r0, r0, ip
   da284:	085b      	lsrs	r3, r3, #1
   da286:	ea4f 0232 	mov.w	r2, r2, rrx
   da28a:	ebb6 0e02 	subs.w	lr, r6, r2
   da28e:	eb75 0e03 	sbcs.w	lr, r5, r3
   da292:	bf22      	ittt	cs
   da294:	1ab6      	subcs	r6, r6, r2
   da296:	4675      	movcs	r5, lr
   da298:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   da29c:	085b      	lsrs	r3, r3, #1
   da29e:	ea4f 0232 	mov.w	r2, r2, rrx
   da2a2:	ebb6 0e02 	subs.w	lr, r6, r2
   da2a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   da2aa:	bf22      	ittt	cs
   da2ac:	1ab6      	subcs	r6, r6, r2
   da2ae:	4675      	movcs	r5, lr
   da2b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   da2b4:	085b      	lsrs	r3, r3, #1
   da2b6:	ea4f 0232 	mov.w	r2, r2, rrx
   da2ba:	ebb6 0e02 	subs.w	lr, r6, r2
   da2be:	eb75 0e03 	sbcs.w	lr, r5, r3
   da2c2:	bf22      	ittt	cs
   da2c4:	1ab6      	subcs	r6, r6, r2
   da2c6:	4675      	movcs	r5, lr
   da2c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   da2cc:	ea55 0e06 	orrs.w	lr, r5, r6
   da2d0:	d018      	beq.n	da304 <__aeabi_ddiv+0x114>
   da2d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   da2d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   da2da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   da2de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   da2e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   da2e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   da2ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   da2ee:	d1c0      	bne.n	da272 <__aeabi_ddiv+0x82>
   da2f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da2f4:	d10b      	bne.n	da30e <__aeabi_ddiv+0x11e>
   da2f6:	ea41 0100 	orr.w	r1, r1, r0
   da2fa:	f04f 0000 	mov.w	r0, #0
   da2fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   da302:	e7b6      	b.n	da272 <__aeabi_ddiv+0x82>
   da304:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   da308:	bf04      	itt	eq
   da30a:	4301      	orreq	r1, r0
   da30c:	2000      	moveq	r0, #0
   da30e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   da312:	bf88      	it	hi
   da314:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   da318:	f63f aeaf 	bhi.w	da07a <__aeabi_dmul+0xde>
   da31c:	ebb5 0c03 	subs.w	ip, r5, r3
   da320:	bf04      	itt	eq
   da322:	ebb6 0c02 	subseq.w	ip, r6, r2
   da326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da32a:	f150 0000 	adcs.w	r0, r0, #0
   da32e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da332:	bd70      	pop	{r4, r5, r6, pc}
   da334:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   da338:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   da33c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   da340:	bfc2      	ittt	gt
   da342:	ebd4 050c 	rsbsgt	r5, r4, ip
   da346:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   da34a:	bd70      	popgt	{r4, r5, r6, pc}
   da34c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da350:	f04f 0e00 	mov.w	lr, #0
   da354:	3c01      	subs	r4, #1
   da356:	e690      	b.n	da07a <__aeabi_dmul+0xde>
   da358:	ea45 0e06 	orr.w	lr, r5, r6
   da35c:	e68d      	b.n	da07a <__aeabi_dmul+0xde>
   da35e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   da362:	ea94 0f0c 	teq	r4, ip
   da366:	bf08      	it	eq
   da368:	ea95 0f0c 	teqeq	r5, ip
   da36c:	f43f af3b 	beq.w	da1e6 <__aeabi_dmul+0x24a>
   da370:	ea94 0f0c 	teq	r4, ip
   da374:	d10a      	bne.n	da38c <__aeabi_ddiv+0x19c>
   da376:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   da37a:	f47f af34 	bne.w	da1e6 <__aeabi_dmul+0x24a>
   da37e:	ea95 0f0c 	teq	r5, ip
   da382:	f47f af25 	bne.w	da1d0 <__aeabi_dmul+0x234>
   da386:	4610      	mov	r0, r2
   da388:	4619      	mov	r1, r3
   da38a:	e72c      	b.n	da1e6 <__aeabi_dmul+0x24a>
   da38c:	ea95 0f0c 	teq	r5, ip
   da390:	d106      	bne.n	da3a0 <__aeabi_ddiv+0x1b0>
   da392:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   da396:	f43f aefd 	beq.w	da194 <__aeabi_dmul+0x1f8>
   da39a:	4610      	mov	r0, r2
   da39c:	4619      	mov	r1, r3
   da39e:	e722      	b.n	da1e6 <__aeabi_dmul+0x24a>
   da3a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   da3a4:	bf18      	it	ne
   da3a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   da3aa:	f47f aec5 	bne.w	da138 <__aeabi_dmul+0x19c>
   da3ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   da3b2:	f47f af0d 	bne.w	da1d0 <__aeabi_dmul+0x234>
   da3b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   da3ba:	f47f aeeb 	bne.w	da194 <__aeabi_dmul+0x1f8>
   da3be:	e712      	b.n	da1e6 <__aeabi_dmul+0x24a>

000da3c0 <__aeabi_d2f>:
   da3c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   da3c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   da3c8:	bf24      	itt	cs
   da3ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   da3ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   da3d2:	d90d      	bls.n	da3f0 <__aeabi_d2f+0x30>
   da3d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   da3d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   da3dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   da3e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   da3e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   da3e8:	bf08      	it	eq
   da3ea:	f020 0001 	biceq.w	r0, r0, #1
   da3ee:	4770      	bx	lr
   da3f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   da3f4:	d121      	bne.n	da43a <__aeabi_d2f+0x7a>
   da3f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   da3fa:	bfbc      	itt	lt
   da3fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   da400:	4770      	bxlt	lr
   da402:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   da406:	ea4f 5252 	mov.w	r2, r2, lsr #21
   da40a:	f1c2 0218 	rsb	r2, r2, #24
   da40e:	f1c2 0c20 	rsb	ip, r2, #32
   da412:	fa10 f30c 	lsls.w	r3, r0, ip
   da416:	fa20 f002 	lsr.w	r0, r0, r2
   da41a:	bf18      	it	ne
   da41c:	f040 0001 	orrne.w	r0, r0, #1
   da420:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   da424:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   da428:	fa03 fc0c 	lsl.w	ip, r3, ip
   da42c:	ea40 000c 	orr.w	r0, r0, ip
   da430:	fa23 f302 	lsr.w	r3, r3, r2
   da434:	ea4f 0343 	mov.w	r3, r3, lsl #1
   da438:	e7cc      	b.n	da3d4 <__aeabi_d2f+0x14>
   da43a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   da43e:	d107      	bne.n	da450 <__aeabi_d2f+0x90>
   da440:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   da444:	bf1e      	ittt	ne
   da446:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   da44a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   da44e:	4770      	bxne	lr
   da450:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   da454:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   da458:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   da45c:	4770      	bx	lr
   da45e:	bf00      	nop

000da460 <atoi>:
   da460:	220a      	movs	r2, #10
   da462:	2100      	movs	r1, #0
   da464:	f000 ba2a 	b.w	da8bc <strtol>

000da468 <atol>:
   da468:	220a      	movs	r2, #10
   da46a:	2100      	movs	r1, #0
   da46c:	f000 ba26 	b.w	da8bc <strtol>

000da470 <__cxa_atexit>:
   da470:	b510      	push	{r4, lr}
   da472:	4c05      	ldr	r4, [pc, #20]	; (da488 <__cxa_atexit+0x18>)
   da474:	4613      	mov	r3, r2
   da476:	b12c      	cbz	r4, da484 <__cxa_atexit+0x14>
   da478:	460a      	mov	r2, r1
   da47a:	4601      	mov	r1, r0
   da47c:	2002      	movs	r0, #2
   da47e:	f3af 8000 	nop.w
   da482:	bd10      	pop	{r4, pc}
   da484:	4620      	mov	r0, r4
   da486:	bd10      	pop	{r4, pc}
   da488:	00000000 	.word	0x00000000

000da48c <localtime>:
   da48c:	b538      	push	{r3, r4, r5, lr}
   da48e:	4b07      	ldr	r3, [pc, #28]	; (da4ac <localtime+0x20>)
   da490:	681c      	ldr	r4, [r3, #0]
   da492:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da494:	4605      	mov	r5, r0
   da496:	b91b      	cbnz	r3, da4a0 <localtime+0x14>
   da498:	2024      	movs	r0, #36	; 0x24
   da49a:	f7fd fc7d 	bl	d7d98 <malloc>
   da49e:	63e0      	str	r0, [r4, #60]	; 0x3c
   da4a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   da4a2:	4628      	mov	r0, r5
   da4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da4a8:	f000 b802 	b.w	da4b0 <localtime_r>
   da4ac:	2003dbec 	.word	0x2003dbec

000da4b0 <localtime_r>:
   da4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da4b4:	460c      	mov	r4, r1
   da4b6:	4680      	mov	r8, r0
   da4b8:	f000 fd06 	bl	daec8 <__gettzinfo>
   da4bc:	4621      	mov	r1, r4
   da4be:	4607      	mov	r7, r0
   da4c0:	4640      	mov	r0, r8
   da4c2:	f000 fd05 	bl	daed0 <gmtime_r>
   da4c6:	6946      	ldr	r6, [r0, #20]
   da4c8:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   da4cc:	07b3      	lsls	r3, r6, #30
   da4ce:	4604      	mov	r4, r0
   da4d0:	d105      	bne.n	da4de <localtime_r+0x2e>
   da4d2:	2264      	movs	r2, #100	; 0x64
   da4d4:	fb96 f3f2 	sdiv	r3, r6, r2
   da4d8:	fb02 6313 	mls	r3, r2, r3, r6
   da4dc:	b94b      	cbnz	r3, da4f2 <localtime_r+0x42>
   da4de:	f44f 75c8 	mov.w	r5, #400	; 0x190
   da4e2:	fb96 f3f5 	sdiv	r3, r6, r5
   da4e6:	fb05 6513 	mls	r5, r5, r3, r6
   da4ea:	fab5 f385 	clz	r3, r5
   da4ee:	095b      	lsrs	r3, r3, #5
   da4f0:	e000      	b.n	da4f4 <localtime_r+0x44>
   da4f2:	2301      	movs	r3, #1
   da4f4:	4a5f      	ldr	r2, [pc, #380]	; (da674 <localtime_r+0x1c4>)
   da4f6:	2530      	movs	r5, #48	; 0x30
   da4f8:	fb05 2503 	mla	r5, r5, r3, r2
   da4fc:	f000 fb18 	bl	dab30 <__tz_lock>
   da500:	f000 fb18 	bl	dab34 <_tzset_unlocked>
   da504:	4b5c      	ldr	r3, [pc, #368]	; (da678 <localtime_r+0x1c8>)
   da506:	681b      	ldr	r3, [r3, #0]
   da508:	b1f3      	cbz	r3, da548 <localtime_r+0x98>
   da50a:	687b      	ldr	r3, [r7, #4]
   da50c:	429e      	cmp	r6, r3
   da50e:	d105      	bne.n	da51c <localtime_r+0x6c>
   da510:	6839      	ldr	r1, [r7, #0]
   da512:	f8d8 3000 	ldr.w	r3, [r8]
   da516:	69fa      	ldr	r2, [r7, #28]
   da518:	b941      	cbnz	r1, da52c <localtime_r+0x7c>
   da51a:	e00a      	b.n	da532 <localtime_r+0x82>
   da51c:	4630      	mov	r0, r6
   da51e:	f000 fa5f 	bl	da9e0 <__tzcalc_limits>
   da522:	2800      	cmp	r0, #0
   da524:	d1f4      	bne.n	da510 <localtime_r+0x60>
   da526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da52a:	e00d      	b.n	da548 <localtime_r+0x98>
   da52c:	4293      	cmp	r3, r2
   da52e:	db08      	blt.n	da542 <localtime_r+0x92>
   da530:	e001      	b.n	da536 <localtime_r+0x86>
   da532:	4293      	cmp	r3, r2
   da534:	da07      	bge.n	da546 <localtime_r+0x96>
   da536:	6bba      	ldr	r2, [r7, #56]	; 0x38
   da538:	4293      	cmp	r3, r2
   da53a:	bfac      	ite	ge
   da53c:	2300      	movge	r3, #0
   da53e:	2301      	movlt	r3, #1
   da540:	e002      	b.n	da548 <localtime_r+0x98>
   da542:	2300      	movs	r3, #0
   da544:	e000      	b.n	da548 <localtime_r+0x98>
   da546:	2301      	movs	r3, #1
   da548:	6223      	str	r3, [r4, #32]
   da54a:	6a23      	ldr	r3, [r4, #32]
   da54c:	2b01      	cmp	r3, #1
   da54e:	bf0c      	ite	eq
   da550:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   da552:	6a39      	ldrne	r1, [r7, #32]
   da554:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da558:	203c      	movs	r0, #60	; 0x3c
   da55a:	fb91 f6f3 	sdiv	r6, r1, r3
   da55e:	fb03 1316 	mls	r3, r3, r6, r1
   da562:	6861      	ldr	r1, [r4, #4]
   da564:	fb93 f2f0 	sdiv	r2, r3, r0
   da568:	fb00 3012 	mls	r0, r0, r2, r3
   da56c:	6823      	ldr	r3, [r4, #0]
   da56e:	1a89      	subs	r1, r1, r2
   da570:	68a2      	ldr	r2, [r4, #8]
   da572:	6061      	str	r1, [r4, #4]
   da574:	1a1b      	subs	r3, r3, r0
   da576:	1b92      	subs	r2, r2, r6
   da578:	2b3b      	cmp	r3, #59	; 0x3b
   da57a:	6023      	str	r3, [r4, #0]
   da57c:	60a2      	str	r2, [r4, #8]
   da57e:	dd03      	ble.n	da588 <localtime_r+0xd8>
   da580:	3101      	adds	r1, #1
   da582:	6061      	str	r1, [r4, #4]
   da584:	3b3c      	subs	r3, #60	; 0x3c
   da586:	e004      	b.n	da592 <localtime_r+0xe2>
   da588:	2b00      	cmp	r3, #0
   da58a:	da03      	bge.n	da594 <localtime_r+0xe4>
   da58c:	3901      	subs	r1, #1
   da58e:	6061      	str	r1, [r4, #4]
   da590:	333c      	adds	r3, #60	; 0x3c
   da592:	6023      	str	r3, [r4, #0]
   da594:	6863      	ldr	r3, [r4, #4]
   da596:	2b3b      	cmp	r3, #59	; 0x3b
   da598:	dd03      	ble.n	da5a2 <localtime_r+0xf2>
   da59a:	3201      	adds	r2, #1
   da59c:	60a2      	str	r2, [r4, #8]
   da59e:	3b3c      	subs	r3, #60	; 0x3c
   da5a0:	e004      	b.n	da5ac <localtime_r+0xfc>
   da5a2:	2b00      	cmp	r3, #0
   da5a4:	da03      	bge.n	da5ae <localtime_r+0xfe>
   da5a6:	3a01      	subs	r2, #1
   da5a8:	60a2      	str	r2, [r4, #8]
   da5aa:	333c      	adds	r3, #60	; 0x3c
   da5ac:	6063      	str	r3, [r4, #4]
   da5ae:	68a3      	ldr	r3, [r4, #8]
   da5b0:	2b17      	cmp	r3, #23
   da5b2:	dd22      	ble.n	da5fa <localtime_r+0x14a>
   da5b4:	69e2      	ldr	r2, [r4, #28]
   da5b6:	3201      	adds	r2, #1
   da5b8:	61e2      	str	r2, [r4, #28]
   da5ba:	69a2      	ldr	r2, [r4, #24]
   da5bc:	3201      	adds	r2, #1
   da5be:	2a06      	cmp	r2, #6
   da5c0:	bfc8      	it	gt
   da5c2:	2200      	movgt	r2, #0
   da5c4:	61a2      	str	r2, [r4, #24]
   da5c6:	68e2      	ldr	r2, [r4, #12]
   da5c8:	3b18      	subs	r3, #24
   da5ca:	3201      	adds	r2, #1
   da5cc:	60a3      	str	r3, [r4, #8]
   da5ce:	6923      	ldr	r3, [r4, #16]
   da5d0:	60e2      	str	r2, [r4, #12]
   da5d2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   da5d6:	428a      	cmp	r2, r1
   da5d8:	dd46      	ble.n	da668 <localtime_r+0x1b8>
   da5da:	3301      	adds	r3, #1
   da5dc:	2b0c      	cmp	r3, #12
   da5de:	bf0c      	ite	eq
   da5e0:	6963      	ldreq	r3, [r4, #20]
   da5e2:	6123      	strne	r3, [r4, #16]
   da5e4:	eba2 0201 	sub.w	r2, r2, r1
   da5e8:	60e2      	str	r2, [r4, #12]
   da5ea:	bf01      	itttt	eq
   da5ec:	3301      	addeq	r3, #1
   da5ee:	2200      	moveq	r2, #0
   da5f0:	6122      	streq	r2, [r4, #16]
   da5f2:	6163      	streq	r3, [r4, #20]
   da5f4:	bf08      	it	eq
   da5f6:	61e2      	streq	r2, [r4, #28]
   da5f8:	e036      	b.n	da668 <localtime_r+0x1b8>
   da5fa:	2b00      	cmp	r3, #0
   da5fc:	da34      	bge.n	da668 <localtime_r+0x1b8>
   da5fe:	69e2      	ldr	r2, [r4, #28]
   da600:	3a01      	subs	r2, #1
   da602:	61e2      	str	r2, [r4, #28]
   da604:	69a2      	ldr	r2, [r4, #24]
   da606:	3a01      	subs	r2, #1
   da608:	bf48      	it	mi
   da60a:	2206      	movmi	r2, #6
   da60c:	61a2      	str	r2, [r4, #24]
   da60e:	68e2      	ldr	r2, [r4, #12]
   da610:	3318      	adds	r3, #24
   da612:	3a01      	subs	r2, #1
   da614:	60e2      	str	r2, [r4, #12]
   da616:	60a3      	str	r3, [r4, #8]
   da618:	bb32      	cbnz	r2, da668 <localtime_r+0x1b8>
   da61a:	6923      	ldr	r3, [r4, #16]
   da61c:	3b01      	subs	r3, #1
   da61e:	d401      	bmi.n	da624 <localtime_r+0x174>
   da620:	6123      	str	r3, [r4, #16]
   da622:	e01d      	b.n	da660 <localtime_r+0x1b0>
   da624:	230b      	movs	r3, #11
   da626:	6123      	str	r3, [r4, #16]
   da628:	6963      	ldr	r3, [r4, #20]
   da62a:	1e5a      	subs	r2, r3, #1
   da62c:	f012 0f03 	tst.w	r2, #3
   da630:	6162      	str	r2, [r4, #20]
   da632:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   da636:	d105      	bne.n	da644 <localtime_r+0x194>
   da638:	2164      	movs	r1, #100	; 0x64
   da63a:	fb93 f2f1 	sdiv	r2, r3, r1
   da63e:	fb01 3212 	mls	r2, r1, r2, r3
   da642:	b94a      	cbnz	r2, da658 <localtime_r+0x1a8>
   da644:	f44f 71c8 	mov.w	r1, #400	; 0x190
   da648:	fb93 f2f1 	sdiv	r2, r3, r1
   da64c:	fb01 3312 	mls	r3, r1, r2, r3
   da650:	fab3 f383 	clz	r3, r3
   da654:	095b      	lsrs	r3, r3, #5
   da656:	e000      	b.n	da65a <localtime_r+0x1aa>
   da658:	2301      	movs	r3, #1
   da65a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   da65e:	61e3      	str	r3, [r4, #28]
   da660:	6923      	ldr	r3, [r4, #16]
   da662:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   da666:	60e3      	str	r3, [r4, #12]
   da668:	f000 fa63 	bl	dab32 <__tz_unlock>
   da66c:	4620      	mov	r0, r4
   da66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   da672:	bf00      	nop
   da674:	000dc0ec 	.word	0x000dc0ec
   da678:	2003e7e4 	.word	0x2003e7e4

000da67c <memcpy>:
   da67c:	b510      	push	{r4, lr}
   da67e:	1e43      	subs	r3, r0, #1
   da680:	440a      	add	r2, r1
   da682:	4291      	cmp	r1, r2
   da684:	d004      	beq.n	da690 <memcpy+0x14>
   da686:	f811 4b01 	ldrb.w	r4, [r1], #1
   da68a:	f803 4f01 	strb.w	r4, [r3, #1]!
   da68e:	e7f8      	b.n	da682 <memcpy+0x6>
   da690:	bd10      	pop	{r4, pc}

000da692 <memset>:
   da692:	4402      	add	r2, r0
   da694:	4603      	mov	r3, r0
   da696:	4293      	cmp	r3, r2
   da698:	d002      	beq.n	da6a0 <memset+0xe>
   da69a:	f803 1b01 	strb.w	r1, [r3], #1
   da69e:	e7fa      	b.n	da696 <memset+0x4>
   da6a0:	4770      	bx	lr
	...

000da6a4 <srand>:
   da6a4:	b538      	push	{r3, r4, r5, lr}
   da6a6:	4b12      	ldr	r3, [pc, #72]	; (da6f0 <srand+0x4c>)
   da6a8:	681c      	ldr	r4, [r3, #0]
   da6aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da6ac:	4605      	mov	r5, r0
   da6ae:	b9d3      	cbnz	r3, da6e6 <srand+0x42>
   da6b0:	2018      	movs	r0, #24
   da6b2:	f7fd fb71 	bl	d7d98 <malloc>
   da6b6:	f243 330e 	movw	r3, #13070	; 0x330e
   da6ba:	63a0      	str	r0, [r4, #56]	; 0x38
   da6bc:	8003      	strh	r3, [r0, #0]
   da6be:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   da6c2:	8043      	strh	r3, [r0, #2]
   da6c4:	f241 2334 	movw	r3, #4660	; 0x1234
   da6c8:	8083      	strh	r3, [r0, #4]
   da6ca:	f24e 636d 	movw	r3, #58989	; 0xe66d
   da6ce:	80c3      	strh	r3, [r0, #6]
   da6d0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   da6d4:	8103      	strh	r3, [r0, #8]
   da6d6:	2305      	movs	r3, #5
   da6d8:	8143      	strh	r3, [r0, #10]
   da6da:	230b      	movs	r3, #11
   da6dc:	8183      	strh	r3, [r0, #12]
   da6de:	2201      	movs	r2, #1
   da6e0:	2300      	movs	r3, #0
   da6e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da6e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   da6e8:	2200      	movs	r2, #0
   da6ea:	611d      	str	r5, [r3, #16]
   da6ec:	615a      	str	r2, [r3, #20]
   da6ee:	bd38      	pop	{r3, r4, r5, pc}
   da6f0:	2003dbec 	.word	0x2003dbec

000da6f4 <strcmp>:
   da6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   da6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
   da6fc:	2a01      	cmp	r2, #1
   da6fe:	bf28      	it	cs
   da700:	429a      	cmpcs	r2, r3
   da702:	d0f7      	beq.n	da6f4 <strcmp>
   da704:	1ad0      	subs	r0, r2, r3
   da706:	4770      	bx	lr

000da708 <strcpy>:
   da708:	4603      	mov	r3, r0
   da70a:	f811 2b01 	ldrb.w	r2, [r1], #1
   da70e:	f803 2b01 	strb.w	r2, [r3], #1
   da712:	2a00      	cmp	r2, #0
   da714:	d1f9      	bne.n	da70a <strcpy+0x2>
   da716:	4770      	bx	lr

000da718 <strdup>:
   da718:	4b02      	ldr	r3, [pc, #8]	; (da724 <strdup+0xc>)
   da71a:	4601      	mov	r1, r0
   da71c:	6818      	ldr	r0, [r3, #0]
   da71e:	f000 b803 	b.w	da728 <_strdup_r>
   da722:	bf00      	nop
   da724:	2003dbec 	.word	0x2003dbec

000da728 <_strdup_r>:
   da728:	b570      	push	{r4, r5, r6, lr}
   da72a:	4606      	mov	r6, r0
   da72c:	4608      	mov	r0, r1
   da72e:	460c      	mov	r4, r1
   da730:	f000 f80d 	bl	da74e <strlen>
   da734:	1c45      	adds	r5, r0, #1
   da736:	4629      	mov	r1, r5
   da738:	4630      	mov	r0, r6
   da73a:	f7fd fb75 	bl	d7e28 <_malloc_r>
   da73e:	4606      	mov	r6, r0
   da740:	b118      	cbz	r0, da74a <_strdup_r+0x22>
   da742:	462a      	mov	r2, r5
   da744:	4621      	mov	r1, r4
   da746:	f7ff ff99 	bl	da67c <memcpy>
   da74a:	4630      	mov	r0, r6
   da74c:	bd70      	pop	{r4, r5, r6, pc}

000da74e <strlen>:
   da74e:	4603      	mov	r3, r0
   da750:	f813 2b01 	ldrb.w	r2, [r3], #1
   da754:	2a00      	cmp	r2, #0
   da756:	d1fb      	bne.n	da750 <strlen+0x2>
   da758:	1a18      	subs	r0, r3, r0
   da75a:	3801      	subs	r0, #1
   da75c:	4770      	bx	lr

000da75e <strncmp>:
   da75e:	b530      	push	{r4, r5, lr}
   da760:	b182      	cbz	r2, da784 <strncmp+0x26>
   da762:	1e45      	subs	r5, r0, #1
   da764:	3901      	subs	r1, #1
   da766:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   da76a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da76e:	42a3      	cmp	r3, r4
   da770:	d106      	bne.n	da780 <strncmp+0x22>
   da772:	43ec      	mvns	r4, r5
   da774:	4414      	add	r4, r2
   da776:	42e0      	cmn	r0, r4
   da778:	d001      	beq.n	da77e <strncmp+0x20>
   da77a:	2b00      	cmp	r3, #0
   da77c:	d1f3      	bne.n	da766 <strncmp+0x8>
   da77e:	461c      	mov	r4, r3
   da780:	1b18      	subs	r0, r3, r4
   da782:	bd30      	pop	{r4, r5, pc}
   da784:	4610      	mov	r0, r2
   da786:	bd30      	pop	{r4, r5, pc}

000da788 <strncpy>:
   da788:	b510      	push	{r4, lr}
   da78a:	4603      	mov	r3, r0
   da78c:	b142      	cbz	r2, da7a0 <strncpy+0x18>
   da78e:	f811 4b01 	ldrb.w	r4, [r1], #1
   da792:	f803 4b01 	strb.w	r4, [r3], #1
   da796:	3a01      	subs	r2, #1
   da798:	2c00      	cmp	r4, #0
   da79a:	d1f7      	bne.n	da78c <strncpy+0x4>
   da79c:	441a      	add	r2, r3
   da79e:	e000      	b.n	da7a2 <strncpy+0x1a>
   da7a0:	bd10      	pop	{r4, pc}
   da7a2:	4293      	cmp	r3, r2
   da7a4:	d002      	beq.n	da7ac <strncpy+0x24>
   da7a6:	f803 4b01 	strb.w	r4, [r3], #1
   da7aa:	e7fa      	b.n	da7a2 <strncpy+0x1a>
   da7ac:	bd10      	pop	{r4, pc}
	...

000da7b0 <_strtol_r>:
   da7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da7b4:	4680      	mov	r8, r0
   da7b6:	4840      	ldr	r0, [pc, #256]	; (da8b8 <_strtol_r+0x108>)
   da7b8:	f8d0 9000 	ldr.w	r9, [r0]
   da7bc:	460f      	mov	r7, r1
   da7be:	463d      	mov	r5, r7
   da7c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   da7c4:	eb09 0004 	add.w	r0, r9, r4
   da7c8:	7840      	ldrb	r0, [r0, #1]
   da7ca:	f000 0008 	and.w	r0, r0, #8
   da7ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   da7d2:	b108      	cbz	r0, da7d8 <_strtol_r+0x28>
   da7d4:	462f      	mov	r7, r5
   da7d6:	e7f2      	b.n	da7be <_strtol_r+0xe>
   da7d8:	2c2d      	cmp	r4, #45	; 0x2d
   da7da:	d103      	bne.n	da7e4 <_strtol_r+0x34>
   da7dc:	1cbd      	adds	r5, r7, #2
   da7de:	787c      	ldrb	r4, [r7, #1]
   da7e0:	2601      	movs	r6, #1
   da7e2:	e003      	b.n	da7ec <_strtol_r+0x3c>
   da7e4:	2c2b      	cmp	r4, #43	; 0x2b
   da7e6:	bf04      	itt	eq
   da7e8:	787c      	ldrbeq	r4, [r7, #1]
   da7ea:	1cbd      	addeq	r5, r7, #2
   da7ec:	b113      	cbz	r3, da7f4 <_strtol_r+0x44>
   da7ee:	2b10      	cmp	r3, #16
   da7f0:	d10a      	bne.n	da808 <_strtol_r+0x58>
   da7f2:	e05b      	b.n	da8ac <_strtol_r+0xfc>
   da7f4:	2c30      	cmp	r4, #48	; 0x30
   da7f6:	d157      	bne.n	da8a8 <_strtol_r+0xf8>
   da7f8:	7828      	ldrb	r0, [r5, #0]
   da7fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da7fe:	2858      	cmp	r0, #88	; 0x58
   da800:	d14d      	bne.n	da89e <_strtol_r+0xee>
   da802:	786c      	ldrb	r4, [r5, #1]
   da804:	2310      	movs	r3, #16
   da806:	3502      	adds	r5, #2
   da808:	2e00      	cmp	r6, #0
   da80a:	bf14      	ite	ne
   da80c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   da810:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   da814:	2700      	movs	r7, #0
   da816:	fbbc faf3 	udiv	sl, ip, r3
   da81a:	4638      	mov	r0, r7
   da81c:	fb03 cc1a 	mls	ip, r3, sl, ip
   da820:	eb09 0e04 	add.w	lr, r9, r4
   da824:	f89e e001 	ldrb.w	lr, [lr, #1]
   da828:	f01e 0f04 	tst.w	lr, #4
   da82c:	d001      	beq.n	da832 <_strtol_r+0x82>
   da82e:	3c30      	subs	r4, #48	; 0x30
   da830:	e00b      	b.n	da84a <_strtol_r+0x9a>
   da832:	f01e 0e03 	ands.w	lr, lr, #3
   da836:	d01b      	beq.n	da870 <_strtol_r+0xc0>
   da838:	f1be 0f01 	cmp.w	lr, #1
   da83c:	bf0c      	ite	eq
   da83e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da842:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da846:	ebce 0404 	rsb	r4, lr, r4
   da84a:	42a3      	cmp	r3, r4
   da84c:	dd10      	ble.n	da870 <_strtol_r+0xc0>
   da84e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   da852:	d00a      	beq.n	da86a <_strtol_r+0xba>
   da854:	4550      	cmp	r0, sl
   da856:	d806      	bhi.n	da866 <_strtol_r+0xb6>
   da858:	d101      	bne.n	da85e <_strtol_r+0xae>
   da85a:	4564      	cmp	r4, ip
   da85c:	dc03      	bgt.n	da866 <_strtol_r+0xb6>
   da85e:	fb03 4000 	mla	r0, r3, r0, r4
   da862:	2701      	movs	r7, #1
   da864:	e001      	b.n	da86a <_strtol_r+0xba>
   da866:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   da86a:	f815 4b01 	ldrb.w	r4, [r5], #1
   da86e:	e7d7      	b.n	da820 <_strtol_r+0x70>
   da870:	1c7b      	adds	r3, r7, #1
   da872:	d10c      	bne.n	da88e <_strtol_r+0xde>
   da874:	2e00      	cmp	r6, #0
   da876:	f04f 0322 	mov.w	r3, #34	; 0x22
   da87a:	bf14      	ite	ne
   da87c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   da880:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   da884:	f8c8 3000 	str.w	r3, [r8]
   da888:	b92a      	cbnz	r2, da896 <_strtol_r+0xe6>
   da88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da88e:	b106      	cbz	r6, da892 <_strtol_r+0xe2>
   da890:	4240      	negs	r0, r0
   da892:	b172      	cbz	r2, da8b2 <_strtol_r+0x102>
   da894:	b107      	cbz	r7, da898 <_strtol_r+0xe8>
   da896:	1e69      	subs	r1, r5, #1
   da898:	6011      	str	r1, [r2, #0]
   da89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da89e:	2430      	movs	r4, #48	; 0x30
   da8a0:	2b00      	cmp	r3, #0
   da8a2:	d1b1      	bne.n	da808 <_strtol_r+0x58>
   da8a4:	2308      	movs	r3, #8
   da8a6:	e7af      	b.n	da808 <_strtol_r+0x58>
   da8a8:	230a      	movs	r3, #10
   da8aa:	e7ad      	b.n	da808 <_strtol_r+0x58>
   da8ac:	2c30      	cmp	r4, #48	; 0x30
   da8ae:	d0a3      	beq.n	da7f8 <_strtol_r+0x48>
   da8b0:	e7aa      	b.n	da808 <_strtol_r+0x58>
   da8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da8b6:	bf00      	nop
   da8b8:	2003db88 	.word	0x2003db88

000da8bc <strtol>:
   da8bc:	4613      	mov	r3, r2
   da8be:	460a      	mov	r2, r1
   da8c0:	4601      	mov	r1, r0
   da8c2:	4802      	ldr	r0, [pc, #8]	; (da8cc <strtol+0x10>)
   da8c4:	6800      	ldr	r0, [r0, #0]
   da8c6:	f7ff bf73 	b.w	da7b0 <_strtol_r>
   da8ca:	bf00      	nop
   da8cc:	2003dbec 	.word	0x2003dbec

000da8d0 <_strtoul_r>:
   da8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da8d4:	4680      	mov	r8, r0
   da8d6:	483c      	ldr	r0, [pc, #240]	; (da9c8 <_strtoul_r+0xf8>)
   da8d8:	f8d0 9000 	ldr.w	r9, [r0]
   da8dc:	460e      	mov	r6, r1
   da8de:	4635      	mov	r5, r6
   da8e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   da8e4:	eb09 0004 	add.w	r0, r9, r4
   da8e8:	7840      	ldrb	r0, [r0, #1]
   da8ea:	f000 0008 	and.w	r0, r0, #8
   da8ee:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   da8f2:	b108      	cbz	r0, da8f8 <_strtoul_r+0x28>
   da8f4:	462e      	mov	r6, r5
   da8f6:	e7f2      	b.n	da8de <_strtoul_r+0xe>
   da8f8:	2c2d      	cmp	r4, #45	; 0x2d
   da8fa:	d103      	bne.n	da904 <_strtoul_r+0x34>
   da8fc:	1cb5      	adds	r5, r6, #2
   da8fe:	7874      	ldrb	r4, [r6, #1]
   da900:	2701      	movs	r7, #1
   da902:	e003      	b.n	da90c <_strtoul_r+0x3c>
   da904:	2c2b      	cmp	r4, #43	; 0x2b
   da906:	bf04      	itt	eq
   da908:	7874      	ldrbeq	r4, [r6, #1]
   da90a:	1cb5      	addeq	r5, r6, #2
   da90c:	b113      	cbz	r3, da914 <_strtoul_r+0x44>
   da90e:	2b10      	cmp	r3, #16
   da910:	d10a      	bne.n	da928 <_strtoul_r+0x58>
   da912:	e053      	b.n	da9bc <_strtoul_r+0xec>
   da914:	2c30      	cmp	r4, #48	; 0x30
   da916:	d14f      	bne.n	da9b8 <_strtoul_r+0xe8>
   da918:	7828      	ldrb	r0, [r5, #0]
   da91a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da91e:	2858      	cmp	r0, #88	; 0x58
   da920:	d145      	bne.n	da9ae <_strtoul_r+0xde>
   da922:	786c      	ldrb	r4, [r5, #1]
   da924:	2310      	movs	r3, #16
   da926:	3502      	adds	r5, #2
   da928:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   da92c:	2600      	movs	r6, #0
   da92e:	fbbc fcf3 	udiv	ip, ip, r3
   da932:	fb03 fa0c 	mul.w	sl, r3, ip
   da936:	ea6f 0a0a 	mvn.w	sl, sl
   da93a:	4630      	mov	r0, r6
   da93c:	eb09 0e04 	add.w	lr, r9, r4
   da940:	f89e e001 	ldrb.w	lr, [lr, #1]
   da944:	f01e 0f04 	tst.w	lr, #4
   da948:	d001      	beq.n	da94e <_strtoul_r+0x7e>
   da94a:	3c30      	subs	r4, #48	; 0x30
   da94c:	e00b      	b.n	da966 <_strtoul_r+0x96>
   da94e:	f01e 0e03 	ands.w	lr, lr, #3
   da952:	d01a      	beq.n	da98a <_strtoul_r+0xba>
   da954:	f1be 0f01 	cmp.w	lr, #1
   da958:	bf0c      	ite	eq
   da95a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   da95e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   da962:	ebce 0404 	rsb	r4, lr, r4
   da966:	42a3      	cmp	r3, r4
   da968:	dd0f      	ble.n	da98a <_strtoul_r+0xba>
   da96a:	2e00      	cmp	r6, #0
   da96c:	db08      	blt.n	da980 <_strtoul_r+0xb0>
   da96e:	4560      	cmp	r0, ip
   da970:	d806      	bhi.n	da980 <_strtoul_r+0xb0>
   da972:	d101      	bne.n	da978 <_strtoul_r+0xa8>
   da974:	4554      	cmp	r4, sl
   da976:	dc03      	bgt.n	da980 <_strtoul_r+0xb0>
   da978:	fb03 4000 	mla	r0, r3, r0, r4
   da97c:	2601      	movs	r6, #1
   da97e:	e001      	b.n	da984 <_strtoul_r+0xb4>
   da980:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da984:	f815 4b01 	ldrb.w	r4, [r5], #1
   da988:	e7d8      	b.n	da93c <_strtoul_r+0x6c>
   da98a:	2e00      	cmp	r6, #0
   da98c:	da07      	bge.n	da99e <_strtoul_r+0xce>
   da98e:	2322      	movs	r3, #34	; 0x22
   da990:	f8c8 3000 	str.w	r3, [r8]
   da994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   da998:	b92a      	cbnz	r2, da9a6 <_strtoul_r+0xd6>
   da99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da99e:	b107      	cbz	r7, da9a2 <_strtoul_r+0xd2>
   da9a0:	4240      	negs	r0, r0
   da9a2:	b172      	cbz	r2, da9c2 <_strtoul_r+0xf2>
   da9a4:	b106      	cbz	r6, da9a8 <_strtoul_r+0xd8>
   da9a6:	1e69      	subs	r1, r5, #1
   da9a8:	6011      	str	r1, [r2, #0]
   da9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da9ae:	2430      	movs	r4, #48	; 0x30
   da9b0:	2b00      	cmp	r3, #0
   da9b2:	d1b9      	bne.n	da928 <_strtoul_r+0x58>
   da9b4:	2308      	movs	r3, #8
   da9b6:	e7b7      	b.n	da928 <_strtoul_r+0x58>
   da9b8:	230a      	movs	r3, #10
   da9ba:	e7b5      	b.n	da928 <_strtoul_r+0x58>
   da9bc:	2c30      	cmp	r4, #48	; 0x30
   da9be:	d0ab      	beq.n	da918 <_strtoul_r+0x48>
   da9c0:	e7b2      	b.n	da928 <_strtoul_r+0x58>
   da9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da9c6:	bf00      	nop
   da9c8:	2003db88 	.word	0x2003db88

000da9cc <strtoul>:
   da9cc:	4613      	mov	r3, r2
   da9ce:	460a      	mov	r2, r1
   da9d0:	4601      	mov	r1, r0
   da9d2:	4802      	ldr	r0, [pc, #8]	; (da9dc <strtoul+0x10>)
   da9d4:	6800      	ldr	r0, [r0, #0]
   da9d6:	f7ff bf7b 	b.w	da8d0 <_strtoul_r>
   da9da:	bf00      	nop
   da9dc:	2003dbec 	.word	0x2003dbec

000da9e0 <__tzcalc_limits>:
   da9e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da9e4:	4604      	mov	r4, r0
   da9e6:	f000 fa6f 	bl	daec8 <__gettzinfo>
   da9ea:	f240 73b1 	movw	r3, #1969	; 0x7b1
   da9ee:	429c      	cmp	r4, r3
   da9f0:	f340 8096 	ble.w	dab20 <__tzcalc_limits+0x140>
   da9f4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   da9f8:	18e3      	adds	r3, r4, r3
   da9fa:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   da9fe:	109b      	asrs	r3, r3, #2
   daa00:	f240 156d 	movw	r5, #365	; 0x16d
   daa04:	fb05 3502 	mla	r5, r5, r2, r3
   daa08:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   daa0c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   daa10:	fb92 f3f3 	sdiv	r3, r2, r3
   daa14:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   daa18:	442b      	add	r3, r5
   daa1a:	18a5      	adds	r5, r4, r2
   daa1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   daa20:	fb95 f5f2 	sdiv	r5, r5, r2
   daa24:	441d      	add	r5, r3
   daa26:	2364      	movs	r3, #100	; 0x64
   daa28:	fb94 f7f2 	sdiv	r7, r4, r2
   daa2c:	fb94 f6f3 	sdiv	r6, r4, r3
   daa30:	fb02 4717 	mls	r7, r2, r7, r4
   daa34:	fb03 4616 	mls	r6, r3, r6, r4
   daa38:	f100 0338 	add.w	r3, r0, #56	; 0x38
   daa3c:	fab7 fe87 	clz	lr, r7
   daa40:	9301      	str	r3, [sp, #4]
   daa42:	f004 0303 	and.w	r3, r4, #3
   daa46:	6044      	str	r4, [r0, #4]
   daa48:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   daa4c:	4601      	mov	r1, r0
   daa4e:	9300      	str	r3, [sp, #0]
   daa50:	f04f 0c07 	mov.w	ip, #7
   daa54:	7a0b      	ldrb	r3, [r1, #8]
   daa56:	2b4a      	cmp	r3, #74	; 0x4a
   daa58:	d10e      	bne.n	daa78 <__tzcalc_limits+0x98>
   daa5a:	694b      	ldr	r3, [r1, #20]
   daa5c:	9a00      	ldr	r2, [sp, #0]
   daa5e:	18ec      	adds	r4, r5, r3
   daa60:	b902      	cbnz	r2, daa64 <__tzcalc_limits+0x84>
   daa62:	b906      	cbnz	r6, daa66 <__tzcalc_limits+0x86>
   daa64:	b927      	cbnz	r7, daa70 <__tzcalc_limits+0x90>
   daa66:	2b3b      	cmp	r3, #59	; 0x3b
   daa68:	bfd4      	ite	le
   daa6a:	2300      	movle	r3, #0
   daa6c:	2301      	movgt	r3, #1
   daa6e:	e000      	b.n	daa72 <__tzcalc_limits+0x92>
   daa70:	2300      	movs	r3, #0
   daa72:	4423      	add	r3, r4
   daa74:	3b01      	subs	r3, #1
   daa76:	e03f      	b.n	daaf8 <__tzcalc_limits+0x118>
   daa78:	2b44      	cmp	r3, #68	; 0x44
   daa7a:	d102      	bne.n	daa82 <__tzcalc_limits+0xa2>
   daa7c:	694b      	ldr	r3, [r1, #20]
   daa7e:	442b      	add	r3, r5
   daa80:	e03a      	b.n	daaf8 <__tzcalc_limits+0x118>
   daa82:	9b00      	ldr	r3, [sp, #0]
   daa84:	b92b      	cbnz	r3, daa92 <__tzcalc_limits+0xb2>
   daa86:	2e00      	cmp	r6, #0
   daa88:	bf0c      	ite	eq
   daa8a:	46f0      	moveq	r8, lr
   daa8c:	f04f 0801 	movne.w	r8, #1
   daa90:	e000      	b.n	daa94 <__tzcalc_limits+0xb4>
   daa92:	46f0      	mov	r8, lr
   daa94:	4b24      	ldr	r3, [pc, #144]	; (dab28 <__tzcalc_limits+0x148>)
   daa96:	68cc      	ldr	r4, [r1, #12]
   daa98:	2230      	movs	r2, #48	; 0x30
   daa9a:	fb02 3808 	mla	r8, r2, r8, r3
   daa9e:	f1a8 0a04 	sub.w	sl, r8, #4
   daaa2:	46a9      	mov	r9, r5
   daaa4:	2301      	movs	r3, #1
   daaa6:	42a3      	cmp	r3, r4
   daaa8:	da04      	bge.n	daab4 <__tzcalc_limits+0xd4>
   daaaa:	f85a bf04 	ldr.w	fp, [sl, #4]!
   daaae:	3301      	adds	r3, #1
   daab0:	44d9      	add	r9, fp
   daab2:	e7f8      	b.n	daaa6 <__tzcalc_limits+0xc6>
   daab4:	f109 0304 	add.w	r3, r9, #4
   daab8:	fb93 fbfc 	sdiv	fp, r3, ip
   daabc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   daac0:	2c01      	cmp	r4, #1
   daac2:	ebca 0a03 	rsb	sl, sl, r3
   daac6:	694b      	ldr	r3, [r1, #20]
   daac8:	bfb8      	it	lt
   daaca:	2401      	movlt	r4, #1
   daacc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   daad0:	ebb3 0a0a 	subs.w	sl, r3, sl
   daad4:	690b      	ldr	r3, [r1, #16]
   daad6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   daada:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   daade:	bf48      	it	mi
   daae0:	f10a 0a07 	addmi.w	sl, sl, #7
   daae4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   daae8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   daaec:	4453      	add	r3, sl
   daaee:	42a3      	cmp	r3, r4
   daaf0:	db01      	blt.n	daaf6 <__tzcalc_limits+0x116>
   daaf2:	3b07      	subs	r3, #7
   daaf4:	e7fb      	b.n	daaee <__tzcalc_limits+0x10e>
   daaf6:	444b      	add	r3, r9
   daaf8:	698c      	ldr	r4, [r1, #24]
   daafa:	4a0c      	ldr	r2, [pc, #48]	; (dab2c <__tzcalc_limits+0x14c>)
   daafc:	fb02 4303 	mla	r3, r2, r3, r4
   dab00:	6a0c      	ldr	r4, [r1, #32]
   dab02:	4423      	add	r3, r4
   dab04:	f841 3f1c 	str.w	r3, [r1, #28]!
   dab08:	9b01      	ldr	r3, [sp, #4]
   dab0a:	4299      	cmp	r1, r3
   dab0c:	d1a2      	bne.n	daa54 <__tzcalc_limits+0x74>
   dab0e:	69c3      	ldr	r3, [r0, #28]
   dab10:	6b82      	ldr	r2, [r0, #56]	; 0x38
   dab12:	4293      	cmp	r3, r2
   dab14:	bfac      	ite	ge
   dab16:	2300      	movge	r3, #0
   dab18:	2301      	movlt	r3, #1
   dab1a:	6003      	str	r3, [r0, #0]
   dab1c:	2001      	movs	r0, #1
   dab1e:	e000      	b.n	dab22 <__tzcalc_limits+0x142>
   dab20:	2000      	movs	r0, #0
   dab22:	b003      	add	sp, #12
   dab24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dab28:	000dc0ec 	.word	0x000dc0ec
   dab2c:	00015180 	.word	0x00015180

000dab30 <__tz_lock>:
   dab30:	4770      	bx	lr

000dab32 <__tz_unlock>:
   dab32:	4770      	bx	lr

000dab34 <_tzset_unlocked>:
   dab34:	4b01      	ldr	r3, [pc, #4]	; (dab3c <_tzset_unlocked+0x8>)
   dab36:	6818      	ldr	r0, [r3, #0]
   dab38:	f000 b802 	b.w	dab40 <_tzset_unlocked_r>
   dab3c:	2003dbec 	.word	0x2003dbec

000dab40 <_tzset_unlocked_r>:
   dab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dab44:	b08d      	sub	sp, #52	; 0x34
   dab46:	4607      	mov	r7, r0
   dab48:	f000 f9be 	bl	daec8 <__gettzinfo>
   dab4c:	49b0      	ldr	r1, [pc, #704]	; (dae10 <_tzset_unlocked_r+0x2d0>)
   dab4e:	4eb1      	ldr	r6, [pc, #708]	; (dae14 <_tzset_unlocked_r+0x2d4>)
   dab50:	4604      	mov	r4, r0
   dab52:	4638      	mov	r0, r7
   dab54:	f000 f9b0 	bl	daeb8 <_getenv_r>
   dab58:	4605      	mov	r5, r0
   dab5a:	b960      	cbnz	r0, dab76 <_tzset_unlocked_r+0x36>
   dab5c:	4bae      	ldr	r3, [pc, #696]	; (dae18 <_tzset_unlocked_r+0x2d8>)
   dab5e:	4aaf      	ldr	r2, [pc, #700]	; (dae1c <_tzset_unlocked_r+0x2dc>)
   dab60:	6018      	str	r0, [r3, #0]
   dab62:	4baf      	ldr	r3, [pc, #700]	; (dae20 <_tzset_unlocked_r+0x2e0>)
   dab64:	6018      	str	r0, [r3, #0]
   dab66:	4baf      	ldr	r3, [pc, #700]	; (dae24 <_tzset_unlocked_r+0x2e4>)
   dab68:	6830      	ldr	r0, [r6, #0]
   dab6a:	601a      	str	r2, [r3, #0]
   dab6c:	605a      	str	r2, [r3, #4]
   dab6e:	f7fd f91b 	bl	d7da8 <free>
   dab72:	6035      	str	r5, [r6, #0]
   dab74:	e148      	b.n	dae08 <_tzset_unlocked_r+0x2c8>
   dab76:	6831      	ldr	r1, [r6, #0]
   dab78:	b979      	cbnz	r1, dab9a <_tzset_unlocked_r+0x5a>
   dab7a:	6830      	ldr	r0, [r6, #0]
   dab7c:	f7fd f914 	bl	d7da8 <free>
   dab80:	4628      	mov	r0, r5
   dab82:	f7ff fde4 	bl	da74e <strlen>
   dab86:	1c41      	adds	r1, r0, #1
   dab88:	4638      	mov	r0, r7
   dab8a:	f7fd f94d 	bl	d7e28 <_malloc_r>
   dab8e:	6030      	str	r0, [r6, #0]
   dab90:	b148      	cbz	r0, daba6 <_tzset_unlocked_r+0x66>
   dab92:	4629      	mov	r1, r5
   dab94:	f7ff fdb8 	bl	da708 <strcpy>
   dab98:	e005      	b.n	daba6 <_tzset_unlocked_r+0x66>
   dab9a:	f7ff fdab 	bl	da6f4 <strcmp>
   dab9e:	2800      	cmp	r0, #0
   daba0:	f000 8132 	beq.w	dae08 <_tzset_unlocked_r+0x2c8>
   daba4:	e7e9      	b.n	dab7a <_tzset_unlocked_r+0x3a>
   daba6:	782b      	ldrb	r3, [r5, #0]
   daba8:	4a9f      	ldr	r2, [pc, #636]	; (dae28 <_tzset_unlocked_r+0x2e8>)
   dabaa:	49a0      	ldr	r1, [pc, #640]	; (dae2c <_tzset_unlocked_r+0x2ec>)
   dabac:	2b3a      	cmp	r3, #58	; 0x3a
   dabae:	bf08      	it	eq
   dabb0:	3501      	addeq	r5, #1
   dabb2:	ae0a      	add	r6, sp, #40	; 0x28
   dabb4:	4633      	mov	r3, r6
   dabb6:	4628      	mov	r0, r5
   dabb8:	f7fd f916 	bl	d7de8 <siscanf>
   dabbc:	2800      	cmp	r0, #0
   dabbe:	f340 8123 	ble.w	dae08 <_tzset_unlocked_r+0x2c8>
   dabc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dabc4:	18ef      	adds	r7, r5, r3
   dabc6:	5ceb      	ldrb	r3, [r5, r3]
   dabc8:	2b2d      	cmp	r3, #45	; 0x2d
   dabca:	d103      	bne.n	dabd4 <_tzset_unlocked_r+0x94>
   dabcc:	3701      	adds	r7, #1
   dabce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   dabd2:	e003      	b.n	dabdc <_tzset_unlocked_r+0x9c>
   dabd4:	2b2b      	cmp	r3, #43	; 0x2b
   dabd6:	bf08      	it	eq
   dabd8:	3701      	addeq	r7, #1
   dabda:	2501      	movs	r5, #1
   dabdc:	f10d 0a20 	add.w	sl, sp, #32
   dabe0:	f10d 0b1e 	add.w	fp, sp, #30
   dabe4:	f04f 0800 	mov.w	r8, #0
   dabe8:	9603      	str	r6, [sp, #12]
   dabea:	f8cd a008 	str.w	sl, [sp, #8]
   dabee:	9601      	str	r6, [sp, #4]
   dabf0:	f8cd b000 	str.w	fp, [sp]
   dabf4:	4633      	mov	r3, r6
   dabf6:	aa07      	add	r2, sp, #28
   dabf8:	498d      	ldr	r1, [pc, #564]	; (dae30 <_tzset_unlocked_r+0x2f0>)
   dabfa:	f8ad 801e 	strh.w	r8, [sp, #30]
   dabfe:	4638      	mov	r0, r7
   dac00:	f8ad 8020 	strh.w	r8, [sp, #32]
   dac04:	f7fd f8f0 	bl	d7de8 <siscanf>
   dac08:	4540      	cmp	r0, r8
   dac0a:	f340 80fd 	ble.w	dae08 <_tzset_unlocked_r+0x2c8>
   dac0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dac12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dac16:	f8df 9224 	ldr.w	r9, [pc, #548]	; dae3c <_tzset_unlocked_r+0x2fc>
   dac1a:	213c      	movs	r1, #60	; 0x3c
   dac1c:	fb01 3302 	mla	r3, r1, r2, r3
   dac20:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dac24:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dac28:	fb01 3302 	mla	r3, r1, r2, r3
   dac2c:	435d      	muls	r5, r3
   dac2e:	6225      	str	r5, [r4, #32]
   dac30:	4d7c      	ldr	r5, [pc, #496]	; (dae24 <_tzset_unlocked_r+0x2e4>)
   dac32:	4b7d      	ldr	r3, [pc, #500]	; (dae28 <_tzset_unlocked_r+0x2e8>)
   dac34:	602b      	str	r3, [r5, #0]
   dac36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dac38:	497c      	ldr	r1, [pc, #496]	; (dae2c <_tzset_unlocked_r+0x2ec>)
   dac3a:	441f      	add	r7, r3
   dac3c:	464a      	mov	r2, r9
   dac3e:	4633      	mov	r3, r6
   dac40:	4638      	mov	r0, r7
   dac42:	f7fd f8d1 	bl	d7de8 <siscanf>
   dac46:	4540      	cmp	r0, r8
   dac48:	dc08      	bgt.n	dac5c <_tzset_unlocked_r+0x11c>
   dac4a:	682b      	ldr	r3, [r5, #0]
   dac4c:	606b      	str	r3, [r5, #4]
   dac4e:	4b72      	ldr	r3, [pc, #456]	; (dae18 <_tzset_unlocked_r+0x2d8>)
   dac50:	6a22      	ldr	r2, [r4, #32]
   dac52:	601a      	str	r2, [r3, #0]
   dac54:	4b72      	ldr	r3, [pc, #456]	; (dae20 <_tzset_unlocked_r+0x2e0>)
   dac56:	f8c3 8000 	str.w	r8, [r3]
   dac5a:	e0d5      	b.n	dae08 <_tzset_unlocked_r+0x2c8>
   dac5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dac5e:	f8c5 9004 	str.w	r9, [r5, #4]
   dac62:	18fd      	adds	r5, r7, r3
   dac64:	5cfb      	ldrb	r3, [r7, r3]
   dac66:	2b2d      	cmp	r3, #45	; 0x2d
   dac68:	d103      	bne.n	dac72 <_tzset_unlocked_r+0x132>
   dac6a:	3501      	adds	r5, #1
   dac6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   dac70:	e003      	b.n	dac7a <_tzset_unlocked_r+0x13a>
   dac72:	2b2b      	cmp	r3, #43	; 0x2b
   dac74:	bf08      	it	eq
   dac76:	3501      	addeq	r5, #1
   dac78:	2701      	movs	r7, #1
   dac7a:	2300      	movs	r3, #0
   dac7c:	f8ad 301c 	strh.w	r3, [sp, #28]
   dac80:	f8ad 301e 	strh.w	r3, [sp, #30]
   dac84:	f8ad 3020 	strh.w	r3, [sp, #32]
   dac88:	930a      	str	r3, [sp, #40]	; 0x28
   dac8a:	9603      	str	r6, [sp, #12]
   dac8c:	f8cd a008 	str.w	sl, [sp, #8]
   dac90:	9601      	str	r6, [sp, #4]
   dac92:	f8cd b000 	str.w	fp, [sp]
   dac96:	4633      	mov	r3, r6
   dac98:	aa07      	add	r2, sp, #28
   dac9a:	4965      	ldr	r1, [pc, #404]	; (dae30 <_tzset_unlocked_r+0x2f0>)
   dac9c:	4628      	mov	r0, r5
   dac9e:	f7fd f8a3 	bl	d7de8 <siscanf>
   daca2:	2800      	cmp	r0, #0
   daca4:	dc04      	bgt.n	dacb0 <_tzset_unlocked_r+0x170>
   daca6:	6a23      	ldr	r3, [r4, #32]
   daca8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   dacac:	63e3      	str	r3, [r4, #60]	; 0x3c
   dacae:	e00e      	b.n	dacce <_tzset_unlocked_r+0x18e>
   dacb0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dacb4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dacb8:	213c      	movs	r1, #60	; 0x3c
   dacba:	fb01 3302 	mla	r3, r1, r2, r3
   dacbe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dacc2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dacc6:	fb01 3302 	mla	r3, r1, r2, r3
   dacca:	435f      	muls	r7, r3
   daccc:	63e7      	str	r7, [r4, #60]	; 0x3c
   dacce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dacd0:	4627      	mov	r7, r4
   dacd2:	441d      	add	r5, r3
   dacd4:	f04f 0900 	mov.w	r9, #0
   dacd8:	782b      	ldrb	r3, [r5, #0]
   dacda:	2b2c      	cmp	r3, #44	; 0x2c
   dacdc:	bf08      	it	eq
   dacde:	3501      	addeq	r5, #1
   dace0:	f895 8000 	ldrb.w	r8, [r5]
   dace4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   dace8:	d126      	bne.n	dad38 <_tzset_unlocked_r+0x1f8>
   dacea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   dacee:	9302      	str	r3, [sp, #8]
   dacf0:	ab09      	add	r3, sp, #36	; 0x24
   dacf2:	9300      	str	r3, [sp, #0]
   dacf4:	9603      	str	r6, [sp, #12]
   dacf6:	9601      	str	r6, [sp, #4]
   dacf8:	4633      	mov	r3, r6
   dacfa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   dacfe:	494d      	ldr	r1, [pc, #308]	; (dae34 <_tzset_unlocked_r+0x2f4>)
   dad00:	4628      	mov	r0, r5
   dad02:	f7fd f871 	bl	d7de8 <siscanf>
   dad06:	2803      	cmp	r0, #3
   dad08:	d17e      	bne.n	dae08 <_tzset_unlocked_r+0x2c8>
   dad0a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   dad0e:	1e4b      	subs	r3, r1, #1
   dad10:	2b0b      	cmp	r3, #11
   dad12:	d879      	bhi.n	dae08 <_tzset_unlocked_r+0x2c8>
   dad14:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   dad18:	1e53      	subs	r3, r2, #1
   dad1a:	2b04      	cmp	r3, #4
   dad1c:	d874      	bhi.n	dae08 <_tzset_unlocked_r+0x2c8>
   dad1e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   dad22:	2b06      	cmp	r3, #6
   dad24:	d870      	bhi.n	dae08 <_tzset_unlocked_r+0x2c8>
   dad26:	f887 8008 	strb.w	r8, [r7, #8]
   dad2a:	60f9      	str	r1, [r7, #12]
   dad2c:	613a      	str	r2, [r7, #16]
   dad2e:	617b      	str	r3, [r7, #20]
   dad30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dad32:	eb05 0803 	add.w	r8, r5, r3
   dad36:	e02a      	b.n	dad8e <_tzset_unlocked_r+0x24e>
   dad38:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   dad3c:	bf06      	itte	eq
   dad3e:	3501      	addeq	r5, #1
   dad40:	4643      	moveq	r3, r8
   dad42:	2344      	movne	r3, #68	; 0x44
   dad44:	220a      	movs	r2, #10
   dad46:	a90b      	add	r1, sp, #44	; 0x2c
   dad48:	4628      	mov	r0, r5
   dad4a:	9305      	str	r3, [sp, #20]
   dad4c:	f7ff fe3e 	bl	da9cc <strtoul>
   dad50:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   dad54:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   dad58:	4545      	cmp	r5, r8
   dad5a:	9b05      	ldr	r3, [sp, #20]
   dad5c:	d114      	bne.n	dad88 <_tzset_unlocked_r+0x248>
   dad5e:	234d      	movs	r3, #77	; 0x4d
   dad60:	f1b9 0f00 	cmp.w	r9, #0
   dad64:	d107      	bne.n	dad76 <_tzset_unlocked_r+0x236>
   dad66:	7223      	strb	r3, [r4, #8]
   dad68:	2303      	movs	r3, #3
   dad6a:	60e3      	str	r3, [r4, #12]
   dad6c:	2302      	movs	r3, #2
   dad6e:	6123      	str	r3, [r4, #16]
   dad70:	f8c4 9014 	str.w	r9, [r4, #20]
   dad74:	e00b      	b.n	dad8e <_tzset_unlocked_r+0x24e>
   dad76:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   dad7a:	230b      	movs	r3, #11
   dad7c:	62a3      	str	r3, [r4, #40]	; 0x28
   dad7e:	2301      	movs	r3, #1
   dad80:	62e3      	str	r3, [r4, #44]	; 0x2c
   dad82:	2300      	movs	r3, #0
   dad84:	6323      	str	r3, [r4, #48]	; 0x30
   dad86:	e002      	b.n	dad8e <_tzset_unlocked_r+0x24e>
   dad88:	b280      	uxth	r0, r0
   dad8a:	723b      	strb	r3, [r7, #8]
   dad8c:	6178      	str	r0, [r7, #20]
   dad8e:	2302      	movs	r3, #2
   dad90:	f8ad 301c 	strh.w	r3, [sp, #28]
   dad94:	2300      	movs	r3, #0
   dad96:	f8ad 301e 	strh.w	r3, [sp, #30]
   dad9a:	f8ad 3020 	strh.w	r3, [sp, #32]
   dad9e:	930a      	str	r3, [sp, #40]	; 0x28
   dada0:	f898 3000 	ldrb.w	r3, [r8]
   dada4:	2b2f      	cmp	r3, #47	; 0x2f
   dada6:	d10b      	bne.n	dadc0 <_tzset_unlocked_r+0x280>
   dada8:	9603      	str	r6, [sp, #12]
   dadaa:	f8cd a008 	str.w	sl, [sp, #8]
   dadae:	9601      	str	r6, [sp, #4]
   dadb0:	f8cd b000 	str.w	fp, [sp]
   dadb4:	4633      	mov	r3, r6
   dadb6:	aa07      	add	r2, sp, #28
   dadb8:	491f      	ldr	r1, [pc, #124]	; (dae38 <_tzset_unlocked_r+0x2f8>)
   dadba:	4640      	mov	r0, r8
   dadbc:	f7fd f814 	bl	d7de8 <siscanf>
   dadc0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   dadc4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   dadc8:	213c      	movs	r1, #60	; 0x3c
   dadca:	fb01 3302 	mla	r3, r1, r2, r3
   dadce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   dadd2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   dadd6:	fb01 3302 	mla	r3, r1, r2, r3
   dadda:	61bb      	str	r3, [r7, #24]
   daddc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   dadde:	f109 0901 	add.w	r9, r9, #1
   dade2:	f1b9 0f02 	cmp.w	r9, #2
   dade6:	4445      	add	r5, r8
   dade8:	f107 071c 	add.w	r7, r7, #28
   dadec:	f47f af74 	bne.w	dacd8 <_tzset_unlocked_r+0x198>
   dadf0:	6860      	ldr	r0, [r4, #4]
   dadf2:	f7ff fdf5 	bl	da9e0 <__tzcalc_limits>
   dadf6:	4b08      	ldr	r3, [pc, #32]	; (dae18 <_tzset_unlocked_r+0x2d8>)
   dadf8:	6a22      	ldr	r2, [r4, #32]
   dadfa:	601a      	str	r2, [r3, #0]
   dadfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dadfe:	1a9b      	subs	r3, r3, r2
   dae00:	4a07      	ldr	r2, [pc, #28]	; (dae20 <_tzset_unlocked_r+0x2e0>)
   dae02:	bf18      	it	ne
   dae04:	2301      	movne	r3, #1
   dae06:	6013      	str	r3, [r2, #0]
   dae08:	b00d      	add	sp, #52	; 0x34
   dae0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dae0e:	bf00      	nop
   dae10:	000dc14c 	.word	0x000dc14c
   dae14:	2003e7e0 	.word	0x2003e7e0
   dae18:	2003e7e8 	.word	0x2003e7e8
   dae1c:	000dc14f 	.word	0x000dc14f
   dae20:	2003e7e4 	.word	0x2003e7e4
   dae24:	2003dbf0 	.word	0x2003dbf0
   dae28:	2003e7d3 	.word	0x2003e7d3
   dae2c:	000dc153 	.word	0x000dc153
   dae30:	000dc176 	.word	0x000dc176
   dae34:	000dc162 	.word	0x000dc162
   dae38:	000dc175 	.word	0x000dc175
   dae3c:	2003e7c8 	.word	0x2003e7c8

000dae40 <_findenv_r>:
   dae40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dae44:	4607      	mov	r7, r0
   dae46:	468b      	mov	fp, r1
   dae48:	4690      	mov	r8, r2
   dae4a:	f000 f8d9 	bl	db000 <__env_lock>
   dae4e:	4b19      	ldr	r3, [pc, #100]	; (daeb4 <_findenv_r+0x74>)
   dae50:	681d      	ldr	r5, [r3, #0]
   dae52:	469a      	mov	sl, r3
   dae54:	b13d      	cbz	r5, dae66 <_findenv_r+0x26>
   dae56:	465c      	mov	r4, fp
   dae58:	4623      	mov	r3, r4
   dae5a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dae5e:	b142      	cbz	r2, dae72 <_findenv_r+0x32>
   dae60:	2a3d      	cmp	r2, #61	; 0x3d
   dae62:	461c      	mov	r4, r3
   dae64:	d1f8      	bne.n	dae58 <_findenv_r+0x18>
   dae66:	4638      	mov	r0, r7
   dae68:	f000 f8cb 	bl	db002 <__env_unlock>
   dae6c:	2000      	movs	r0, #0
   dae6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dae72:	ebcb 0404 	rsb	r4, fp, r4
   dae76:	46a9      	mov	r9, r5
   dae78:	f859 0b04 	ldr.w	r0, [r9], #4
   dae7c:	2800      	cmp	r0, #0
   dae7e:	d0f2      	beq.n	dae66 <_findenv_r+0x26>
   dae80:	4622      	mov	r2, r4
   dae82:	4659      	mov	r1, fp
   dae84:	f7ff fc6b 	bl	da75e <strncmp>
   dae88:	b988      	cbnz	r0, daeae <_findenv_r+0x6e>
   dae8a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   dae8e:	191e      	adds	r6, r3, r4
   dae90:	5d1b      	ldrb	r3, [r3, r4]
   dae92:	2b3d      	cmp	r3, #61	; 0x3d
   dae94:	d10b      	bne.n	daeae <_findenv_r+0x6e>
   dae96:	f8da 3000 	ldr.w	r3, [sl]
   dae9a:	1aed      	subs	r5, r5, r3
   dae9c:	10ad      	asrs	r5, r5, #2
   dae9e:	4638      	mov	r0, r7
   daea0:	f8c8 5000 	str.w	r5, [r8]
   daea4:	f000 f8ad 	bl	db002 <__env_unlock>
   daea8:	1c70      	adds	r0, r6, #1
   daeaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daeae:	464d      	mov	r5, r9
   daeb0:	e7e1      	b.n	dae76 <_findenv_r+0x36>
   daeb2:	bf00      	nop
   daeb4:	2003dc38 	.word	0x2003dc38

000daeb8 <_getenv_r>:
   daeb8:	b507      	push	{r0, r1, r2, lr}
   daeba:	aa01      	add	r2, sp, #4
   daebc:	f7ff ffc0 	bl	dae40 <_findenv_r>
   daec0:	b003      	add	sp, #12
   daec2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000daec8 <__gettzinfo>:
   daec8:	4800      	ldr	r0, [pc, #0]	; (daecc <__gettzinfo+0x4>)
   daeca:	4770      	bx	lr
   daecc:	2003dbf8 	.word	0x2003dbf8

000daed0 <gmtime_r>:
   daed0:	6802      	ldr	r2, [r0, #0]
   daed2:	4b47      	ldr	r3, [pc, #284]	; (daff0 <gmtime_r+0x120>)
   daed4:	b5f0      	push	{r4, r5, r6, r7, lr}
   daed6:	fb92 f4f3 	sdiv	r4, r2, r3
   daeda:	fb03 2214 	mls	r2, r3, r4, r2
   daede:	2a00      	cmp	r2, #0
   daee0:	bfbc      	itt	lt
   daee2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   daee6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   daeea:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   daeee:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   daef2:	fb92 f3f0 	sdiv	r3, r2, r0
   daef6:	fb00 2213 	mls	r2, r0, r3, r2
   daefa:	f04f 003c 	mov.w	r0, #60	; 0x3c
   daefe:	bfac      	ite	ge
   daf00:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   daf04:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   daf08:	608b      	str	r3, [r1, #8]
   daf0a:	fb92 f3f0 	sdiv	r3, r2, r0
   daf0e:	fb00 2213 	mls	r2, r0, r3, r2
   daf12:	604b      	str	r3, [r1, #4]
   daf14:	600a      	str	r2, [r1, #0]
   daf16:	2307      	movs	r3, #7
   daf18:	1ce2      	adds	r2, r4, #3
   daf1a:	fb92 f3f3 	sdiv	r3, r2, r3
   daf1e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   daf22:	1ad3      	subs	r3, r2, r3
   daf24:	618b      	str	r3, [r1, #24]
   daf26:	4b33      	ldr	r3, [pc, #204]	; (daff4 <gmtime_r+0x124>)
   daf28:	4d33      	ldr	r5, [pc, #204]	; (daff8 <gmtime_r+0x128>)
   daf2a:	fb94 f5f5 	sdiv	r5, r4, r5
   daf2e:	fb03 4405 	mla	r4, r3, r5, r4
   daf32:	f648 62ac 	movw	r2, #36524	; 0x8eac
   daf36:	fbb4 f2f2 	udiv	r2, r4, r2
   daf3a:	4422      	add	r2, r4
   daf3c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   daf40:	fbb4 f3f7 	udiv	r3, r4, r7
   daf44:	1ad2      	subs	r2, r2, r3
   daf46:	482d      	ldr	r0, [pc, #180]	; (daffc <gmtime_r+0x12c>)
   daf48:	fbb4 f0f0 	udiv	r0, r4, r0
   daf4c:	f648 6694 	movw	r6, #36500	; 0x8e94
   daf50:	1a13      	subs	r3, r2, r0
   daf52:	fbb3 f6f6 	udiv	r6, r3, r6
   daf56:	4434      	add	r4, r6
   daf58:	f240 126d 	movw	r2, #365	; 0x16d
   daf5c:	fbb3 f0f2 	udiv	r0, r3, r2
   daf60:	fbb3 f3f7 	udiv	r3, r3, r7
   daf64:	1ae3      	subs	r3, r4, r3
   daf66:	fb02 3310 	mls	r3, r2, r0, r3
   daf6a:	2499      	movs	r4, #153	; 0x99
   daf6c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   daf70:	3202      	adds	r2, #2
   daf72:	fbb2 f2f4 	udiv	r2, r2, r4
   daf76:	2a0a      	cmp	r2, #10
   daf78:	fb04 f402 	mul.w	r4, r4, r2
   daf7c:	f104 0602 	add.w	r6, r4, #2
   daf80:	f04f 0405 	mov.w	r4, #5
   daf84:	fbb6 f4f4 	udiv	r4, r6, r4
   daf88:	bf34      	ite	cc
   daf8a:	2602      	movcc	r6, #2
   daf8c:	f06f 0609 	mvncs.w	r6, #9
   daf90:	4416      	add	r6, r2
   daf92:	f44f 72c8 	mov.w	r2, #400	; 0x190
   daf96:	fb02 0505 	mla	r5, r2, r5, r0
   daf9a:	1c5f      	adds	r7, r3, #1
   daf9c:	2e01      	cmp	r6, #1
   daf9e:	bf98      	it	ls
   dafa0:	3501      	addls	r5, #1
   dafa2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   dafa6:	eba7 0704 	sub.w	r7, r7, r4
   dafaa:	d302      	bcc.n	dafb2 <gmtime_r+0xe2>
   dafac:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   dafb0:	e014      	b.n	dafdc <gmtime_r+0x10c>
   dafb2:	0782      	lsls	r2, r0, #30
   dafb4:	d105      	bne.n	dafc2 <gmtime_r+0xf2>
   dafb6:	2464      	movs	r4, #100	; 0x64
   dafb8:	fbb0 f2f4 	udiv	r2, r0, r4
   dafbc:	fb04 0212 	mls	r2, r4, r2, r0
   dafc0:	b94a      	cbnz	r2, dafd6 <gmtime_r+0x106>
   dafc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   dafc6:	fbb0 f4f2 	udiv	r4, r0, r2
   dafca:	fb02 0014 	mls	r0, r2, r4, r0
   dafce:	fab0 f280 	clz	r2, r0
   dafd2:	0952      	lsrs	r2, r2, #5
   dafd4:	e000      	b.n	dafd8 <gmtime_r+0x108>
   dafd6:	2201      	movs	r2, #1
   dafd8:	333b      	adds	r3, #59	; 0x3b
   dafda:	441a      	add	r2, r3
   dafdc:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   dafe0:	2300      	movs	r3, #0
   dafe2:	61ca      	str	r2, [r1, #28]
   dafe4:	614d      	str	r5, [r1, #20]
   dafe6:	610e      	str	r6, [r1, #16]
   dafe8:	60cf      	str	r7, [r1, #12]
   dafea:	620b      	str	r3, [r1, #32]
   dafec:	4608      	mov	r0, r1
   dafee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   daff0:	00015180 	.word	0x00015180
   daff4:	fffdc54f 	.word	0xfffdc54f
   daff8:	00023ab1 	.word	0x00023ab1
   daffc:	00023ab0 	.word	0x00023ab0

000db000 <__env_lock>:
   db000:	4770      	bx	lr

000db002 <__env_unlock>:
   db002:	4770      	bx	lr

000db004 <dynalib_user>:
   db004:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   db014:	0000 0000                                   ....

000db018 <_ZTV16JsonParserStaticILj512ELj50EE>:
	...
   db020:	4171 000d 4185 000d                         qA...A..

000db028 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   db028:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e35     blnkinf.ver.0.5.
   db038:	0034 2d68 6562 7461 3100 0030 7562 6666     4.h-beat.10.buff
   db048:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   db058:	6974 6c63 0065 7562 6c69 0064 754a 206c     ticle.build.Jul 
   db068:	3731 3220 3130 2039 3431 303a 3a32 3334     17 2019 14:02:43
   db078:	0000 6700 6f6c 6162 5f6c 7069 253d 0073     ...global_ip=%s.
   db088:	6925 2500 696c 2500 3230 0069 003a 004d     %i.%li.%02i.:.M.
   db098:	696d 756e 6574 0073 6573 6f63 646e 0073     minutes.seconds.
   db0a8:	5453 504f 4157 4354 0048 6170 7472 6369     STOPWATCH.partic
   db0b8:	656c 642f 7665 6369 2f65 7069 2500 2c73     le/device/ip.%s,
   db0c8:	7325 7400 6d65 5270 6365 6965 6576 0064     %s.tempReceived.
   db0d8:	7563 7272 6e65 5374 6174 7574 0073 6570     currentStatus.pe
   db0e8:	6372 7069 7250 626f 7400 6d65 5270 6365     rcipProb.tempRec
   db0f8:	6965 6576 3d64 7325 202c 7563 7272 6e65     eived=%s, curren
   db108:	5374 6174 7574 3d73 7325 202c 7270 6365     tStatus=%s, prec
   db118:	7069 7469 7461 6f69 506e 6f72 6162 6962     ipitationProbabi
   db128:	696c 7974 253a 0073 616c 6974 7574 6564     lity:%s.latitude
   db138:	6c00 6e6f 6967 7574 6564 6c00 7461 253d     .longitude.lat=%
   db148:	2c73 6f6c 3d6e 7325 6900 006e 756f 0074     s,lon=%s.in.out.
   db158:	7770 006d 7764 6100 0077 6f63 706d 656c     pwm.dw.aw.comple
   db168:	6574 3800 3764 6263 3736 6538 3736 3461     te.8d7cb678e67a4
   db178:	6438 3934 3465 3334 6563 3435 6332 6662     8d49e443ce542cbf
   db188:	3132 0035 6f68 6b6f 722d 7365 6f70 736e     215.hook-respons
   db198:	2f65 6567 696f 0070 6f68 6b6f 722d 7365     e/geoip.hook-res
   db1a8:	6f70 736e 2f65 6574 706d 6552 6461 6e00     ponse/tempRead.n
   db1b8:	6d61 0065 756e 6562 7364 7600 0077 6954     ame.nubeds.vw.Ti
   db1c8:	656d 7327 5520 2150 2121 5400 6d69 2765     me's UP!!!.Time'
   db1d8:	2073 7055 2020 0020 4954 454d 0052 2046     s Up   .TIMER.F 
   db1e8:	2000 6152 6e69 203a 2500 6600 616c 6873     . Rain: .%.flash
   db1f8:	6300 7375 6f74 6c6d 6769 7468 4200 584f     .customlight.BOX
   db208:	4200 4f4e 3530 0035                         .BNO055.

000db210 <_ZTV15Adafruit_BNO055>:
	...
   db218:	4101 000d 5dad 000d 40c9 000d 62e5 000d     .A...]...@...b..
   db228:	6015 000d                                   .`..

000db22c <_ZTV12Adafruit_GFX>:
	...
   db23c:	66e1 000d 8881 000d 40a5 000d 63df 000d     .f.......@...c..
   db24c:	64ff 000d 651b 000d 649f 000d 6535 000d     .d...e...d..5e..
   db25c:	656d 000d 6589 000d                         me...e..

000db264 <_ZL4font>:
   db264:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   db274:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   db284:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   db294:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   db2a4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   db2b4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   db2c4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   db2d4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   db2e4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   db2f4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   db304:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   db314:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   db324:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   db334:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   db344:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   db354:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   db364:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   db374:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   db384:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   db394:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   db3a4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   db3b4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   db3c4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   db3d4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   db3e4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   db3f4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   db404:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   db414:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   db424:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   db434:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   db444:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   db454:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   db464:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   db474:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   db484:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   db494:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   db4a4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   db4b4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   db4c4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   db4d4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   db4e4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   db4f4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   db504:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   db514:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   db524:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   db534:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   db544:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   db554:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   db564:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   db574:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   db584:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   db594:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   db5a4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   db5b4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   db5c4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   db5d4:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   db5e4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   db5f4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   db604:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   db614:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   db624:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   db634:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   db644:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   db654:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   db664:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   db674:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   db684:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   db694:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   db6a4:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   db6b4:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   db6c4:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   db6d4:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   db6e4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   db6f4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   db704:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   db714:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   db724:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   db734:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   db744:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   db754:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000db760 <_ZTV10JsonBuffer>:
	...
   db768:	677d 000d 6799 000d 6c25 0075 3025 7834     }g...g..%lu.%04x
   db778:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   db788:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   db798:	2500 666c 0000 0000                         .%lf....

000db7a0 <_ZTV10JsonParser>:
	...
   db7a8:	67ad 000d 67d1 000d                         .g...g..

000db7b0 <_ZL23BlynkWriteHandlerVector>:
   db7b0:	4531 000d 4559 000d 458d 000d 45c1 000d     1E..YE...E...E..
   db7c0:	45d5 000d 6fe3 000d 4625 000d 6fe3 000d     .E...o..%F...o..
   db7d0:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db7e0:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db7f0:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db800:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db810:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db820:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db830:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db840:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db850:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db860:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db870:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db880:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db890:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db8a0:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db8b0:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db8c0:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db8d0:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db8e0:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db8f0:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db900:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db910:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db920:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db930:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db940:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db950:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db960:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db970:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db980:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db990:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..
   db9a0:	6fe3 000d 6fe3 000d 6fe3 000d 6fe3 000d     .o...o...o...o..

000db9b0 <_ZL22BlynkReadHandlerVector>:
   db9b0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   db9c0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   db9d0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   db9e0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   db9f0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dba00:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dba10:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dba20:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dba30:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dba40:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dba50:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dba60:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dba70:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dba80:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dba90:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbaa0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbab0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbac0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbad0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbae0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbaf0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbb00:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbb10:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbb20:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbb30:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbb40:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbb50:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbb60:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbb70:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbb80:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbb90:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..
   dbba0:	6fe1 000d 6fe1 000d 6fe1 000d 6fe1 000d     .o...o...o...o..

000dbbb0 <_ZTV18Adafruit_NeoMatrix>:
	...
   dbbb8:	4159 000d 5dbb 000d 66e1 000d 8881 000d     YA...]...f......
   dbbc8:	7087 000d 63df 000d 64ff 000d 651b 000d     .p...c...d...e..
   dbbd8:	649f 000d 6535 000d 7051 000d 6589 000d     .d..5e..Qp...e..

000dbbe8 <_ZL6gamma5>:
   dbbe8:	0100 0302 0705 0b09 110e 1814 221d 2e28     ............."(.
   dbbf8:	3d36 4f46 6459 7c6f 9789 b6a6 d9c7 ffeb     6=FOYdo|........

000dbc08 <_ZL6gamma6>:
   dbc08:	0100 0302 0504 0806 0a09 0d0b 100e 1312     ................
   dbc18:	1715 1b19 201d 2522 2a27 302d 3733 3e3a     ..... "%'*-037:>
   dbc28:	4541 4d49 5652 5f5b 6964 746e 7f79 8b85     AEIMRV[_dinty...
   dbc38:	9791 a49d b2ab c0b9 cfc7 ded6 eee6 fff7     ................
   dbc48:	c000 4001 1000 4002 2000 4002               ...@...@. .@

000dbc54 <CSWTCH.70>:
   dbc54:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   dbc64:	0050 0000                                   P...

000dbc68 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbc70:	7e95 000d 7e9b 000d 7eb3 000d 7ea9 000d     .~...~...~...~..
   dbc80:	7e97 000d                                   .~..

000dbc84 <_ZTVN5spark13EthernetClassE>:
	...
   dbc8c:	8427 000d 841d 000d 8413 000d 8409 000d     '...............
   dbc9c:	83fd 000d 83f1 000d 83e5 000d 83dd 000d     ................
   dbcac:	83d3 000d 83c9 000d 87a1 000d               ............

000dbcb8 <_ZTV7TwoWire>:
	...
   dbcc0:	8445 000d 848f 000d 8467 000d 8447 000d     E.......g...G...
   dbcd0:	846f 000d 8477 000d 847f 000d 8487 000d     o...w...........

000dbce0 <_ZTV9IPAddress>:
	...
   dbce8:	8513 000d 8503 000d 8505 000d 6e6c 6600     ............ln.f
   dbcf8:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   dbd08:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   dbd18:	203a 2000 005b 6f63 6564 3d20 0020 6564     : . [.code = .de
   dbd28:	6174 6c69 2073 203d 6200 7561 0064 6553     tails = .baud.Se
   dbd38:	6972 6c61 5300 7265 6169 316c 7400 7079     rial.Serial1.typ
   dbd48:	0065 6170 6172 006d 6d63 0064 6469 6800     e.param.cmd.id.h
   dbd58:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   dbd68:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   dbd78:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   dbd88:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   dbd98:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   dbda8:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   dbdb8:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   dbdc8:	6100 6c6c 0000 0000                         .all....

000dbdd0 <_ZTVN5spark9MeshClassE>:
	...
   dbdd8:	869f 000d 8695 000d 868b 000d 8681 000d     ................
   dbde8:	8675 000d 8669 000d 865d 000d 8655 000d     u...i...]...U...
   dbdf8:	864b 000d 8641 000d 87a1 000d               K...A.......

000dbe04 <_ZTVN5spark12NetworkClassE>:
	...
   dbe0c:	8739 000d 8743 000d 874d 000d 8757 000d     9...C...M...W...
   dbe1c:	8761 000d 876d 000d 8779 000d 8785 000d     a...m...y.......
   dbe2c:	878d 000d 8797 000d 87a1 000d               ............

000dbe38 <_ZTV8SPIClass>:
	...
   dbe40:	8a45 000d 8a47 000d                         E...G...

000dbe48 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dbe50:	8dc5 000d 8dcb 000d 92eb 000d 8dd9 000d     ................
   dbe60:	8dc7 000d                                   ....

000dbe64 <_ZTV9TCPClient>:
	...
   dbe6c:	8fd1 000d 8ff1 000d 8d3d 000d 8d57 000d     ........=...W...
   dbe7c:	9191 000d 8f9b 000d 8f6d 000d 8d81 000d     ........m.......
   dbe8c:	9067 000d 8ddd 000d 9005 000d 9161 000d     g...........a...
   dbe9c:	8d83 000d 8dbb 000d 8d69 000d 8ecd 000d     ........i.......
   dbeac:	8f4d 000d 6977 6972 676e 7200 6365 2076     M...wiring.recv 
   dbebc:	7265 6f72 2072 203d 6425 2500 302b 6433     error = %d.%+03d
   dbecc:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   dbedc:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   dbeec:	0065 0000                                   e...

000dbef0 <_ZTV11USARTSerial>:
	...
   dbef8:	9437 000d 9487 000d 9495 000d 8881 000d     7...............
   dbf08:	944b 000d 946d 000d 9459 000d 9481 000d     K...m...Y.......
   dbf18:	9439 000d 943d 000d                         9...=...

000dbf20 <_ZTV9USBSerial>:
	...
   dbf28:	953d 000d 958d 000d 959b 000d 8881 000d     =...............
   dbf38:	9579 000d 953f 000d 9555 000d 9587 000d     y...?...U.......
   dbf48:	956b 000d 9539 000d                         k...9...

000dbf50 <_ZTVN5spark9WiFiClassE>:
	...
   dbf58:	96a7 000d 969d 000d 9693 000d 9649 000d     ............I...
   dbf68:	9687 000d 967b 000d 966f 000d 9667 000d     ....{...o...g...
   dbf78:	965d 000d 9653 000d 87a1 000d               ]...S.......

000dbf84 <_ZSt7nothrow>:
	...

000dbf85 <_ctype_>:
   dbf85:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dbf95:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dbfa5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dbfb5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dbfc5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dbfd5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dbfe5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dbff5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc005:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc088 <__sf_fake_stdin>:
	...

000dc0a8 <__sf_fake_stdout>:
	...

000dc0c8 <__sf_fake_stderr>:
	...
   dc0e8:	0043 0000                                   C...

000dc0ec <__month_lengths>:
   dc0ec:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   dc0fc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc10c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc11c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dc12c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dc13c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dc14c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   dc15c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   dc16c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   dc17c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000dc188 <link_const_variable_data_end>:
   dc188:	000d5dd1 	.word	0x000d5dd1
   dc18c:	000d63db 	.word	0x000d63db
   dc190:	000d6761 	.word	0x000d6761
   dc194:	000d6765 	.word	0x000d6765
   dc198:	000d6769 	.word	0x000d6769
   dc19c:	000d6779 	.word	0x000d6779
   dc1a0:	000d6f11 	.word	0x000d6f11
   dc1a4:	000d6f15 	.word	0x000d6f15
   dc1a8:	000d6f19 	.word	0x000d6f19
   dc1ac:	000d6f1d 	.word	0x000d6f1d
   dc1b0:	000d6f41 	.word	0x000d6f41
   dc1b4:	000d6f45 	.word	0x000d6f45
   dc1b8:	000d6f49 	.word	0x000d6f49
   dc1bc:	000d6f4d 	.word	0x000d6f4d
   dc1c0:	000d6f51 	.word	0x000d6f51
   dc1c4:	000d6f55 	.word	0x000d6f55
   dc1c8:	000d6f59 	.word	0x000d6f59
   dc1cc:	000d6f5d 	.word	0x000d6f5d
   dc1d0:	000d6f61 	.word	0x000d6f61
   dc1d4:	000d6f65 	.word	0x000d6f65
   dc1d8:	000d6f69 	.word	0x000d6f69
   dc1dc:	000d6f6d 	.word	0x000d6f6d
   dc1e0:	000d6f71 	.word	0x000d6f71
   dc1e4:	000d6fd1 	.word	0x000d6fd1
   dc1e8:	000d6fdd 	.word	0x000d6fdd
   dc1ec:	000d7011 	.word	0x000d7011
   dc1f0:	000d7015 	.word	0x000d7015
   dc1f4:	000d7019 	.word	0x000d7019
   dc1f8:	000d727d 	.word	0x000d727d
   dc1fc:	000d778d 	.word	0x000d778d
   dc200:	000d77dd 	.word	0x000d77dd
   dc204:	000d7e85 	.word	0x000d7e85
   dc208:	000d8431 	.word	0x000d8431
   dc20c:	000d8631 	.word	0x000d8631
   dc210:	000d86ed 	.word	0x000d86ed
   dc214:	000d886d 	.word	0x000d886d
   dc218:	000d8a29 	.word	0x000d8a29
   dc21c:	000d8d25 	.word	0x000d8d25
   dc220:	000d93f5 	.word	0x000d93f5
   dc224:	000d96b1 	.word	0x000d96b1
   dc228:	000d9915 	.word	0x000d9915
   dc22c:	000d999d 	.word	0x000d999d
   dc230:	000d9a61 	.word	0x000d9a61
   dc234:	000d9ae5 	.word	0x000d9ae5
   dc238:	000d9b69 	.word	0x000d9b69

000dc23c <link_constructors_end>:
   dc23c:	00000000 	.word	0x00000000
